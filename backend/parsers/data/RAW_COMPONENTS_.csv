Document Purpose,Content
Styles for component Accordion subcomponents AccordionItem AccordionItem.module.scss,"@mixin padding($top-bottom, $left-right) {
  .header {
    padding: $top-bottom $left-right;
  }
}

@mixin contentColorHelper($bg, $cl, $icon) {
  background-color: $bg;
  color: $cl;

  path {
    fill: $icon;
  }
}

.expandable {
  display: grid;
  grid-template-rows: 0fr;
  transition: grid-template-rows 0.3s ease-out;
}

.expanded {
  grid-template-rows: 1fr;
}

.content-basic {
  overflow: hidden;
  padding: unset;
  transition: all 0.3s ease-in-out;
  transform-origin: left top;
  opacity: 0;
}

.content {
  opacity: var(--100-opacity);
}

.accordionItem {
  width: 100%;
  position: relative;

  .header {
    cursor: pointer;
    display: grid;
    grid-template-columns: var(--16-space) 1fr var(--16-space);
    gap: var(--16-space);
    align-items: center;
  }

  &.disabled {
    pointer-events: none;
  }

  &.default .header {
    @include contentColorHelper(
        var(--ac-accordion-default-default-bg-head),
        var(--ac-accordion-default-default-text),
        var(--ac-accordion-default-default-icon)
    );

    &.hovered {
      @include contentColorHelper(
          var(--ac-accordion-default-hover-bg-head),
          var(--ac-accordion-default-hover-heading),
          var(--ac-accordion-default-hover-icon)
      );
    }
    &.disabled {
      @include contentColorHelper(
          var(--ac-accordion-default-disabled-bg-head),
          var(--ac-accordion-default-disabled-heading),
          var(--ac-accordion-default-disabled-icon)
      );
    }
  }

  &.paper .header {
    @include contentColorHelper(
        var(--ac-accordion-paper-default-bg-head),
        var(--ac-accordion-paper-default-heading),
        var(--ac-accordion-paper-default-icon)
    );

    &.hovered {
      @include contentColorHelper(
          var(--ac-accordion-paper-hover-bg-head),
          var(--ac-accordion-paper-hover-heading),
          var(--ac-accordion-paper-hover-icon)
      );
    }

    &.disabled {
      @include contentColorHelper(
          var(--ac-accordion-paper-disabled-bg-head),
          var(--ac-accordion-default-disabled-heading),
          var(--ac-accordion-paper-disabled-icon)
      );
    }
  }

  &.m {
    @include padding(var(--16-space), var(--16-space));

    .content {
      padding: var(--8-space) var(--16-space) var(--16-space) var(--16-space);
    }
  }

  &.s {
    @include padding(var(--8-space), var(--16-space));
    .content {
      padding: var(--4-space) var(--16-space) var(--8-space) var(--16-space);
    }
  }

  &.xs {
    @include padding(var(--4-space), var(--16-space));
    .content {
      padding: var(--2-space) var(--16-space) var(--4-space) var(--16-space);
    }
  }
}

.icon-helper {
  height: var(--24-size);
  width: var(--24-size);
  display: flex;
  align-items: center;
  justify-content: center;

  svg {
    transition: 0.3s ease-out;
  }
}

.icon-plus {
  svg {
    transform: rotate(45deg);
  }
}

.icon-cross {
  svg {
    transform: rotate(0)
  }
}

.icon-down {
  svg {
    transform: rotate(0);
  }
}

.icon-up {
  svg {
    transform: rotate(180deg)
  }
}
"
Types for component Accordion _stories argsTypes.ts,"import { iconsMapping, sizesMapping, variantsMapping } from '../enums';

export const argsTypes = {
  size: {
    description: 'Размер',
    table: {
      defaultValue: {
        summary: sizesMapping.m
      },
      type: {
        summary: Object.values(sizesMapping).join(' | ')
      }
    },
    options: Object.values(sizesMapping),
    control: { type: 'select' }
  },
  variant: {
    description: 'Тип аккордеона',
    table: {
      defaultValue: {
        summary: variantsMapping.default
      },
      type: {
        summary: Object.values(variantsMapping).join(' | ')
      }
    },
    options: Object.values(variantsMapping),
    control: { type: 'select' }
  },
  multipleExpanded: {
    description: 'Возможноть ракрывать несколько элементов одновременно',
    table: {
      defaultValue: {
        summary: 'false'
      },
      type: {
        summary: 'boolean'
      }
    },
    control: { type: 'boolean' }
  },
  startIcon: {
    description: 'Иконка слева от заголовка',
    table: {
      defaultValue: {
        summary: iconsMapping.arrow
      },
      type: {
        summary: Object.values(iconsMapping).join(' | ')
      }
    },
    options: Object.values(iconsMapping),
    control: { type: 'select' }
  },
  endIcon: {
    description: 'Иконка справа от заголовка',
    table: {
      defaultValue: {
        summary: 'null'
      },
      type: {
        summary: Object.values(iconsMapping).join(' | ')
      }
    },
    options: Object.values(iconsMapping),
    control: { type: 'select' }
  },
  disabled: {
    description: 'Условие блокировки доступа к элементам компонента',
    table: {
      defaultValue: {
        summary: 'false'
      },
      type: {
        summary: 'boolean'
      }
    },
    control: { type: 'boolean' }
  }
};
"
Codes for component Accordion index.tsx,"import React, { useEffect, useState, Fragment } from 'react';

import clsx from 'clsx';

import { IAccordionProps } from './types';

import styles from './Accordion.module.scss';

import { iconsMapping, sizesMapping, variantsMapping } from './enums';
import AccordionItem from './subcomponents/AccordionItem';
import { TAccordionItem } from './subcomponents/AccordionItem/types';

export const Accordion: React.FC<IAccordionProps> = ({
  items,
  variant = variantsMapping.default,
  startIcon = iconsMapping.arrow,
  endIcon = null,
  size = sizesMapping.m,
  multipleExpanded = false,
  className,
  disabled = false,
  ...props
}) => {
  const [expandedItemIds, setExpandedItemIds] = useState<TAccordionItem['id'][]>([]);

  const handleExpand = (id: TAccordionItem['id']) => {
    const isExpanded = expandedItemIds.includes(id);

    if (multipleExpanded) {
      setExpandedItemIds(prev => (isExpanded ? prev.filter(item => item !== id) : [...prev, id]));
    } else {
      setExpandedItemIds(() => (isExpanded ? [] : [id]));
    }
  };

  useEffect(() => {
    const expandedOnStartIds = items.filter(i => i.initiallyExpanded).map(i => i.id);
    setExpandedItemIds(expandedOnStartIds);
  }, [items]);

  return (
    <div className={clsx(styles.wrapper, className)} {...props}>
      {items.map((item: TAccordionItem) => {
        return (
          <Fragment key={item.id}>
            <AccordionItem
              id={item.id}
              title={item.title}
              onExpand={handleExpand}
              isExpanded={expandedItemIds.includes(item.id)}
              startIcon={startIcon}
              endIcon={endIcon}
              size={size}
              variant={variant}
              disabled={disabled || item.disabled}
            >
              {item.content}
            </AccordionItem>
          </Fragment>
        );
      })}
    </div>
  );
};

export default Accordion;
"
Codes for component Accordion _stories Stories.tsx,"import React, { useState } from 'react';

import Editor from '@components/_storybook/Stories/components/Editor';
import FigmaEmbed from '@components/_storybook/Stories/components/FigmaEmbed';
import Header from '@components/_storybook/Stories/components/Header';
import Properties from '@components/_storybook/Stories/components/Properties';
import Tests from '@components/_storybook/Stories/components/Tests';
import '@components/_storybook/Stories/styles.css';
import { Tabs } from '@components/index';

import styles from '@components/_storybook/Stories/Stories.module.scss';

import { iconsMapping, sizesMapping, variantsMapping } from '../enums';
import { argsTypes } from './argsTypes';

enum TabIds {
  dev,
  design,
  tests
}

const COMPONENT_NAME = 'Accordion';
const FIGMA_URL =
  'https://www.figma.com/file/MSMqfqJrQNaqbLe4Ctkq7n/Design-System-2.0-NLMK-(beta)-(Community)?type=design&node-id=1026%3A7066&mode=design&t=awyt3Fzj1XS6th7v-1';

const Stories = (): JSX.Element => {
  const [activeTab, setActiveTab] = useState<TabIds>(TabIds.dev);

  const isActive = (tab: TabIds) => {
    return activeTab === tab;
  };

  return (
    <div className={styles.wrapper}>
      <Header
        title={COMPONENT_NAME}
        description={`Компонент ""аккордеон"" предоставляет большие объемы контента в ограниченном пространстве с помощью пошагового раскрытия. Заголовок обеспечивает пользователю общий обзор содержимого, позволяя решить, какие разделы читать.

        Аккордеоны могут сделать обработку информации и поиск более эффективными. Однако они скрывают контент от пользователей, и важно учесть, что пользователь может не заметить или не прочитать весь включенный контент. Если пользователь, вероятно, должен прочесть весь контент, не используйте аккордеон, так как это добавляет дополнительный клик; вместо этого используйте полноценную прокручиваемую страницу с обычными заголовками.`}
        isStable
        codeLink={`https://github.com/nlmk-group/ds-2.0/tree/main/src/components/${COMPONENT_NAME}`}
        figmaLink={FIGMA_URL}
      />

      <div className={styles.tabs}>
        <Tabs>
          <Tabs.Tab label=""Разработчику"" active={isActive(TabIds.dev)} onClick={() => setActiveTab(TabIds.dev)} />
          {/* <Tabs.Tab label=""Дизайнеру"" active={isActive(TabIds.design)} onClick={() => setActiveTab(TabIds.design)} /> */}
          <Tabs.Tab label=""Тестирование"" active={isActive(TabIds.tests)} onClick={() => setActiveTab(TabIds.tests)} />
        </Tabs>
      </div>

      {activeTab == TabIds.dev && (
        <>
          <Editor
            description=""Аккордеон по умолчанию""
            code={`import { Accordion } from '@nlmk/ds-2.0';

const items = [
    {
      id: 1,
      title: 'First accordion item',
      content: 'Lorem ipsum',
      initiallyExpanded: true
    },
    {
      id: 2,
      title: '2nd accordion item',
      content: 'Lorem ipsum'
    },
    {
      id: 3,
      title: 'Last accordion item',
      content: 'Lorem ipsum'
    }
  ]

export default App = () => (
  <Accordion items={items} />
)
              `}
          />

          <Editor
            description={`Варианты размеров аккордеона: ${Object.values(sizesMapping).join(' | ')}`}
            code={`import { Accordion } from '@nlmk/ds-2.0';

const items = [
  {
    id: 1,
    title: 'First accordion item',
    content: 'Lorem ipsum',
    initiallyExpanded: true
  },
  {
    id: 2,
    title: '2nd accordion item',
    content: 'Lorem ipsum'
  },
  {
    id: 3,
    title: 'Last accordion item',
    content: 'Lorem ipsum'
  }
]

export default App = () => (
  <>
  <Accordion size=""m"" items={items} />
  <Accordion size=""s"" items={items} />
  <Accordion size=""xs"" items={items} />
  </>
)
              `}
          />
          <Editor
            description={`Варианты иконок аккордеона: ${Object.values(iconsMapping).join(' | ')}`}
            code={`import { Accordion } from '@nlmk/ds-2.0';

const items = [
  {
    id: 1,
    title: 'First accordion item',
    content: 'Lorem ipsum',
    initiallyExpanded: true
  },
  {
    id: 2,
    title: '2nd accordion item',
    content: 'Lorem ipsum'
  },
  {
    id: 3,
    title: 'Last accordion item',
    content: 'Lorem ipsum'
  }
]

export default App = () => (
  <>
  <Accordion startIcon=""arrow"" items={items} />
  <Accordion startIcon=""plus"" items={items} />
  <Accordion startIcon={null} endIcon=""arrow"" items={items} />
  <Accordion startIcon={null} endIcon=""plus"" items={items} />
  </>
)
              `}
          />

          <Editor
            description={`Цветовые варианты аккордеона: ${Object.values(variantsMapping).join(' | ')}`}
            code={`import { Accordion } from '@nlmk/ds-2.0';

const items = [
  {
    id: 1,
    title: 'First accordion item',
    content: 'Lorem ipsum',
    initiallyExpanded: true
  },
  {
    id: 2,
    title: '2nd accordion item',
    content: 'Lorem ipsum'
  },
  {
    id: 3,
    title: 'Last accordion item',
    content: 'Lorem ipsum'
  }
]

export default App = () => (
  <>
  <Accordion variant=""default"" items={items} />
  <Accordion variant=""paper"" items={items} />
  <Accordion variant=""default"" items={items} disabled />
  <Accordion variant=""paper"" items={items} disabled />
  </>
)
              `}
          />
          <Properties argsTypes={argsTypes} />
        </>
      )}
      {activeTab == TabIds.design && <FigmaEmbed url={FIGMA_URL} />}
      {activeTab == TabIds.tests && <Tests componentName={COMPONENT_NAME} />}
    </div>
  );
};

export default Stories;
"
Codes for component Accordion subcomponents AccordionItem index.tsx,"import React, { useState } from 'react';

import { iconsMapping } from '@components/Accordion/enums';
import { TIcon } from '@components/Accordion/types';
import { IconChevronArrowUpOutlined24, IconCloseOutlined16 } from '@components/Icon/IconsDirectory';
import Typography from '@components/Typography';
import clsx from 'clsx';

import { IAccordionItemProps, TAccordionItem } from './types';

import styles from './AccordionItem.module.scss';

import { TYPOGRAPHY_CONTENT_VARIANTS, TYPOGRAPHY_TITLE_VARIANTS } from './constants';

const AccordionItem: React.FC<IAccordionItemProps> = ({
  id,
  title,
  size,
  variant,
  startIcon,
  endIcon,
  isExpanded,
  onExpand,
  disabled,
  children,
  className,
  ...props
}) => {
  const [isHovered, setIsHovered] = useState(false);

  const iconProps = {
    htmlColor: 'var(--ac-accordion-default-default-icon)'
  };

  const getExpandIcon = (icon: TIcon, testid: string) => {
    const iconsStyles = {
      plus: ['icon-cross', 'icon-plus'],
      arrow: ['icon-down', 'icon-up']
    };

    const Icon = icon === iconsMapping.plus ? IconCloseOutlined16 : IconChevronArrowUpOutlined24;

    return (
      <div
        data-testid={testid}
        className={clsx(
          styles['icon-helper'],
          isExpanded ? styles[iconsStyles[icon][0]] : styles[iconsStyles[icon][1]]
        )}
      >
        <Icon {...iconProps} />
      </div>
    );
  };

  const handleMouseEnter = () => {
    setIsHovered(true);
  };

  const handleMouseLeave = () => {
    setIsHovered(false);
  };

  const handleClick = (id: TAccordionItem['id']): void => {
    if (disabled) {
      return;
    }
    onExpand(id);
  };

  return (
    <div
      className={clsx(
        styles.accordionItem,
        styles[size],
        styles[variant],
        {
          [styles.disabled]: disabled,
          [styles.hovered]: isHovered
        },
        className
      )}
      onMouseEnter={handleMouseEnter}
      onMouseLeave={handleMouseLeave}
      {...props}
    >
      <div className={styles.header} onClick={() => handleClick(id)}>
        {startIcon && getExpandIcon(startIcon, 'ACCORDION_LEFT_ICON')}
        {endIcon && getExpandIcon(endIcon, 'ACCORDION_RIGHT_ICON')}
        <Typography variant={TYPOGRAPHY_TITLE_VARIANTS[size]}>{title}</Typography>
      </div>
      <div className={clsx(styles.expandable, isExpanded && styles.expanded)}>
        <Typography
          variant={TYPOGRAPHY_CONTENT_VARIANTS[size]}
          className={clsx(styles['content-basic'], isExpanded && styles.content)}
        >
          {children}
        </Typography>
      </div>
    </div>
  );
};

export default AccordionItem;
"
Types for component Accordion subcomponents AccordionItem types.ts,"import { ReactNode } from 'react';

import { iconsMapping, sizesMapping, variantsMapping } from '@components/Accordion/enums';

export type TAccordionItem = {
  id: string | number;
  title: string;
  content: ReactNode;
  disabled?: boolean;
  initiallyExpanded?: boolean;
};

export interface IAccordionItemProps extends Omit<TAccordionItem, 'content'> {
  isExpanded: boolean;
  onExpand: (id: TAccordionItem['id']) => void;
  startIcon?: `${iconsMapping}` | null;
  endIcon?: `${iconsMapping}` | null;
  size: `${sizesMapping}`;
  variant: `${variantsMapping}`;
  children: ReactNode;
  className?: string;
}
"
Styles for component Accordion Accordion.module.scss,"$accordion-border: solid var(--1-size) var(--ac-accordion-paper-divider);

.wrapper {
  width: 100%;
  display: flex;
  flex-flow: column nowrap;
  gap: 0;
  border: $accordion-border;
  border-radius: var(--8-size);
  overflow: hidden;

  & > div:not(:first-child) {
    border-top: $accordion-border;
  }
}
"
Types for component Accordion subcomponents AccordionItem constants.ts,"import { sizesMapping } from '@components/Accordion/enums';
import { ETypographyVariants } from '@components/Typography/enums';

export const TYPOGRAPHY_TITLE_VARIANTS: Record<sizesMapping, ETypographyVariants> = {
  [sizesMapping.xs]: ETypographyVariants['Body-Medium'],
  [sizesMapping.s]: ETypographyVariants['Subheading3-Medium'],
  [sizesMapping.m]: ETypographyVariants['Subheading3-Medium']
};
export const TYPOGRAPHY_CONTENT_VARIANTS: Record<sizesMapping, ETypographyVariants> = {
  [sizesMapping.xs]: ETypographyVariants.Body1,
  [sizesMapping.s]: ETypographyVariants.Body,
  [sizesMapping.m]: ETypographyVariants.Body
};
"
Types for component Accordion enums.ts,"export enum iconsMapping {
  plus = 'plus',
  arrow = 'arrow'
}

export enum sizesMapping {
  xs = 'xs',
  s = 's',
  m = 'm'
}

export enum variantsMapping {
  default = 'default',
  paper = 'paper'
}
"
Types for component Accordion types.ts,"import { iconsMapping, sizesMapping, variantsMapping } from './enums';
import { TAccordionItem } from './subcomponents/AccordionItem/types';

export type TIcon = `${iconsMapping}`

export interface IAccordionProps {
  items: TAccordionItem[];
  startIcon?: TIcon | null;
  endIcon?: TIcon | null;
  size?: sizesMapping;
  variant?: variantsMapping;
  className?: string;
  multipleExpanded?: boolean;
  disabled?: boolean;
}
"
Types for component Alert types.ts,"import { PropsWithChildren, ReactNode } from 'react';

import { EAlertSeverity } from './enums';

/**
 * Интерфейс свойств компонента Alert.
 * @interface
 * @extends {PropsWithChildren<{}>}
 */
export interface IAlertProps extends PropsWithChildren {
  /** Заголовок сообщения Alert. */
  title: string;
  /** Тип сообщения Alert. */
  severity?: `${EAlertSeverity}`;
  /** Дополнительные CSS классы. */
  className?: string;
  /** Дополнительный элемент действия. */
  action?: ReactNode;
  /** Функция обратного вызова для закрытия Alert. */
  close?: () => void;
}


/**
 * Тип для определения цветов иконок в зависимости от типа сообщения.
 * @typedef {Object.<EAlertSeverity, string>} IIconSeverityColor
 */
export type IIconSeverityColor = Record<EAlertSeverity, string>;
"
Types for component Alert _stories argsTypes.ts,"import { EAlertSeverity } from '../enums';

export const argsTypes = {
  title: {
    description: 'Заголовок компонента',
    control: { type: 'text' }
  },
  severity: {
    description: `Тип сообщения, влияющий на его фоновый цвет - <b>${Object.values(EAlertSeverity).join(' | ')}</b>`,
    table: {
      defaultValue: {
        summary: EAlertSeverity.success
      },
      type: {
        summary: 'string'
      }
    },
    options: Object.values(EAlertSeverity),
    control: { type: 'select' }
  },
  close: {
    description: 'Свойство добавления действия для закрытия компонента',
    control: { type: 'boolean' }
  },
  action: {
    description: 'Свойство добавления компонента альтернативного действия',
    control: { type: 'text' }
  },
  className: {
    description: 'В компонент можно передать альтернативные стили',
    control: { type: 'string' }
  },
  props: {
    description: 'В компонент можно передавать event handling onClick, onMouseEnter, onMouseLeave и т.д.'
  },
  showChildren: {
    description: 'Показать дополнительный контент в виде списка',
    control: { type: 'boolean' }
  }
};

export default argsTypes;
"
Codes for component Alert _stories Stories.tsx,"import React, { useState } from 'react';

import Editor from '@components/_storybook/Stories/components/Editor';
import FigmaEmbed from '@components/_storybook/Stories/components/FigmaEmbed';
import Header from '@components/_storybook/Stories/components/Header';
import Properties from '@components/_storybook/Stories/components/Properties';
import Tests from '@components/_storybook/Stories/components/Tests';
import '@components/_storybook/Stories/styles.css';
import { Tabs } from '@components/index';

import styles from '@components/_storybook/Stories/Stories.module.scss';

import { argsTypes } from './argsTypes';

const Stories = (): JSX.Element => {
  const [activeTab, setActiveTab] = useState(0);

  return (
    <div className={styles.wrapper}>
      <Header
        title=""Alert""
        description=""Компонент Alert представляет собой компонент уведомления или предупреждения. Он используется для отображения важных сообщений пользователю с цветовой кодировкой в зависимости от уровня серьёзности ситуации. Поддерживает несколько вариантов отображения: стандартный, заполненный и с обведённым контуром.""
        isStable
        codeLink=""https://github.com/nlmk-group/ds-2.0/tree/main/src/components/AttachFiles""
        figmaLink=""https://www.figma.com/file/MSMqfqJrQNaqbLe4Ctkq7n/Design-System-2.0-NLMK-(beta)-(Community)?type=design&node-id=1036%3A9739&mode=design&t=awyt3Fzj1XS6th7v-1""
      />

      <div className={styles.tabs}>
        <Tabs>
          <Tabs.Tab label=""Разработчику"" active={0 === Number(activeTab)} onClick={() => setActiveTab(0)} />
          {/* <Tabs.Tab label=""Дизайнеру"" active={1 === Number(activeTab)} onClick={() => setActiveTab(1)} /> */}
          <Tabs.Tab label=""Тестирование"" active={2 === Number(activeTab)} onClick={() => setActiveTab(2)} />
        </Tabs>
      </div>

      {Number(activeTab) == 0 && (
        <>
          <Editor
            description=""Компонент Alert разработан в разных вариантах: успешным, с ошибкой, с предупреждением и в качестве информационного оповещения. Для собственных вариантов используйте className.""
            code={`import { Alert } from '@nlmk/ds-2.0';

export default  App = () =>(
  <>
    <Alert title=""Оповещение по умолчанию"" />
    <Alert severity=""error"" title=""Оповещение об ошибке"" />
    <Alert severity=""warning"" title=""Оповещение предупреждения"" />
    <Alert severity=""info"" title=""Информационное оповещение"" />
  </>
)`}
          />

          <Editor
            description=""Компонент Alert можно использовать с описанием, которое можно добавить к оповещению.""
            code={`import { Alert } from '@nlmk/ds-2.0';

export default  App = () =>(
  <>
  <Alert
    severity=""error""
    title=""Оповещение с контентом""
  >
    <p>Значимость этих проблем настолько очевидна, что дальнейшее развитие различных форм деятельности прекрасно подходит для реализации существующих финансовых и административных условий.</p>
  </Alert>
  </>
)`}
          />

          <Editor
            description=""Компонент Alert может быть добавлен с встроенной кнопкой закрытия""
            code={`
import { Alert } from '@nlmk/ds-2.0';

const App = () => (
  <Alert severity=""info""
    close={ () => alert('Я закрыл!') }
    title=""Оповещение с кнопкой закрытия""/>
)
export default App
`}
          />

          <Editor
            description=""Компонент Alert может быть добавлен с другими кнопками""
            code={`
import { Alert, Button, IconDeleteBinOutlined24 } from '@nlmk/ds-2.0';

const App = () => (
  <Alert severity=""info""
    action={
      <Button fill=""clear""
        iconButton={
          <IconDeleteBinOutlined24
            htmlColor='var(--ac-alert-info-text)' />
        }
        onClick={() => confirm('Подтвердите удаление!')} />
    }
    title=""Оповещение с кнопкой удаления"" />
)
export default App
`}
          />

          <Properties argsTypes={argsTypes} />
        </>
      )}
      {Number(activeTab) == 1 && (
        <FigmaEmbed url=""https://www.figma.com/file/MSMqfqJrQNaqbLe4Ctkq7n/Design-System-2.0-NLMK-(beta)-(Community)?type=design&node-id=1036%3A9739&mode=design&t=awyt3Fzj1XS6th7v-1"" />
      )}
      {Number(activeTab) == 2 && <Tests componentName=""Alert"" />}
    </div>
  );
};

export default Stories;
"
Types for component Alert enums.ts,"/**
 * Перечисление типов сообщений Alert.
 * @enum {string}
 */
export enum EAlertSeverity {
  /** Успешное сообщение */
  success = 'success',
  /** Сообщение об ошибке */
  error = 'error',
  /** Предупреждающее сообщение */
  warning = 'warning',
  /** Информационное сообщение */
  info = 'info'
}
"
Codes for component Alert index.tsx,"import React, { FC, ReactElement, ReactNode } from 'react';

import {
  Button,
  IconCloseOutlined16,
  Typography
} from '@components/index';
import { clsx } from 'clsx';

import { IAlertProps, IIconSeverityColor } from './types';

import styles from './Alert.module.scss';

import { EAlertSeverity } from './enums';
import { Icon } from '@components/Icon';

/**
 * Компонент Alert для отображения информационных сообщений различных типов.
 * @component
 * @param {Object} props - Свойства компонента Alert.
 * @param {string} props.title - Заголовок сообщения Alert.
 * @param {EAlertSeverity} [props.severity=EAlertSeverity.success] - Тип сообщения (успех, ошибка, предупреждение, информация).
 * @param {ReactNode} [props.children] - Дочерние элементы для отображения дополнительного содержимого.
 * @param {() => void} [props.close] - Функция обратного вызова для закрытия Alert.
 * @param {ReactNode} [props.action] - Дополнительный элемент действия.
 * @param {string} [props.className] - Дополнительные CSS классы.
 * @returns {ReactElement} Компонент Alert.
 */

const Alert: FC<IAlertProps> = ({
  title,
  severity = EAlertSeverity.success,
  children,
  close,
  action,
  className
}: {
  title: string;
  severity?: `${EAlertSeverity}`;
  children?: ReactNode;
  close?: () => void;
  action?: ReactNode;
  className?: string;
}): ReactElement => {
  const AlertIcon = () => {
    const severityStyles: IIconSeverityColor = {
      [EAlertSeverity.success]: 'var(--spectrum-green-60)',
      [EAlertSeverity.error]: 'var(--spectrum-red-60)',
      [EAlertSeverity.warning]: 'var(--spectrum-orange-60)',
      [EAlertSeverity.info]: 'var(--spectrum-sky-60)'
    };

    switch (severity) {
      case EAlertSeverity.success:
        return <Icon name=""IconSuccessOutlined24"" htmlColor={severityStyles[severity]} />;
      case EAlertSeverity.error:
        return <Icon name=""IconAttentionWarningAlertErrorOutlined24"" htmlColor={severityStyles[severity]} />;
      case EAlertSeverity.warning:
        return <Icon name=""IconAttentionWarningAlertErrorOutlined24"" htmlColor={severityStyles[severity]} />;
      case EAlertSeverity.info:
        return <Icon name=""IconInfoOutlined24"" htmlColor={severityStyles[severity]} />;
      default:
        return <Icon name=""IconSuccessOutlined24"" htmlColor={severityStyles[severity] || 'var(--spectrum-green-60)'} />;
    }
  };

  return (
    <div data-testid=""ALERT_WRAPPER"" className={clsx(styles.wrapper, styles[`wrapper-${severity}`], className)}>
      <div data-testid=""ALERT_TITLE"" className={styles.content}>
        <AlertIcon />
        <Typography variant=""Body2-Bold"">{title}</Typography>
        <div className={styles['action-wrapper']}>
          {action && action}
          {close && (
            <Button
              variant=""grey""
              fill=""clear""
              onClick={close}
              className={styles.close}
              size=""xs""
              iconButton={<IconCloseOutlined16 htmlColor=""var(--steel-80)"" />}
            />
          )}
        </div>
      </div>
      {children && (
        <div className={styles['content-description']}>
          <Typography variant=""Body2-Medium"">{children}</Typography>
        </div>
      )}
    </div>
  );
};

export default Alert;
"
Styles for component Alert Alert.module.scss,"@mixin standard-helper($bg, $color) {
  background: $bg;
  color: $color;
}

.wrapper {
  display: flex;
  border-radius: 4px;
  padding: 16px;
  min-height: 58px;
  max-width: 100%;
  gap: 8px;
  box-sizing: border-box;
  flex-direction: column;
  justify-content: center;

  &-success {
    @include standard-helper(
        var(--spectrum-green-10),
        var(--spectrum-green-60)
    );
  }

  &-error {
    @include standard-helper(
        var(--spectrum-red-10),
        var(--spectrum-red-60)
    );
  }

  &-warning {
    @include standard-helper(
        var(--spectrum-yellow-10),
        var(--spectrum-orange-60)
    );
  }

  &-info {
    @include standard-helper(
        var(--spectrum-sky-10),
        var(--spectrum-sky-60)
    );
  }
}

.content {
  display: flex;
  align-items: center;
  gap: 8px;
  max-width: 100%;
  word-wrap: break-word;
  white-space: pre-wrap;
  word-break: break-word;

  &-description {
    margin-left: 32px;
  }

  .action-wrapper {
    display: flex;
    gap: 8px;

    .close {
      height: 24px;
      width: 24px;

      &:hover {
        background-color: unset;
      }
    }
  }
}


"
Codes for component AttachFiles _stories Stories.tsx,"import React, { useState } from 'react';

import Editor from '@components/_storybook/Stories/components/Editor';
import FigmaEmbed from '@components/_storybook/Stories/components/FigmaEmbed';
import Header from '@components/_storybook/Stories/components/Header';
import Properties from '@components/_storybook/Stories/components/Properties';
import Tests from '@components/_storybook/Stories/components/Tests';
import '@components/_storybook/Stories/styles.css';
import { Tabs } from '@components/index';

import styles from '@components/_storybook/Stories/Stories.module.scss';

import argsTypes from './argsTypes';
import {
  FILE_NAME,
  FILES_ADD_FILE_BUTTON,
  FILES_DEFAULT,
  FILES_DESCRIPTION,
  FILES_WITH_CHECKBOXES,
  FILES_WITH_TITLE
} from './text';

const Stories = (): JSX.Element => {
  const [activeTab, setActiveTab] = useState(0);

  return (
    <div className={styles.wrapper}>
      <Header
        title=""AttachFiles""
        description=""Компонент, используемый для прикрепления файла. Компонент AttachFiles
          собирается из необходимого количества компонентов File.""
        isStable
        codeLink=""https://github.com/nlmk-group/ds-2.0/tree/master/tree/src/components/AttachFiles""
        figmaLink=""https://www.figma.com/file/MSMqfqJrQNaqbLe4Ctkq7n/Design-System-2.0-NLMK-(beta)-(Community)?type=design&node-id=1036%3A20840&mode=design&t=awyt3Fzj1XS6th7v-1""
      />

      <div className={styles.tabs}>
        <Tabs>
          <Tabs.Tab label=""Разработчику"" active={0 === Number(activeTab)} onClick={() => setActiveTab(0)} />
          {/* <Tabs.Tab label=""Дизайнеру"" active={1 === Number(activeTab)} onClick={() => setActiveTab(1)} /> */}
          <Tabs.Tab label=""Тестирование"" active={2 === Number(activeTab)} onClick={() => setActiveTab(2)} />
        </Tabs>
      </div>

      {Number(activeTab) == 0 && (
        <>
          <Editor
            description=""Компонент файла, представляет собой иконку с названием файла.""
            code={`import { File } from '@nlmk/ds-2.0';

export default  App = () => (
  <>
    <File label=""${FILES_DEFAULT}"" />
  </>
)
            `}
          />

          <Editor
            description=""Компонент файл может содержать дополнительное описание. Дополнительное описание передается при помощи параметра description.""
            code={`import { File } from '@nlmk/ds-2.0';

export default  App = () => (
  <>
    <File
      description=""${FILES_DESCRIPTION}""
      label=""${FILE_NAME}""
    />
  </>
)
            `}
          />

          <Editor
            description=""В компоненте файла слева может быть использована иконка файла (по умолчанию), чекбокс (свойство: checked), иконка IconTick24 (свойство: tick) или же не быть ничего.""
            code={`import { File } from '@nlmk/ds-2.0';

export default  App = () => (
  <>
    <File label=""${FILE_NAME}"" />
    <File label=""${FILE_NAME}"" checked />
    <File label=""${FILE_NAME}"" tick />
    <File label=""${FILE_NAME}"" empty />
  </>
)
            `}
          />

          <Editor
            description=""В компоненте файла справа находится блок управления: до трех кнопок (удалить, загрузить, комментировать) или одна кнопка добавления файла. Добавление кнопок осуществляется при помощи свойств: removed - кнопка удаления, saved - кнопка загрузки, commented - комментировать, addFile - добавить файлы. Для каждой кнопки существует соответствующий ей обработчик события onClick: removedOnClick, savedOnClick, commentedOnClick, addFileOnClick.""
            code={`import { File } from '@nlmk/ds-2.0';

export default  App = () => (
  <div style={{ width: '600px' }}>
    <File
      label=""${FILE_NAME}""
      removed
    />
    <File
      commented
      label=""${FILE_NAME}""
    />
    <File
      label=""${FILE_NAME}""
      saved
    />
    <File
      commented
      label=""${FILE_NAME}""
      removed
    />
    <File
      commented
      label=""${FILE_NAME}""
      saved
    />
    <File
      label=""${FILE_NAME}""
      removed
      saved
    />
    <File
      commented
      label=""${FILE_NAME}""
      removed
      saved
    />
    <File
      addFile
      label=""${FILE_NAME}""
    />
  </div>
)
            `}
          />

          <Editor
            description=""Компонент AttachFiles может быть без заголовка: несколько файлов, объединенных в один контейнер.""
            code={`import { AttachFiles, File } from '@nlmk/ds-2.0';

export default  App = () => (
  <div style={{ width: '600px' }}>
    <AttachFiles>
      <File
        commented
        label=""${FILE_NAME}""
        removed
        saved
      />
      <File
        addFile
        label=""${FILE_NAME}""
      />
    </AttachFiles>
  </div>
)
            `}
          />

          <Editor
            description=""Компонент AttachFiles может быть с заголовком. Для передачи заголовка используется свойство - title. В качестве заголовка используется компонент File в любой из возможных вариаций.""
            code={`import { AttachFiles, File } from '@nlmk/ds-2.0';

export default  App = () => (
  <>
    <AttachFiles title={<File label=""${FILES_WITH_TITLE}"" checked />}>
      <File label=""${FILE_NAME}"" />
      <File label=""${FILE_NAME}"" checked />
      <File label=""${FILE_NAME}"" tick />
      <File label=""${FILE_NAME}"" empty />
    </AttachFiles>
  </>
)
            `}
          />

          <Editor
            description={FILES_ADD_FILE_BUTTON}
            code={`import { AttachFiles, File } from '@nlmk/ds-2.0';

export default  App = () => (
  <div style={{ width: '600px' }}>
    <AttachFiles title={<File label=""${FILE_NAME}"" addFile />}>
      <File label=""${FILE_NAME}"" />
      <File label=""${FILE_NAME}"" checked />
      <File label=""${FILE_NAME}"" tick />
      <File label=""${FILE_NAME}"" empty />
    </AttachFiles>
  </div>
)
            `}
          />

          <Editor
            description={FILES_WITH_CHECKBOXES}
            code={`import { AttachFiles, File } from '@nlmk/ds-2.0';

export default  App = () => (
  <div style={{ width: '600px' }}>
    <AttachFiles
      title={
        <File
          label=""${FILES_WITH_CHECKBOXES}""
          checked
          indeterminate={true}
        />
      }
    >
      <File
        label=""${FILE_NAME}""
        checked
        removed
      />
      <File
        label=""${FILE_NAME}""
        checked
        removed
      />
    </AttachFiles>
  </div>
)
            `}
          />

          <Properties argsTypes={argsTypes} />
        </>
      )}
      {Number(activeTab) == 1 && (
        <FigmaEmbed url=""https://www.figma.com/file/MSMqfqJrQNaqbLe4Ctkq7n/Design-System-2.0-NLMK-(beta)-(Community)?type=design&node-id=1036%3A20840&mode=design&t=awyt3Fzj1XS6th7v-1"" />
      )}
      {Number(activeTab) == 2 && <Tests componentName=""AttachFiles"" />}
    </div>
  );
};

export default Stories;
"
Styles for component AttachFiles AttachFiles.module.scss,".list-center {
  display: flex;
  flex-direction: column;
  border: var(--1-border) solid var(--divider-divider);
  border-radius: var(--4-radius);
}

.vertical-wrapper {
  display: flex;
  flex-direction: column;
  gap: var(--8-space);
}

.wrapper {
  background: var(--steel-20);
}

.list-with-title {
  padding: 0 var(--16-space) var(--16-space) var(--32-space);
}
"
Types for component AttachFiles subcomponents File types.ts,"import { ChangeEvent } from 'react';

export interface IFile {
  title?: string;
  label?: string;
  checked?: boolean;
  removed?: boolean;
  commented?: boolean;
  saved?: boolean;
  addFile?: boolean;
  onCheckedChange?: (event: ChangeEvent<HTMLInputElement>) => void;
  removedOnClick?: () => void;
  commentedOnClick?: () => void;
  savedOnClick?: () => void;
  addFileOnClick?: () => void;
  description?: string;
  empty?: boolean;
  checkedValue?: boolean;
  indeterminate?: boolean;
  tick?: boolean;
  className?: string;
}
"
Codes for component AttachFiles index.tsx,"import React, { FC } from 'react';
import clsx from 'clsx';
import { IAttachFiles } from './types';
import styles from './AttachFiles.module.scss';

const AttachFiles: FC<IAttachFiles> = ({
  title,
  children,
  className
}) => {
  return (
    <div className={clsx(styles['list-center'], className)} data-testid=""ATTACHFILES_WRAPPER"">
      <div data-testid=""ATTACHFILES_TITLE"">
        {title}
      </div>
      <div className={clsx(title && styles['list-with-title'])} data-testid=""ATTACHFILES_LIST"">
        {children}
      </div>
    </div>
  );
};

export default AttachFiles;
"
Types for component AttachFiles types.ts,"import { ReactElement, ReactNode } from 'react';
import { IFile } from './subcomponents/File/types'

export interface IAttachFiles {
  className?: string;
  title?: ReactElement<IFile, any>;
  children?: ReactNode[] | ReactNode;
}
"
Types for component AttachFiles _stories text.ts,"export const FILES_DEFAULT = 'File (по умолчанию)';
export const FILES_LONG_LABEL = 'File (длинный лэйбл)';
export const FILES_DESCRIPTION = 'File (с описанием)';
export const FILES_LEFT_ICON = 'File (вариации левой иконки)';
export const FILES_CONTROL = 'File (с контролами)';
export const FILES_WITHOUT_TITLE = 'AttachFiles (без заголовка)';
export const FILES_WITH_TITLE = 'AttachFiles (с заголовком)';
export const FILES_LIST = 'AttachFiles (со списком)';
export const FILES_ADD_FILE_BUTTON = 'AttachFiles (с кнопкой добавления файла)';
export const FILES_WITH_CHECKBOXES = 'AttachFiles (с чекбоксами)';
export const FILE_NAME = 'Название файла.pdf';
export const LONG_LABEL = 'Sed eget erat enim. Donec elementum nibh lobortis mattis commodo. Duis viverra tortor nibh, vitae pellentesque nunc ultrices id. Morbi est turpis, sagittis eget metus pellentesque, vestibulum blandit nulla. In nec sem at enim feugiat dictum sed lacinia elit. Ut ultrices vulputate commodo. Integer ex dolor, dictum nec elit sit amet, sollicitudin congue lorem. Aenean rutrum erat nec nunc viverra, eget aliquet odio dictum. Nam mattis vehicula augue, id tincidunt urna placerat vitae. Etiam tempor aliquet ligula quis consectetur. Maecenas eget felis vitae massa placerat molestie et sit amet lorem. Sed scelerisque lorem urna, in feugiat neque laoreet ac. Aliquam et sagittis justo. Nam sollicitudin ac ipsum imperdiet semper.';
"
Types for component AttachFiles _stories argsTypes.ts,"export const argsTypes = {
  children: {
    description:
      'Свойство компонента AttachFiles, которое позволяет передавать массив компонентов File (JSX.Element[]) для отображения в контейнере',
    control: { type: 'text' }
  },
  title: {
    description: 'Свойство для отображения заголовка компонента AttachFile(JSX.Element)',
    control: { type: 'text' }
  },
  label: {
    description: 'Название файла',
    control: { type: 'text' }
  },
  checked: {
    description: 'Условие отображения чекбокса',
    control: { type: 'boolean' }
  },
  removed: {
    description: 'Условие отображения кнопки удаления',
    control: { type: 'boolean' }
  },
  commented: {
    description: 'Условие отображения кнопки комментирования',
    control: { type: 'boolean' }
  },
  saved: {
    description: 'Условие отображения кнопки сохранения документа',
    control: { type: 'boolean' }
  },
  addFile: {
    description: 'Условие отображения кнопки ""Добавить файл""',
    control: { type: 'boolean' }
  },
  removedOnClick: {
    description: 'Callback, который будет вызван при нажатии на кнопку удаления',
    onClick: { action: 'clicked' }
  },
  commentedOnClick: {
    description: 'Callback, который будет вызван при нажатии на кнопку комментировать'
  },
  savedOnClick: {
    description: 'Callback, который будет вызван при нажатии на кнопку сохранения'
  },
  addFileOnClick: {
    description: 'Callback, который будет вызван при нажатии на ""Добавить файл""'
  },
  description: {
    description: 'Дополнительное описание',
    control: { type: 'text' }
  },
  empty: {
    description: 'Условие, позволяющее не отображать никакой иконки слева',
    control: { type: 'boolean' }
  },
  checkedValue: {
    description: 'Состояние checkbox слева',
    control: { type: 'boolean' }
  },
  onCheckedChange: {
    description: 'Callback, который будет вызван при изменении состояния чекбокса'
  },
  indeterminate: {
    description: 'Свойство, позволяющее включить промежуточное состояние чекбокса'
  },
  tick: {
    description: 'Условие отображения IconTick24 слева',
    control: { type: 'boolean' }
  }
};

export default argsTypes;
"
Styles for component Avatar subcomponents BadgeSpecialOverlay BadgeSpecialOverlay.module.scss,".badge-special-overlay {
  width: 100%;
  height: 100%;
}
"
Types for component Avatar _stories argsTypes.ts,"import { EAvatarSize } from '../enums';

export const argsTypes = {
  size: {
    description: 'Размер аватара',
    table: {
      defaultValue: {
        summary: EAvatarSize.m
      },
      type: {
        summary: 'string'
      }
    },
    options: Object.values(EAvatarSize),
    control: { type: 'select' }
  },
  imageSrc: {
    description: 'URL-адрес изображения пользователя',
    table: {
      defaultValue: {
        summary: 'undefined'
      },
      type: {
        summary: 'string'
      }
    },
    control: { type: 'string' }
  },
  userName: {
    description: 'Имя пользователя (необходимо для формирования его инициалов)',
    table: {
      defaultValue: {
        summary: 'undefined'
      },
      type: {
        summary: 'string'
      }
    },
    control: { type: 'string' }
  },
  userSurname: {
    description: 'Фамилия пользователя (необходимо для формирования его инициалов)',
    table: {
      defaultValue: {
        summary: 'undefined'
      },
      type: {
        summary: 'string'
      }
    },
    control: { type: 'string' }
  },
  online: {
    description: 'Индикатор онлайн статуса. ',
    table: {
      defaultValue: {
        summary: 'undefined'
      },
      type: {
        summary: 'boolean'
      }
    },
    control: { type: 'boolean' }
  },
  numberIndicator: {
    description: 'Индикатор количества',
    table: {
      defaultValue: {
        summary: 'undefined'
      },
      type: {
        summary: 'number'
      }
    },
    control: { type: 'number' }
  },
  badgeIconName: {
    description: 'Компонент иконки, которая будет внутри баджа',
    table: {
      defaultValue: {
        summary: 'undefined'
      },
      type: {
        summary: 'string'
      }
    },
    control: { type: 'boolean' }
  },
  badgeSpecialIcon: {
    description: 'Опциональный флаг, для отображения специальных иконок',
    table: {
      defaultValue: {
        summary: 'false'
      },
      type: {
        summary: 'boolean'
      }
    },
    control: { type: 'boolean' }
  }
};
"
Codes for component Avatar subcomponents IconCameraAvatar IconCameraAvatar.tsx,"import React, { FC } from 'react';

import clsx from 'clsx';

import styles from '../../../Icon/IconsDirectory/IconsDirectory.module.scss';

import { IIconsProps } from '../../../Icon/types';

const IconCameraAvatar: FC<IIconsProps> = ({ color = 'inherit', htmlColor }) => {
  const classes = clsx(styles[color as keyof typeof styles]);
  return (
    <svg xmlns=""http://www.w3.org/2000/svg"" width=""40"" height=""36"" fill=""none"" viewBox=""0 0 40 36"" className={classes}>
      <path fill=""#fff"" d=""M20 14c-3.252 0-6 2.748-6 6s2.748 6 6 6 6-2.748 6-6-2.748-6-6-6Z"" />
      <path
        fill={htmlColor || 'currentColor'}
        d=""M36 6h-5.172L25.414.586A2 2 0 0 0 24 0h-8a2 2 0 0 0-1.414.586L9.172 6H4c-2.206 0-4 1.794-4 4v22c0 2.206 1.794 4 4 4h32c2.206 0 4-1.794 4-4V10c0-2.206-1.794-4-4-4ZM20 30c-5.42 0-10-4.58-10-10s4.58-10 10-10 10 4.58 10 10-4.58 10-10 10Z""
      />
    </svg>
  );
};

export default IconCameraAvatar;
"
Codes for component Avatar index.tsx,"import React, { SyntheticEvent, useCallback, useMemo, useState } from 'react';

import Icon from '@components/Icon';
import { IconBirthday16, IconDoneCheckFilled16, IconDoneCheckFilled32 } from '@components/Icon/IconsDirectory';
import IconBirthday32 from '@components/Icon/IconsDirectory/NLMKONE/Birthday/32';
import { IconPersonFilled110 } from '@components/Icon/IconsDirectory/System/PersonFilled';
import Typography from '@components/Typography';
import clsx from 'clsx';

import { IAvatarComponent } from './types';

import styles from './Avatar.module.scss';

import { AVATAR_SIZE_PARAMETERS } from './constants';
import { EAvatarSize } from './enums';
import { IconBadge } from './subcomponents/IconBadge';
import IconCameraAvatar from './subcomponents/IconCameraAvatar/IconCameraAvatar';
import { getSizingStyles } from './utils';

/**
 * Компонент Avatar отрисовывает аватар пользователя с дополнительными элементами, такими как онлайновый индикатор, бейдж и т.д.
 *
 * @param {object} props - Свойства компонента.
 * @param {EAvatarSize} [props.size=EAvatarSize.m] - Размер аватара.
 * @param {string} [props.imageSrc] - URL-адрес изображения аватара.
 * @param {string} [props.userName] - Имя пользователя.
 * @param {string} [props.userSurname] - Фамилия пользователя.
 * @param {boolean} [props.online] - Статус пользователя онлайн.
 * @param {string} [props.badgeIconName] - Имя иконки бейджа для отображения.
 * @param {boolean} [props.badgeSpecialIcon=false] - Флаг, указывающий, является ли иконка бейджа специальной.
 * @param {number} [props.numberIndicator] - Числовой индикатор для отображения.
 * @param {string} [props.className] - Дополнительный CSS-класс для аватара.
 * @returns {JSX.Element} - Компонент Avatar.
 */

const Avatar: IAvatarComponent = ({
  size = EAvatarSize.m,
  imageSrc,
  userName,
  userSurname,
  online,
  badgeIconName,
  badgeSpecialIcon = false,
  numberIndicator,
  className
}) => {
  const hasNumberIndicator = typeof numberIndicator === 'number';
  const shouldShowOnlineIndicator = !hasNumberIndicator && typeof online === 'boolean';
  const sizeParameters = AVATAR_SIZE_PARAMETERS[size];
  const { iconSize, lettersVariant } = sizeParameters;

  const [imageIsAvailable, setImageIsAvailable] = useState<boolean>(Boolean(imageSrc));
  const firstLetter = userName?.charAt(0);
  const secondLetter = userSurname?.charAt(0);
  const shouldShowLetters = !imageIsAvailable && firstLetter && secondLetter;
  const shouldShowIcon = !imageIsAvailable && !shouldShowLetters;

  const { avatarStyles, lettersStyles, onlineIndicatorStyles, numberIndicatorStyles, badgeStyles } = useMemo(
    () =>
      getSizingStyles({
        sizeParameters,
        isSpecialBadge: badgeSpecialIcon,
        sizeVariant: size
      }),
    [size, badgeSpecialIcon, sizeParameters]
  );

  const iconMappings = {
    [EAvatarSize.xxxl]: badgeSpecialIcon ? (
      <IconBirthday32 htmlColor=""var(--unique-white)"" />
    ) : (
      <IconDoneCheckFilled32 htmlColor=""var(--unique-white)"" />
    ),
    [EAvatarSize.xxl]: badgeSpecialIcon ? (
      <IconBirthday16 htmlColor=""var(--unique-white)"" />
    ) : (
      <IconDoneCheckFilled16 htmlColor=""var(--unique-white)"" />
    ),
    [EAvatarSize.xl]: badgeSpecialIcon ? (
      <IconBirthday16 htmlColor=""var(--unique-white)"" />
    ) : (
      <IconDoneCheckFilled16 htmlColor=""var(--unique-white)"" />
    ),
    [EAvatarSize.l]: badgeSpecialIcon ? (
      <IconBirthday16 htmlColor=""var(--unique-white)"" />
    ) : (
      <IconDoneCheckFilled16 htmlColor=""var(--unique-white)"" />
    ),
    [EAvatarSize.m]: badgeSpecialIcon ? (
      <IconBirthday16 htmlColor=""var(--unique-white)"" />
    ) : (
      <IconDoneCheckFilled16 htmlColor=""var(--unique-white)"" />
    ),
    [EAvatarSize.s]: badgeSpecialIcon ? (
      <IconBirthday16 htmlColor=""var(--unique-white)"" />
    ) : (
      <IconDoneCheckFilled16 htmlColor=""var(--unique-white)"" />
    )
  };

  const renderedBadgeIconName = iconMappings[size];
  const isXxxlWithBirthdayIcon = badgeSpecialIcon && size === EAvatarSize.xxxl;

  const onLoadImageError = useCallback((e: SyntheticEvent) => {
    (e.target as HTMLImageElement).style.display = 'none';
    setImageIsAvailable(false);
  }, []);

  return (
    <div
      className={clsx(styles.avatar, styles[size], styles.circle, className, {
        [styles.xxxl]: size === EAvatarSize.xxxl
      })}
      style={avatarStyles}
      data-testid=""AVATAR""
    >
      {size === EAvatarSize.xxxl && (
        <div className={styles.overlay}>
          <div style={{ opacity: '100%' }}>
            <IconCameraAvatar htmlColor=""var(--unique-white)"" />
          </div>
        </div>
      )}
      {imageIsAvailable && (
        <img
          src={imageSrc}
          className={styles.image}
          data-testid=""AVATAR_IMAGE""
          alt=""avatar image""
          onError={onLoadImageError}
        />
      )}

      {shouldShowLetters && (
        <div className={styles.letters} style={lettersStyles}>
          <Typography variant={lettersVariant} data-testid=""AVATAR_LETTERS"">
            {firstLetter}
            {secondLetter}
          </Typography>
        </div>
      )}

      {shouldShowIcon && (
        <div className={styles['user-icon']} data-testid=""AVATAR_ICON"">
          {size === EAvatarSize.xxxl ? (
            <IconPersonFilled110 htmlColor=""var(--unique-white)"" />
          ) : (
            <Icon name=""IconPersonFilled32"" containerSize={iconSize} htmlColor=""var(--unique-white)"" />
          )}
        </div>
      )}

      {shouldShowOnlineIndicator && (
        <div
          className={clsx(styles['online-indicator'], styles[online ? 'online' : 'offline'])}
          style={onlineIndicatorStyles}
          data-testid=""AVATAR_INDICATOR_ONLINE""
        />
      )}

      {hasNumberIndicator && (
        <div className={styles['number-indicator']} style={numberIndicatorStyles} data-testid=""AVATAR_INDICATOR_NUMBER"">
          <Typography variant={size === EAvatarSize.xxxl ? 'Body-Bold' : 'Caption-Bold'}>{numberIndicator}</Typography>
        </div>
      )}

      {badgeIconName && (
        <div className={styles.badge} style={badgeStyles}>
          <IconBadge
            iconName={renderedBadgeIconName}
            badgeSpecialIcon={badgeSpecialIcon}
            isXxxlWithBirthdayIcon={isXxxlWithBirthdayIcon}
          />
        </div>
      )}
    </div>
  );
};

Avatar.componentType = 'Avatar';

export default Avatar;
"
Styles for component Icon IconsDirectory IconsDirectory.module.scss,".action {
  color: var(--action-active);

  path {
    fill: var(--action-active);
  }
}

.disabled {
  color: var(--action-disabled);

  path {
    fill: var(--action-disabled);
  }
}

.error {
  color: var(--spectrum-red-60);

  path {
    fill: var(--spectrum-red-60);
  }
}

.primary {
  color: var(--brand-sapphire-60);

  path {
    fill: var(--brand-sapphire-60);
  }
}

.secondary {
  color: var(--primary-blue-100);

  path {
    fill: var(--primary-blue-100);
  }
}

.inherit {
  color: inherit;
}

.success {
  color: var(--spectrum-green-60);

  path {
    fill: var(--spectrum-green-60);
  }
}

.warning {
  color: var(--spectrum-yellow-60);

  path {
    fill: var(--spectrum-yellow-60);
  }
}

.mask {
  mask: url(#masked);
  mask-type: alpha;
}
"
Types for component Avatar utils.ts,"import { CSSProperties } from 'react';

import { TGetSizingStylesArgs, TSizingStyles } from './types';

import { EAvatarSize } from './enums';

export const getSizingStyles = ({
  sizeParameters,
  isSpecialBadge,
  sizeVariant
}: TGetSizingStylesArgs): TSizingStyles => {
  const {
    avatarSize,
    lettersSize,
    numberIndicatorSize,
    onlineIndicatorSize,
    badgeNumbersSize,
    badgeSize,
    specialBadgeSize,
    badgeTranslate
  } = sizeParameters;
  const getAvatarStyle = (): CSSProperties => {
    const style: CSSProperties = {
      width: `var(--${avatarSize}-size)`,
      height: `var(--${avatarSize}-size)`
    };
    if (sizeVariant === EAvatarSize.xxxl) {
      style.width = '220px';
      style.height = '220px';
    }

    return style;
  };

  const getLettersStyle = (): CSSProperties => {
    return { fontSize: `var(--${lettersSize}-size)` };
  };

  const getNumberIndicatorStyle = (): CSSProperties => {
    const style: CSSProperties = {
      minWidth: `var(--${numberIndicatorSize}-size)`,
      height: `var(--${numberIndicatorSize}-size)`,
      fontSize: `var(--${badgeNumbersSize}-size)`,
      lineHeight: `var(--${badgeNumbersSize}-size)`,
      transform: 'translate(20%, 20%)'
    };
    if (sizeVariant === EAvatarSize.xxxl) {
      style.display = 'none';
    }

    if (sizeVariant === EAvatarSize.xxl) {
      style.transform = 'translate(10%, 10%)';
    }
    if (sizeVariant === EAvatarSize.xl) {
      style.transform = 'translate(10%, 10%)';
    }
    if (sizeVariant === EAvatarSize.s || sizeVariant === EAvatarSize.m) {
      style.padding = '2px 4px';
    }
    if (sizeVariant === EAvatarSize.s) {
      style.transform = 'translate(-10%, -10%)';
    }
    if (sizeVariant === EAvatarSize.s) {
      style.transform = 'translate(0)';
    }

    return style;
  };

  const getOnlineIndicatorStyle = (): CSSProperties => {
    const style: CSSProperties = {
      width: `${onlineIndicatorSize}px`,
      height: `${onlineIndicatorSize}px`,
      transform: 'translate(0%, 0%)'
    };
    if (sizeVariant === EAvatarSize.xxxl) {
      style.transform = 'translate(-40%, -40%)';
    }
    if (sizeVariant === EAvatarSize.l) {
      style.transform = 'translate(10%, 10%)';
    }
    if (sizeVariant === EAvatarSize.m) {
      style.transform = 'translate(30%, 30%)';
    }
    if (sizeVariant === EAvatarSize.s) {
      style.transform = 'translate(30%, 30%)';
    }
    return style;
  };

  const getBadgeStyles = (): CSSProperties => {
    const [x, y] = badgeTranslate;

    if (isSpecialBadge) {
      const size = specialBadgeSize;
      const style: CSSProperties = {
        width: `${size}px`,
        height: `${size}px`,
        transform: `translate(${x}%, ${y}%)`
      };
      if (sizeVariant === EAvatarSize.xxxl) {
        style.transform = 'translate(5%, 0%)';
      }
      if (sizeVariant === EAvatarSize.xxxl && !isSpecialBadge) {
        style.transform = 'translate(-15%, 20%)';
      }
      if (sizeVariant === EAvatarSize.m) {
        style.transform = 'translate(30%, -30%)';
      }

      return style;
    } else {
      const size = badgeSize;
      const style: CSSProperties = {
        width: `${size}px`,
        height: `${size}px`,
        transform: `translate(${x}%, ${y}%)`
      };
      if (sizeVariant === EAvatarSize.xxxl) {
        style.transform = 'translate(5%, 0%)';
      }
      if (sizeVariant === EAvatarSize.xxxl && !isSpecialBadge) {
        style.transform = 'translate(-15%, 20%)';
      }
      if (sizeVariant === EAvatarSize.m) {
        style.transform = 'translate(30%, -30%)';
      }

      return style;
    }
  };

  return {
    avatarStyles: getAvatarStyle(),
    lettersStyles: getLettersStyle(),
    numberIndicatorStyles: getNumberIndicatorStyle(),
    onlineIndicatorStyles: getOnlineIndicatorStyle(),
    badgeStyles: getBadgeStyles()
  };
};

export const getAvatarImageSrc = () => {
  const avatarImageMock = '/assets/avatar_mock.png';
  const { origin, pathname } = window.parent.location;
  const path = pathname === '/' ? '' : pathname;
  return `${origin}${path}${avatarImageMock}`;
};
"
Types for component Avatar constants.ts,"import { TAvatarSizeParameter } from './types';

import { EAvatarSize } from './enums';

export const AVATAR_SIZE_PARAMETERS: Record<EAvatarSize, TAvatarSizeParameter> = {
  [EAvatarSize.xxxl]: {
    avatarSize: 220,
    iconSize: 32,
    lettersVariant: 'Heading1',
    lettersSize: 48,
    onlineIndicatorSize: 32,
    badgeNumbersSize: 24,
    numberIndicatorSize: 32,
    badgeSize: 48,
    specialBadgeSize: 72,
    badgeTranslate: [21, -23]
  },
  [EAvatarSize.xxl]: {
    avatarSize: 64,
    iconSize: 32,
    lettersVariant: 'Subheading3-Medium',
    lettersSize: 20,
    onlineIndicatorSize: 16,
    badgeNumbersSize: 12,
    numberIndicatorSize: 24,
    badgeSize: 28,
    specialBadgeSize: 38,
    badgeTranslate: [21, -23]
  },
  [EAvatarSize.xl]: {
    avatarSize: 56,
    iconSize: 32,
    lettersVariant: 'Subheading3-Medium',
    lettersSize: 20,
    onlineIndicatorSize: 16,
    badgeNumbersSize: 12,
    numberIndicatorSize: 24,
    badgeSize: 28,
    specialBadgeSize: 38,
    badgeTranslate: [21, -23]
  },
  [EAvatarSize.l]: {
    avatarSize: 48,
    iconSize: 24,
    lettersVariant: 'Body-Medium',
    lettersSize: 18,
    onlineIndicatorSize: 16,
    badgeNumbersSize: 12,
    numberIndicatorSize: 24,
    badgeSize: 24,
    specialBadgeSize: 34,
    badgeTranslate: [21, -23]
  },
  [EAvatarSize.m]: {
    avatarSize: 40,
    iconSize: 24,
    lettersVariant: 'Body1-Medium',
    lettersSize: 16,
    onlineIndicatorSize: 16,
    badgeNumbersSize: 12,
    numberIndicatorSize: 16,
    badgeSize: 24,
    specialBadgeSize: 34,
    badgeTranslate: [21, -23]
  },
  [EAvatarSize.s]: {
    avatarSize: 32,
    iconSize: 16,
    lettersVariant: 'Body2-Medium',
    lettersSize: 14,
    onlineIndicatorSize: 16,
    badgeNumbersSize: 12,
    numberIndicatorSize: 16,
    badgeSize: 24,
    specialBadgeSize: 34,
    badgeTranslate: [45, -38]
  }
};
"
Codes for component Avatar subcomponents BadgeSpecialOverlay index.tsx,"import React, { FC } from 'react';

import clsx from 'clsx';

import { TProps } from './types';

import styles from './BadgeSpecialOverlay.module.scss';

const BadgeSpecialOverlay: FC<TProps> = ({ className }) => {
  return (
    <svg
      xmlns=""http://www.w3.org/2000/svg""
      viewBox=""0 0 34 34""
      fill=""none""
      className={clsx(styles['badge-special-overlay'], className)}
    >
      <g filter=""url(#filter0_dd_662_1961)"">
        <path
          d=""M17 5L18.4642 5.75524L20.0902 5.48944L21.2494 6.66018L22.8779 6.90983L23.6185 8.38148L25.0902 9.12215L25.3398 10.7506L26.5106 11.9098L26.2448 13.5358L27 15L26.2448 16.4642L26.5106 18.0902L25.3398 19.2494L25.0902 20.8779L23.6185 21.6185L22.8779 23.0902L21.2494 23.3398L20.0902 24.5106L18.4642 24.2448L17 25L15.5358 24.2448L13.9098 24.5106L12.7506 23.3398L11.1221 23.0902L10.3815 21.6185L8.90983 20.8779L8.66018 19.2494L7.48944 18.0902L7.75524 16.4642L7 15L7.75524 13.5358L7.48944 11.9098L8.66018 10.7506L8.90983 9.12215L10.3815 8.38148L11.1221 6.90983L12.7506 6.66018L13.9098 5.48944L15.5358 5.75524L17 5Z""
          fill=""var(--spectrum-violet-60)""
        />
        <path
          d=""M17.2292 4.55563L17 4.43741L16.7708 4.55563L15.4534 5.23513L13.9905 4.99599L13.736 4.95438L13.5545 5.13764L12.5116 6.19099L11.0464 6.4156L10.7915 6.45468L10.6755 6.68505L10.0091 8.00913L8.68505 8.67552L8.45468 8.79146L8.4156 9.04638L8.19099 10.5116L7.13764 11.5545L6.95438 11.736L6.99599 11.9905L7.23513 13.4534L6.55563 14.7708L6.43741 15L6.55563 15.2292L7.23513 16.5466L6.99599 18.0095L6.95438 18.264L7.13764 18.4455L8.19099 19.4884L8.4156 20.9536L8.45468 21.2085L8.68505 21.3245L10.0091 21.9909L10.6755 23.315L10.7915 23.5453L11.0464 23.5844L12.5116 23.809L13.5545 24.8624L13.736 25.0456L13.9905 25.004L15.4534 24.7649L16.7708 25.4444L17 25.5626L17.2292 25.4444L18.5466 24.7649L20.0095 25.004L20.264 25.0456L20.4455 24.8624L21.4884 23.809L22.9536 23.5844L23.2085 23.5453L23.3245 23.315L23.9909 21.9909L25.315 21.3245L25.5453 21.2085L25.5844 20.9536L25.809 19.4884L26.8624 18.4455L27.0456 18.264L27.004 18.0095L26.7649 16.5466L27.4444 15.2292L27.5626 15L27.4444 14.7708L26.7649 13.4534L27.004 11.9905L27.0456 11.736L26.8624 11.5545L25.809 10.5116L25.5844 9.04638L25.5453 8.79146L25.315 8.67552L23.9909 8.00913L23.3245 6.68505L23.2085 6.45468L22.9536 6.4156L21.4884 6.19099L20.4455 5.13764L20.264 4.95438L20.0095 4.99599L18.5466 5.23513L17.2292 4.55563Z""
          stroke=""var(--ac-avatar-badges-stroke-birthdays-violet)""
        />
      </g>
      <defs>
        <filter
          id=""filter0_dd_662_1961""
          x=""0.874756""
          y=""0.874756""
          filterUnits=""userSpaceOnUse""
          colorInterpolationFilters=""sRGB""
        >
          <feFlood floodOpacity=""0"" result=""BackgroundImageFix"" />
          <feColorMatrix
            in=""SourceAlpha""
            type=""matrix""
            values=""0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0""
            result=""hardAlpha""
          />
          <feOffset dy=""2"" />
          <feGaussianBlur stdDeviation=""2.5"" />
          <feComposite in2=""hardAlpha"" operator=""out"" />
          <feColorMatrix type=""matrix"" values=""0 0 0 0 0.403922 0 0 0 0 0.431373 0 0 0 0 0.462745 0 0 0 0.08 0"" />
          <feBlend mode=""normal"" in2=""BackgroundImageFix"" result=""effect1_dropShadow_662_1961"" />
          <feColorMatrix
            in=""SourceAlpha""
            type=""matrix""
            values=""0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0""
            result=""hardAlpha""
          />
          <feOffset dy=""1"" />
          <feGaussianBlur stdDeviation=""0.5"" />
          <feComposite in2=""hardAlpha"" operator=""out"" />
          <feColorMatrix type=""matrix"" values=""0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.12 0"" />
          <feBlend mode=""normal"" in2=""effect1_dropShadow_662_1961"" result=""effect2_dropShadow_662_1961"" />
          <feBlend mode=""normal"" in=""SourceGraphic"" in2=""effect2_dropShadow_662_1961"" result=""shape"" />
        </filter>
      </defs>
    </svg>
  );
};

export default BadgeSpecialOverlay;
"
Codes for component Avatar subcomponents IconBadge index.tsx,"import React from 'react';

import clsx from 'clsx';

import { IIconBadgeProps } from './types';

import styles from './IconBadge.module.scss';

import BadgeSpecialOverlay from '../BadgeSpecialOverlay';

interface IIconBadgePropsWithSize extends IIconBadgeProps {
  isXxxlWithBirthdayIcon?: boolean;
}

export const IconBadge: React.FC<IIconBadgePropsWithSize> = ({
  className,
  iconName,
  badgeSpecialIcon,
  isXxxlWithBirthdayIcon
}) => {
  if (badgeSpecialIcon) {
    return (
      <div className={clsx(styles['icon-badge'], styles['with-overlay'], className)} data-testid=""AVATAR_BADGE_SPECIAL"">
        <BadgeSpecialOverlay className={styles.overlay} />
        <div className={clsx(styles['special-icon'], isXxxlWithBirthdayIcon && styles['special-icon-xxxl'])}>
          {iconName}
        </div>
      </div>
    );
  }
  return (
    <div className={clsx(styles['icon-badge'], styles.default, className)} data-testid=""AVATAR_BADGE_DEFAULT"">
      {iconName}
    </div>
  );
};
"
Types for component Avatar subcomponents IconBadge types.ts,"import { ReactNode } from 'react';

export interface IIconBadgeProps {
  iconName: ReactNode;
  className?: string;
  badgeSpecialIcon: boolean;
}
"
Styles for component Avatar Avatar.module.scss,"$greyOpacity24: #97a4b73d;
$greyOpacity9: #97a4b716;
$blackOpacity12: rgba(0, 0, 0, 0.12);
$white: var(--never-changes-white);

@mixin rounded {
  border-radius: 50%;
}

@mixin flex-center {
  display: flex;
  align-items: center;
  justify-content: center;
}

.avatar {
  position: relative;
  background-color: var(--steel-50);
  color: var(--unique-white);

  &:hover {
    color: var(--unique-white);
    cursor: pointer;
  }

  &.circle {
    @include rounded;

    .image {
      @include rounded;
    }
  }
}

.user-icon {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  z-index: 999;
}

.online-indicator {
  @include rounded;
  position: absolute;
  right: 0;
  bottom: 0;
  box-shadow: 0 2px 5px rgba(103, 110, 118, 0.08), 0 1px 1px rgba(0, 0, 0, 0.12);
  z-index: 1001;
}
.number-indicator {
  @include rounded;
  position: absolute;
  left: 60%;
  top: 60%;
  box-shadow: 0 2px 5px rgba(103, 110, 118, 0.08), 0 1px 1px rgba(0, 0, 0, 0.12);
  z-index: 1001;
}

.online-indicator {
  width: 16px;
  height: 16px;

  &.online {
    background-color: var(--spectrum-green-50);
    border: 1px solid var(--unique-white);
  }
  &.offline {
    background-color: var(--steel-60);
    border: 1px solid var(--unique-white);
  }
}

.image {
  width: 100%;
  height: 100%;
  object-fit: cover;
  border-radius: 8px;
}
.overlay {
  @include rounded;
  position: absolute;
  display: flex;
  align-items: center;
  justify-content: center;
  background-color: var(--brand-sapphire-60);
  opacity: 0;
  color: var(--unique-white);
  cursor: pointer;
  z-index: 1000;

  &:hover {
    opacity: 1;
    background-color: color-mix(in srgb, var(--brand-sapphire-60) 70%, transparent);
  }
  width: 220px;
  height: 220px;
}
.avatar.xxxl:hover .letters {
  display: none;
}
.number-indicator {
  @include flex-center;
  cursor: default;
  box-sizing: border-box;
  border-radius: 100px;
  background-color: var(--brand-sapphire-50);
  color: var(--unique-white);
  text-align: center;
  border: 1px solid var(--unique-white);
  padding: 4px 8px;
}

.letters {
  @include flex-center;
  cursor: default;
  width: 100%;
  height: 100%;
}

.badge {
  position: absolute;
  top: 0;
  right: 0;
  z-index: 1001;
}
"
Styles for component Avatar subcomponents IconBadge IconBadge.module.scss,".icon-badge {
  width: 100%;
  height: 100%;
  display: flex;
  justify-content: center;
  align-items: center;
}

.default {
  background-color: var(--spectrum-green-50);
  border-radius: 50%;
  box-shadow: 0px 2px 5px 0px rgba(103, 110, 118, 0.08), 0px 1px 1px 0px rgba(0, 0, 0, 0.12);
  path {
    fill: var(--unique-white);
  }
}

.with-overlay {
  position: relative;
  width: 100%;
  height: 100%;

  .overlay {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    z-index: -1;
  }
}

.special-icon {
  transform: translateY(-1px);
}

.special-icon-xxxl {
  transform: translateY(-2px);
}
"
Types for component Avatar subcomponents BadgeSpecialOverlay types.ts,"export interface TProps {
  className?: string;
}
"
Codes for component Avatar _stories Stories.tsx,"import React, { useState } from 'react';

import Editor from '@components/_storybook/Stories/components/Editor';
import FigmaEmbed from '@components/_storybook/Stories/components/FigmaEmbed';
import Header from '@components/_storybook/Stories/components/Header';
import Properties from '@components/_storybook/Stories/components/Properties';
import Tests from '@components/_storybook/Stories/components/Tests';
import '@components/_storybook/Stories/styles.css';
import { Tabs } from '@components/index';

import styles from '@components/_storybook/Stories/Stories.module.scss';

import { getAvatarImageSrc } from '../utils';
import { argsTypes } from './argsTypes';

enum TabIds {
  dev,
  design,
  tests
}

const COMPONENT_NAME = 'Avatar';
const FIGMA_URL =
  'https://www.figma.com/file/MSMqfqJrQNaqbLe4Ctkq7n/Design-System-2.0-NLMK-(beta)-(Community)?type=design&node-id=1036%3A20841&mode=design&t=awyt3Fzj1XS6th7v-1';
const AVATAR_MOCK_SRC = getAvatarImageSrc();

const Stories = (): JSX.Element => {
  const [activeTab, setActiveTab] = useState<TabIds>(TabIds.dev);

  const isActive = (tab: TabIds) => {
    return activeTab === tab;
  };

  return (
    <div className={styles.wrapper}>
      <Header
        title={COMPONENT_NAME}
        description={`Компонент Avatar представляет собой пользовательский компонент, который отображает аватар пользователя. Этот аватар может быть изображением, инициалами пользователя, иконкой профиля, а также может включать индикаторы онлайн-статуса, числовой индикатор или иконку в виде значка (badge). Компонент также поддерживает различные размеры и формы для кастомизации внешнего вида аватара.`}
        isStable
        codeLink={`https://github.com/nlmk-group/ds-2.0/tree/main/src/components/${COMPONENT_NAME}`}
        figmaLink={FIGMA_URL}
      />

      <div className={styles.tabs}>
        <Tabs>
          <Tabs.Tab label=""Разработчику"" active={isActive(TabIds.dev)} onClick={() => setActiveTab(TabIds.dev)} />
          {/* <Tabs.Tab label=""Дизайнеру"" active={isActive(TabIds.design)} onClick={() => setActiveTab(TabIds.design)} /> */}
          <Tabs.Tab label=""Тестирование"" active={isActive(TabIds.tests)} onClick={() => setActiveTab(TabIds.tests)} />
        </Tabs>
      </div>

      {activeTab == TabIds.dev && (
        <>
          <Editor
            height={220}
            description=""Дефолтный аватар""
            code={`import { Avatar } from '@nlmk/ds-2.0';

const App = () => (
  <>
    <Avatar />
  </>
)
export default App
              `}
          />
          <Editor
            description=""Аватары различных размеров""
            code={`import { Avatar } from '@nlmk/ds-2.0';

export default App = () => (
  <>
    <Avatar src=""${AVATAR_MOCK_SRC}"" size=""xxl"" />
    <Avatar src=""${AVATAR_MOCK_SRC}"" size=""xl"" />
    <Avatar src=""${AVATAR_MOCK_SRC}"" size=""l"" />
    <Avatar src=""${AVATAR_MOCK_SRC}"" size=""m"" />
    <Avatar src=""${AVATAR_MOCK_SRC}"" size=""s"" />
  </>
)
              `}
          />
          <Editor
            description=""Типы аватаров: иконка, изображение, инициалы""
            code={`import { Avatar } from '@nlmk/ds-2.0';

export default App = () => (
  <>
    <Avatar />
    <Avatar src=""${AVATAR_MOCK_SRC}"" />
    <Avatar userName='Антон' userSurname='Валуев' />
  </>
)
              `}
          />
          <Editor
            description=""Формы аватаров: круг, скругленный квадрат""
            code={`import { Avatar } from '@nlmk/ds-2.0';

export default App = () => (
  <>
    <Avatar />
    <Avatar shape=""square"" />
  </>
)
              `}
          />
          <Editor
            description=""Индикаторы аватаров: онлайн, оффлайн, количество""
            code={`import { Avatar } from '@nlmk/ds-2.0';

export default App = () => (
  <>
    <Avatar online />
    <Avatar online={false} />
    <Avatar numberIndicator={8} />
  </>
)
              `}
          />
          <Editor
            description=""Бейджи аватаров: иконка, специальный бейдж (День Рождения)""
            code={`import { Avatar, IconDoneCheckFilled16, IconBirthday16 } from '@nlmk/ds-2.0';

export default App = () => (
  <>
    <Avatar badgeIconName={<IconDoneCheckFilled16 htmlColor=""white"" />} />
    <Avatar badgeIconName={<IconBirthday16 htmlColor=""white"" />} badgeSpecialIcon />
  </>
)
              `}
          />

          <Properties argsTypes={argsTypes} />
        </>
      )}
      {activeTab == TabIds.design && <FigmaEmbed url={FIGMA_URL} />}
      {activeTab == TabIds.tests && <Tests componentName={COMPONENT_NAME} />}
    </div>
  );
};

export default Stories;
"
Types for component Avatar types.ts,"import { CSSProperties, FC, ReactNode } from 'react';

import { TIconProps } from '@components/Icon/types';
import { ITypographyProps } from '@components/Typography/types';

import { EAvatarSize } from './enums';

export interface IAvatarProps {
  size?: `${EAvatarSize}`;
  imageSrc?: string;
  userName?: string;
  userSurname?: string;
  online?: boolean;
  badgeIconName?: ReactNode;
  badgeSpecialIcon?: boolean;
  numberIndicator?: number;
  className?: string;
}

export type TAvatarSizeParameter = {
  avatarSize: number;
  numberIndicatorSize: number;
  lettersSize: number;
  badgeNumbersSize: number;
  onlineIndicatorSize: number;
  badgeSize: number;
  specialBadgeSize: number;
  iconSize: TIconProps['containerSize'];
  lettersVariant: ITypographyProps['variant'];
  badgeTranslate: [number, number];
};

export type TSizingStyles = {
  avatarStyles: CSSProperties;
  lettersStyles: CSSProperties;
  numberIndicatorStyles: CSSProperties;
  onlineIndicatorStyles: CSSProperties;
  badgeStyles: CSSProperties;
};

export type TGetSizingStylesArgs = {
  sizeParameters: TAvatarSizeParameter;
  isSpecialBadge: boolean;
  sizeVariant: IAvatarProps['size'];
};

export interface IAvatarComponent extends FC<IAvatarProps> {
  componentType?: string;
}
"
Types for component Icon types.ts,"import { CSSProperties, FC, ReactNode } from 'react';

import { TIconName } from '@components/Icon/IconsDirectory/unionType';

export type IconColor =
  | 'action'
  | 'disabled'
  | 'error'
  | 'primary'
  | 'secondary'
  | 'inherit'
  | 'success'
  | 'warning'
  | 'default';

export type TContainerSize = 32 | 24 | 16;

export interface TIconProps {
  name: TIconName;
  color?: IconColor;
  htmlColor?: string;
  containerSize?: TContainerSize;
  className?: string;
  style?: CSSProperties;
  badge?: ReactNode;
}

export interface IIconsProps {
  color?: IconColor;
  htmlColor?: string;
}

export interface ISvgProps {
  className?: string;
  onClick?: (e: any) => void;
  active?: boolean;
}

export type TIconComponent = FC<IIconsProps>;

export type TIconsObject = {
  [size: string]: {
    [key in TIconName]?: TIconComponent;
  };
};
"
Types for component Avatar enums.ts,"export enum EAvatarSize {
  xxxl = '3xl',
  xxl = '2xl',
  xl = 'xl',
  l = 'l',
  m = 'm',
  s = 's'
}
"
Codes for component Badge index.tsx,"import React, { FC } from 'react';

import { variantsMapping } from '@components/declaration/enums';
import { Typography } from '@components/index';
import { ETypographyVariants } from '@components/Typography/enums';
import clsx from 'clsx';

import { IBadgeProps } from './types';

import styles from './Badge.module.scss';

import { EBadgeColors, EBadgeSizes } from './enums';

/**
 * Компонент Badge используется для отображения меток (badges), таких как лейблы, тэги, статусы и т.д. Обычно Badge используют внутри или в непосредственной близости от другого более крупного компонента интерфейса.
 * @component
 * @param {Object} props - Свойства компонента Badge.
 * @param {EBadgeColors} [props.color=EBadgeColors.primary] - Цвет бейджа.
 * @param {EBadgeSizes} [props.size=EBadgeSizes.m] - Размер бейджа.
 * @param {variantsMapping} [props.variant=variantsMapping.solid] - Вариант отображения бейджа.
 * @param {string|number} [props.children] - Контент бейджа.
 * @param {string} [props.className] - Дополнительный CSS класс.
 * @returns {JSX.Element} Компонент Badge.
 */

export const Badge: FC<IBadgeProps> = ({
  color = EBadgeColors.primary,
  size = EBadgeSizes.m,
  variant = variantsMapping.solid,
  children,
  className
}: {
  color?: `${EBadgeColors}`;
  size?: `${EBadgeSizes}`;
  variant?: `${variantsMapping}`;
  children?: string | number;
  className?: string;
}): JSX.Element => {
  const sizeClassesMapping: { [K in keyof typeof EBadgeSizes]?: string } = {
    s: styles.compact,
    l: styles.large,
    xs: styles.xs,
    m: undefined
  };

  const typographyVariants: Record<EBadgeSizes, ETypographyVariants> = {
    [EBadgeSizes.l]: ETypographyVariants['Body1-Bold'],
    [EBadgeSizes.m]: ETypographyVariants['Caption-Bold'],
    [EBadgeSizes.s]: ETypographyVariants['Caption-Bold'],
    [EBadgeSizes.xs]: ETypographyVariants['Additional-Bold']
  };

  const badgeClasses = clsx(
    styles.badge,
    styles[color],
    sizeClassesMapping[size],
    variant === 'outline' && styles[`outline-${color}`],
    className
  );

  return (
    <div className={badgeClasses} data-testid=""BADGE_WRAPPER"">
      <Typography variant={typographyVariants[size]}>{children}</Typography>
    </div>
  );
};

export default Badge;
"
Codes for component Badge _stories Stories.tsx,"import React, { useState } from 'react';

import Editor from '@components/_storybook/Stories/components/Editor';
import FigmaEmbed from '@components/_storybook/Stories/components/FigmaEmbed';
import Header from '@components/_storybook/Stories/components/Header';
import Properties from '@components/_storybook/Stories/components/Properties';
import Tests from '@components/_storybook/Stories/components/Tests';
import '@components/_storybook/Stories/styles.css';
import { Tabs } from '@components/index';

import styles from '@components/_storybook/Stories/Stories.module.scss';

import { argsTypes } from './argsTypes';

const FIGMA_LINK = 'https://www.figma.com/file/2bgeOS0URFNqFO1m1bnyvg/DS2.0-Buttons?type=design&node-id=116-31671&mode=design&t=hegxGpGd02Ims4tD-0';

const Stories = (): JSX.Element => {
  const [activeTab, setActiveTab] = useState(0);

  return (
    <div className={styles.wrapper}>
      <Header
        title=""Badge""
        description=""Компонент Badge используется для отображения меток (badges), таких как лейблы, тэги, статусы и т.д. Обычно Badge используют внутри или в непосредственной близости от другого более крупного компонента интерфейса.""
        isStable
        codeLink=""https://github.com/nlmk-group/ds-2.0/tree/main/src/components/Badge""
        figmaLink={FIGMA_LINK}
      />

      <div className={styles.tabs}>
        <Tabs>
          <Tabs.Tab label=""Разработчику"" active={0 === Number(activeTab)} onClick={() => setActiveTab(0)} />
          {/* <Tabs.Tab label=""Дизайнеру"" active={1 === Number(activeTab)} onClick={() => setActiveTab(1)} /> */}
          <Tabs.Tab label=""Тестирование"" active={2 === Number(activeTab)} onClick={() => setActiveTab(2)} />
        </Tabs>
      </div>

      {Number(activeTab) == 0 && (
        <>
          <Editor
            height={150}
            description=""Компонент бэйджа по умолчанию.""
            code={`import { Badge } from '@nlmk/ds-2.0';

export default  App = () =>(
  <Badge>1</Badge>
)`}
          />

          <Editor
            description=""Badge является компоненетом с обязательно примененными стилем: цветом (color). Доступные стили: primary (отображается по умолчанию), secondary, grey, error, warning, success.""
            code={`import { Badge } from '@nlmk/ds-2.0';

export default  App = () =>(
  <>
    <Badge>1</Badge>
    <Badge color=""secondary"">1</Badge>
    <Badge color=""grey"">1</Badge>
    <Badge color=""error"">1</Badge>
    <Badge color=""warning"">1</Badge>
    <Badge color=""success"">1</Badge>
  </>
)`}
          />

          <Editor
            description=""Badge представлен в нескольких вариациях (стилях): solid (с заливкой) и outline (с контуром).""
            code={`import { Badge } from '@nlmk/ds-2.0';

export default  App = () =>(
  <>
    <Badge variant=""outline"">1</Badge>
    <Badge color=""secondary"" variant=""outline"">1</Badge>
    <Badge color=""grey"" variant=""outline"">1</Badge>
    <Badge color=""error"" variant=""outline"">1</Badge>
    <Badge color=""warning"" variant=""outline"">1</Badge>
    <Badge color=""success"" variant=""outline"">1</Badge>
  </>
)`}
          />

          <Editor
            description=""Компонент Badge доступен в трёх размерах: s - маленький бэйдж с высотой 16px, m - средний бэйдж, его высота 24px и l - большой бэйдж высотой 26px.""
            code={`import { Badge } from '@nlmk/ds-2.0';

export default  App = () =>(
  <>
    <Badge size=""l"">1</Badge>
    <Badge size=""m"">1</Badge>
    <Badge size=""s"">1</Badge>
    <Badge size=""xs"">1</Badge>
  </>
)`}
          />
          <Properties argsTypes={argsTypes} />
        </>
      )}
      {Number(activeTab) == 1 && (
        <FigmaEmbed url={FIGMA_LINK} />
      )}
      {Number(activeTab) == 2 && (<Tests componentName=""Badge"" />)}
    </div>
  );
};

export default Stories;
"
Types for component Badge _stories argsTypes.ts,"import { variantsMapping } from '@components/declaration/enums';

import { EBadgeColors, EBadgeSizes } from '../enums';

export const argsTypes = {
  children: {
    description: 'Текст лейбла бэйджа',
    table: {
      type: {
        summary: 'string'
      }
    },
    control: { type: 'number' }
  },
  size: {
    description: 'Размер бэйджа',
    table: {
      defaultValue: {
        summary: EBadgeSizes.m
      },
      type: {
        summary: Object.values(EBadgeSizes).join(' | ')
      }
    },
    options: Object.values(EBadgeSizes),
    control: { type: 'select' }
  },
  color: {
    description: 'Цвет бэйджа',
    table: {
      defaultValue: {
        summary: EBadgeColors.primary
      },
      type: {
        summary: Object.values(EBadgeColors).join(' | ')
      }
    },
    options: Object.values(EBadgeColors),
    control: { type: 'select' }
  },
  variant: {
    description: 'Вариант бэйджа',
    table: {
      defaultValue: {
        summary: variantsMapping.solid
      },
      type: {
        summary: Object.values(variantsMapping).join(' | ')
      }
    },
    options: Object.values(variantsMapping),
    control: { type: 'select' }
  }
};
"
Types for component Badge enums.ts,"export enum EBadgeSizes {
  l = 'l',
  m = 'm',
  s = 's',
  xs = 'xs'
}

export enum EBadgeColors {
  primary = 'primary',
  secondary = 'secondary',
  error = 'error',
  success = 'success',
  warning = 'warning',
  grey = 'grey',
  'light-grey' = 'light-grey',
  'light-green' = 'light-green'
}
"
Types for component Badge types.ts,"import { variantsMapping } from '@components/declaration/enums';

import { EBadgeColors, EBadgeSizes } from './enums';

export interface IBadgeProps {
  /**
   * Цвет бейджа
   */
  color?: `${EBadgeColors}`;

  /**
   * Размер бейджа
   */
  size?: `${EBadgeSizes}`;

  /**
   * Вариант отображения бейджа
   */
  variant?: `${variantsMapping}`;

  /**
   * Контент бейджа
   */
  children?: string | number;

  /**
   * Дополнительный CSS класс
   */
  className?: string;
}
"
Styles for component Badge Badge.module.scss,"@mixin outline {
  outline-style: solid;
  background-color: transparent;
}

.badge {
  box-sizing: border-box;
  min-width: 24px;
  height: 24px;
  border-radius: var(--circle-radius);
  display: flex;
  align-items: center;
  justify-content: center;
  outline-width: 2px;
  outline-offset: -2px;
  cursor: default;
  padding: 0 8px;
}

.large {
  min-width: 26px;
  height: 26px;
}

.compact {
  min-width: 16px;
  height: 16px;
  // ширина бордера для варианта outline
  outline-width: 1px;
  outline-offset: -1px;
  padding: 0 4px;
}

.xs {
  min-width: 12px;
  height: 12px;
  padding: 0 3px;
  outline-width: 1px;
  outline-offset: -1px;
}

// Список цветовых вариантов
$variants: primary, secondary, error, warning, success, grey, light-grey, light-green;

// Соответствующие цвета для каждого варианта
$bg-colors: (
  primary: var(--brand-sapphire-40),
  secondary: var(--brand-sapphire-30),
  error: var(--spectrum-red-40),
  warning: var(--spectrum-yellow-40),
  success: var(--spectrum-green-40),
  grey: var(--steel-70),
  light-grey: var(--steel-50),
  light-green: var(--spectrum-green-20)
);

$text-colors: (
  primary: var(--unique-white),
  secondary: var(--steel-90),
  error: var(--steel-90),
  warning: var(--steel-90),
  success: var(--steel-90),
  grey: var(--steel-10),
  light-grey: var(--steel-90),
  light-green: var(--steel-90)
);

$outline-colors: (
  primary: var(--brand-sapphire-40),
  secondary: var(--brand-sapphire-30),
  error: var(--spectrum-red-40),
  warning: var(--spectrum-yellow-40),
  success: var(--spectrum-green-40),
  grey: var(--steel-70),
  light-grey: var(--steel-50),
  light-green: var(--spectrum-green-20)
);

// Цикл для генерации стилей для каждого варианта
@each $variant in $variants {
  .#{"""" + $variant} {
    background-color: map-get($bg-colors, $variant);
    color: map-get($text-colors, $variant);
  }

  .outline-#{"""" + $variant} {
    @include outline;
    outline-color: map-get($outline-colors, $variant);
    color: var(--steel-90);
  }
}
"
Types for component Box _stories argsTypes.ts,"export const argsTypes = {
  children: {
    description: 'Элементы и компоненты внутри Box',
    control: { type: 'text' }
  },
  className: {
    description: 'В компонент можно передать альтернативные стили',
    control: { type: 'string' }
  },
  background: {
    description: 'В компонент можно передать цвет заднего фона',
    control: { type: 'color' }
  },
  color: {
    description: 'В компонент можно передать цвет',
    control: { type: 'color' }
  },
  p: {
    description: 'Размер отступов со всех сторон',
    control: { type: 'text' }
  },
  px: {
    description: 'Размер горизонтальных отступов (слева и справа)',
    control: { type: 'text' }
  },
  py: {
    description: 'Размер вертикальных отступов (сверху и снизу)',
    control: { type: 'text' }
  },
  pt: {
    description: 'Размер отступа сверху',
    control: { type: 'text' }
  },
  pb: {
    description: 'Размер отступа снизу',
    control: { type: 'text' }
  },
  pl: {
    description: 'Размер отступа слева',
    control: { type: 'text' }
  },
  pr: {
    description: 'Размер отступа справа',
    control: { type: 'text' }
  },
  height: {
    description: 'В компонент можно передать кастомное значение высоты в пикселях.',
    control: { type: 'text' }
  },
  width: {
    description: 'В компонент можно передать кастомное значение ширины в пикселях.',
    control: { type: 'text' }
  },
  maxWidth: {
    description: 'В компонент можно передать кастомное значение максимальной ширины контейнера.',
    control: { type: 'text' }
  },
  gap: {
    description: 'В компонент можно передать кастомное значение отступов по умолчанию <b>var(--24-size)</b>.',
    control: { type: 'text' },
    table: {
      defaultValue: {
        summary: 'var(--24-size)'
      },
      type: {
        summary: 'string'
      }
    }
  },
  border: {
    description: 'Граница.',
    control: { type: 'text' }
  },
  borderRadius: {
    description: 'Радиус границ компонента.',
    control: { type: 'range' }
  },
  display: {
    description: 'Тип display для flex контейнера.',
    table: {
      defaultValue: {
        summary: 'flex'
      },
      type: {
        summary: 'string'
      }
    },
    options: ['flex', 'block', 'inline-block', 'grid', 'none'],
    control: { type: 'select' }
  },
  flexDirection: {
    description: 'Определяет направление элементов внутри flex контейнера.',
    table: {
      type: {
        summary: 'string'
      }
    },
    options: ['row', 'column', 'row-reverse', 'column-reverse'],
    control: { type: 'select' }
  },
  justifyContent: {
    description: 'Определяет выравнивание элементов вдоль главной оси контейнера.',
    table: {
      type: {
        summary: 'string'
      }
    },
    options: ['flex-start', 'flex-end', 'center', 'space-between', 'space-around', 'space-evenly'],
    control: { type: 'select' }
  },
  alignItems: {
    description: 'Определяет выравнивание элементов вдоль поперечной оси контейнера.',
    table: {
      type: {
        summary: 'string'
      }
    },
    options: ['flex-start', 'flex-end', 'center', 'baseline', 'stretch'],
    control: { type: 'select' }
  },
  flexWrap: {
    description: 'Определяет, могут ли элементы обертываться на новую строку.',
    table: {
      type: {
        summary: 'string'
      }
    },
    options: ['nowrap', 'wrap', 'wrap-reverse'],
    control: { type: 'select' }
  }
};
"
Codes for component Box _stories Stories.tsx,"import React, { useState } from 'react';

import Editor from '@components/_storybook/Stories/components/Editor';
import Header from '@components/_storybook/Stories/components/Header';
import Properties from '@components/_storybook/Stories/components/Properties';
import Tests from '@components/_storybook/Stories/components/Tests';
import '@components/_storybook/Stories/styles.css';
import { Tabs } from '@components/index';

import styles from '@components/_storybook/Stories/Stories.module.scss';

import { argsTypes } from './argsTypes';

const Stories = (): JSX.Element => {
  const [activeTab, setActiveTab] = useState(0);

  return (
    <div className={styles.wrapper}>
      <Header
        title=""Box""
        description=""Компонент Box представляет собой универсальный контейнер, используемый для стилизации и компоновки содержимого. Он обладает пропсами для управления стилями, включая background, padding, border, borderRadius и flexbox свойствами, такими как display, flexDirection, justifyContent, alignItems, flexWrap и gap. Это делает Box инструментом для создания структурированного и адаптивного интерфейса.""
        isStable
        codeLink=""https://github.com/nlmk-group/ds-2.0/tree/main/src/components/Box""
      />

      <div className={styles.tabs}>
        <Tabs>
          <Tabs.Tab label=""Разработчику"" active={activeTab === 0} onClick={() => setActiveTab(0)} />
          <Tabs.Tab label=""Тестирование"" active={activeTab === 2} onClick={() => setActiveTab(2)} />
        </Tabs>
      </div>

      {activeTab === 0 && (
        <>
          <Editor
            height={500}
            description=""Большинство свойств стилей можно настраивать через пропсы компонента. Также все свойства доступны через пропс st.""
            code={`import { Box, Button, Divider } from '@nlmk/ds-2.0';

export default App = () => (
  <div style={{ width: ""100%"", padding: 0 }}>
    <Box
      border=""1px solid var(--ac-button-grey-outline-default-stroke)""
      borderRadius=""var(--8-radius)""
      p=""var(--8-space)""
    >
      <Button>Заполнить</Button>
      <Button variant=""grey"">Посмотреть</Button>
    </Box>
    <br />
    <Divider dashed />
    <br />
    <Box justifyContent=""center"">
      <Box
        width=""250px""
        flexDirection=""column""
        borderRadius=""var(--4-radius)""
        alignItems=""center""
        background=""var(--background-info)""
        py=""var(--60-space)""
        px=""var(--60-space)""
        st={{
          boxShadow: ""0 10px 10px var(--background-default)""
        }}
      >
        <Button>Заполнить</Button>
      </Box>
    </Box>
  </div>
)`}
          />
          <Properties argsTypes={argsTypes} />
        </>
      )}
      {activeTab === 2 && (<Tests componentName=""Box"" />)}
    </div>
  );
};

export default Stories;
"
Codes for component Box index.tsx,"import React, { FC } from 'react';

import clsx from 'clsx';

import { IBox } from './types';

import styles from './Box.module.scss';

const Box: FC<IBox> = ({
  children,
  st,
  className,
  p = 0,
  px,
  py,
  pt,
  pb,
  pl,
  pr,
  background,
  height,
  width,
  maxWidth,
  color = 'var(--text-grey-900)',
  border,
  borderRadius = 0,
  display = 'flex',
  flexDirection,
  justifyContent,
  alignItems,
  flexWrap,
  gap = '24px',
  ...rest
}) => {
  const propsStyles = {
    backgroundColor: background,
    height,
    color,
    width,
    maxWidth,
    border,
    borderRadius,
    display,
    flexDirection,
    justifyContent,
    alignItems,
    flexWrap,
    gap,
    padding: p,
    paddingTop: pt,
    paddingBottom: pb,
    paddingLeft: pl,
    paddingRight: pr,
    ...st
  };

  if (px !== undefined) {
    propsStyles.paddingLeft = px;
    propsStyles.paddingRight = px;
  }

  if (py !== undefined) {
    propsStyles.paddingTop = py;
    propsStyles.paddingBottom = py;
  }

  return (
    <div data-testid=""BOX_WRAPPER"" className={clsx(styles.wrapper, className)} style={propsStyles} {...rest}>
      {children}
    </div>
  );
};

export default Box;
"
Types for component Box types.ts,"import { CSSProperties, DetailedHTMLProps, HTMLAttributes, ReactNode } from 'react';

type TBorderProps = string | number;

export interface IBox extends DetailedHTMLProps<HTMLAttributes<HTMLDivElement>, HTMLDivElement> {
  children?: ReactNode;
  p?: TBorderProps;
  px?: TBorderProps;
  py?: TBorderProps;
  pt?: TBorderProps;
  pb?: TBorderProps;
  pl?: TBorderProps;
  pr?: TBorderProps;
  background?: string;
  height?: TBorderProps;
  width?: TBorderProps;
  maxWidth?: TBorderProps;
  border?: string;
  color?: string;
  borderRadius?: TBorderProps;
  display?: CSSProperties['display'];
  flexDirection?: CSSProperties['flexDirection'];
  justifyContent?: CSSProperties['justifyContent'];
  alignItems?: CSSProperties['alignItems'];
  flexWrap?: CSSProperties['flexWrap'];
  st?: CSSProperties;
  className?: string;
  gap?: TBorderProps;
}
"
Styles for component Box Box.module.scss,".wrapper {
  height: auto;
  width: auto;
}
"
Codes for component Breadcrumbs LinkComponent.tsx,"import React, { FC } from 'react';

import { Typography } from '@components/index';
import { clsx } from 'clsx';

import { Breadcrumb } from './types';

import styles from './Breadcrumbs.module.scss';

import { Icon } from '..';
import { targetMapping } from './enums';

const LinkComponent: FC<Breadcrumb> = ({
  label,
  href,
  active,
  target = targetMapping._parent,
  isLast = false
}): JSX.Element => (
  <a
    data-testid=""LINK_HREF""
    href={href}
    target={target as targetMapping}
    rel=""noreferrer""
    className={clsx(styles['custom-link'], active && styles['active-link'])}
    id=""linkWidth""
    title={label}
  >
    <div id=""linkText"">
      <Typography variant=""Body1-Medium"" className={styles['link-text']}>
        {label}
      </Typography>
    </div>
    {!isLast && (
      <div className={styles['link-separator']}>
        <Icon name=""IconChevronArrowRightOutlined24"" containerSize={16} htmlColor={'var(--text-grey-600)'} />
      </div>
    )}
  </a>
);

export default LinkComponent;
"
Types for component Breadcrumbs _stories argsTypes.ts,"import { targetMapping } from '../enums';

export const breadcrumbsArgsTypes = {
  crumbs: {
    description: 'Массив, содержащий Breadcrumb объекты',
    table: {
      defaultValue: {
        summary: 'Type<Breadcrumbs[]>, required'
      }
    },
    control: {
      type: 'object'
    }
  },
  width: {
    description: 'Максимальная ширина элемента в процентах',
    table: {
      defaultValue: {
        summary: 100
      }
    },
    control: { type: 'number' }
  }
};

export const breadcrumbsItemsArgsTypes = {
  label: {
    description: 'Название',
    table: {
      defaultValue: {
        summary: 'Type<string>, required'
      }
    }
  },
  href: {
    description: 'Ссылка',
    table: {
      defaultValue: {
        summary: 'Type<string>, required'
      }
    }
  },
  target: {
    description: 'Атрибут определяет где открывать документ, на который ведет ссылка',
    table: {
      defaultValue: {
        summary: targetMapping._parent
      }
    }
  },
  active: {
    description: 'Опциональное свойство. С этим свойством компонент демонстрирует текущую страницу',
    table: {
      defaultValue: {
        summary: 'false'
      }
    }
  }
};

export default { ...breadcrumbsArgsTypes, ...breadcrumbsItemsArgsTypes };
"
Codes for component Breadcrumbs index.tsx,"import React, { FC, useEffect, useLayoutEffect, useRef, useState } from 'react';

import clsx from 'clsx';

import { BreadcrumbsProps } from './types';

import styles from './Breadcrumbs.module.scss';

import BasicBreadcrumbs from './BasicBreadcrumbs';
import ShortenBreadcrumbs from './ShortenBreadcrumbs';

const Breadcrumbs: FC<BreadcrumbsProps> = ({ crumbs, width = 100, className }) => {
  const ref = useRef<HTMLDivElement>(null);
  const [elementWidth, setElementWidth] = useState<number>(0);
  const [linkSumWidth, setLinkSumWidth] = useState<number>(0);

  const charsOverflow = (): number => {
    let result = 0;
    const nodeArray: NodeListOf<HTMLElement> = document.querySelectorAll('a#linkWidth');
    nodeArray.forEach(({ clientWidth }) => {
      result += clientWidth + 8 + 16;
    });
    return result;
  };

  useEffect(() => {
    handleSetElementWidth();
  }, [width]);

  useEffect(() => {
    if (linkSumWidth === 0) {
      setLinkSumWidth(charsOverflow());
    }
  }, [elementWidth, width]);

  const handleSetElementWidth = (): void => {
    if (!!ref && !!ref.current && elementWidth !== ref.current.offsetWidth) {
      setElementWidth(ref.current.offsetWidth);
    }
  };

  useLayoutEffect(() => {
    handleSetElementWidth();
  }, []);

  useEffect(() => {
    function handleWindowResize() {
      handleSetElementWidth();
    }

    window.addEventListener('resize', handleWindowResize);

    return () => {
      window.removeEventListener('resize', handleWindowResize);
    };
  }, [ref?.current?.offsetWidth]);

  const condition = elementWidth > linkSumWidth || crumbs.length <= 2;

  return (
    <div
      data-testid=""BREADCRUMBS_WRAPPER""
      ref={ref}
      className={clsx(styles.wrapper, className)}
      style={{ width: `${width}%` }}
    >
      {condition ? <BasicBreadcrumbs crumbs={crumbs} /> : <ShortenBreadcrumbs crumbs={crumbs} />}
    </div>
  );
};

export default Breadcrumbs;
"
Styles for component Breadcrumbs Breadcrumbs.module.scss,".wrapper {
  display: flex;
  gap: var(--8-space);
  width: inherit;
  padding: var(--8-space) 0;
}

.custom-link {
  color: var(--text-grey-600);
  text-decoration: none;
  transition: 0.5s;
  display: flex;
  align-items: center;
  cursor: pointer;

  path {
    transition: 0.5s;
  }

  &:hover,
  &:focus {
    color: var(--text-grey-700);

    path {
      fill: var(--text-grey-700);
    }
  }

  &:active {
    color: var(--text-grey-900);

    path {
      fill: var(--text-grey-900);
    }
  }
}

.active-link {
  color: var(--text-grey-900);
  cursor: default;

  &:hover {
    color: var(--text-grey-900);
  }
  &:active {
    pointer-events: none;
  }

  path {
    fill: var(--text-grey-900);
  }
}

.link-separator {
  margin-left: var(--8-space);
}

.hidden-options-wrapper {
  width: var(--40-size);
  position: relative;
  display: flex;
  justify-content: center;
  color: var(--text-grey-600);
  font-size: var(--body1-medium-font-size);
  transition: 0.5s;
  cursor: pointer;

  &:hover,
  &:focus {
    color: var(--text-grey-700);
  }
}

.active-option-list {
  color: var(--text-grey-900);
}

.option-list {
  max-height: var(--192-size);
  width: var(--179-size);
}

.test-wrapper-width {
  div:first-child {
    width: 500px;
  }
}

.link-text {
  white-space: nowrap;
  max-width: var(--108-size);
  overflow: hidden;
  text-overflow: ellipsis;
}

.properties-helper {
  position: fixed;
  bottom: 10px;
  z-index: 9;
  display: flex;
  flex-direction: column;
  gap: 8px;
  left: 50%;
  transform: translateX(-50%);

  div {
    position: unset;
    transform: unset;
  }
}
"
Codes for component Breadcrumbs ShortenBreadcrumbs.tsx,"import React, { FC, useState } from 'react';

import { clsx } from 'clsx';

import { Breadcrumb } from './types';

import styles from './Breadcrumbs.module.scss';

import { ClickAwayListener, Icon, List, ListItem } from '..';
import { targetMapping } from './enums';
import LinkComponent from './LinkComponent';

const ShortenBreadcrumbs: FC<{ crumbs: Breadcrumb[] }> = ({ crumbs }): JSX.Element => {
  const [showItems, setShowItems] = useState<boolean>(false);
  const firstElement = crumbs.at(0) as Breadcrumb;
  const lastElement = crumbs.at(crumbs.length - 1) as Breadcrumb;
  const otherElementsArray = crumbs.slice(1, crumbs.length - 1);

  return (
    <>
      <LinkComponent {...firstElement} />
      <div
        data-testid=""HIDDEN_OPTIONS_BUTTON""
        className={clsx(styles['hidden-options-wrapper'], showItems && styles['active-option-list'])}
        onClick={() => setShowItems(!showItems)}
      >
        ...
        <div className={clsx(styles['link-separator'], styles['custom-link'])}>
          <Icon name=""IconChevronArrowRightOutlined24"" containerSize={16} htmlColor={'var(--text-grey-600)'} />
        </div>
        {showItems && (
          <ClickAwayListener onClickAway={() => setShowItems(!showItems)}>
            <List data-testid=""HIDDEN_OPTIONS_LIST"" className={styles['option-list']}>
              {otherElementsArray.map((item: Breadcrumb, index) => (
                <ListItem key={index} onClick={() => window.open(item.href, item.target || targetMapping._parent)}>
                  <LinkComponent {...item} />
                </ListItem>
              ))}
            </List>
          </ClickAwayListener>
        )}
      </div>
      <LinkComponent {...lastElement} />
    </>
  );
};

export default ShortenBreadcrumbs;
"
Types for component Breadcrumbs types.ts,"export interface Breadcrumb {
  label: string;
  href: string;
  active?: boolean;
  target?: string;
  isLast?: boolean;
}

export interface BreadcrumbsProps {
  className?: string;
  crumbs: Breadcrumb[];
  width?: number;
}

export type TNodeWidth = Pick<HTMLElement, 'offsetWidth' | 'scrollWidth'>;
"
Types for component Breadcrumbs constants.ts,"import { Breadcrumb } from './types';

import { targetMapping } from './enums';

export const breadcrumbsSimple: Breadcrumb[] = [
  {
    href: 'https://developer.mozilla.org/en-US/',
    label: 'MDN'
  },
  {
    href: 'https://www.geeksforgeeks.org/',
    label: 'Geeks For Geeks',
    active: true
  }
];

export const breadcrumbs: Breadcrumb[] = [
  {
    href: 'https://developer.mozilla.org/en-US/',
    label: 'MDN'
  },
  {
    href: 'https://www.lipsum.com/',
    label: 'Lorem Ipsum'
  },
  {
    href: 'https://www.w3schools.com/',
    label: 'W3 Schools'
  },
  {
    href: 'https://css-tricks.com/',
    label: 'CSS Tricks'
  },
  {
    href: 'https://www.geeksforgeeks.org/',
    label: 'Geeks For Geeks',
    active: true
  }
];

export const breadcrumbsThreeOptions: Breadcrumb[] = [
  {
    href: 'https://developer.mozilla.org/en-US/',
    label: 'MDN'
  },
  {
    href: 'https://www.w3schools.com/',
    label: 'W3'
  },
  {
    href: 'https://css-tricks.com/',
    label: 'CSS'
  }
];

export const breadcrumbsTarget: Breadcrumb[] = [
  {
    href: 'https://www.lipsum.com/',
    label: `${targetMapping._blank}`,
    target: targetMapping._blank
  },
  {
    href: 'https://www.lipsum.com/',
    label: `${targetMapping._parent}`,
    target: targetMapping._parent
  },
  {
    href: 'https://www.lipsum.com/',
    label: `${targetMapping._self}`,
    target: targetMapping._self
  },
  {
    href: 'https://www.lipsum.com/',
    label: `${targetMapping._top}`,
    target: targetMapping._top
  }
];
"
Types for component Breadcrumbs enums.ts,"/**
 * @type {targetMapping} targetMapping
 */

export enum targetMapping {
  _blank = '_blank',
  _self = '_self',
  _parent = '_parent',
  _top = '_top'
}
"
Codes for component Breadcrumbs _stories Stories.tsx,"import React, { useState } from 'react';

import Editor from '@components/_storybook/Stories/components/Editor';
import FigmaEmbed from '@components/_storybook/Stories/components/FigmaEmbed';
import Header from '@components/_storybook/Stories/components/Header';
import Properties from '@components/_storybook/Stories/components/Properties';
import Tests from '@components/_storybook/Stories/components/Tests';
import '@components/_storybook/Stories/styles.css';
import { Tabs } from '@components/index';

import styles from '@components/_storybook/Stories/Stories.module.scss';

import { breadcrumbsSimple, breadcrumbsTarget, breadcrumbsThreeOptions } from '../constants';
import argsTypes from './argsTypes';

const Stories = (): JSX.Element => {
  const [activeTab, setActiveTab] = useState(0);

  return (
    <div className={styles.wrapper}>
      <Header
        title=""Breadcrumbs""
        description=""Компонент BreadCrumbs (хлебные крошки) используется в пользовательском интерфейсе для предоставления визуальной навигационной структуры, позволяющей пользователям быстро и эффективно понимать своё местоположение в иерархии контента или приложения. BreadCrumbs представляют собой последовательность ссылок или текста, а каждый элемент в ней указывает на уровень иерархии, переходя от более общего к более специфическому контенту.""
        isStable
        codeLink=""https://github.com/nlmk-group/ds-2.0/tree/main/src/components/Breadcrumbs""
        figmaLink=""https://www.figma.com/file/MSMqfqJrQNaqbLe4Ctkq7n/Design-System-2.0-NLMK-(beta)-(Community)?type=design&node-id=1036%3A20843&mode=design&t=awyt3Fzj1XS6th7v-1""
      />

      <div className={styles.tabs}>
        <Tabs>
          <Tabs.Tab label=""Разработчику"" active={0 === Number(activeTab)} onClick={() => setActiveTab(0)} />
          {/* <Tabs.Tab label=""Дизайнеру"" active={1 === Number(activeTab)} onClick={() => setActiveTab(1)} /> */}
          <Tabs.Tab label=""Тестирование"" active={2 === Number(activeTab)} onClick={() => setActiveTab(2)} />
        </Tabs>
      </div>

      {Number(activeTab) == 0 && (
        <>
          <Editor
            description=""Обычное использование компонента.""
            code={`import { Breadcrumbs } from '@nlmk/ds-2.0';

export default  App = () => (
  <>
    <Breadcrumbs crumbs={${JSON.stringify(breadcrumbsSimple, null, 4)}} />
  </>
)
            `}
          />

          <Editor
            description=""Компоненту можно задать значение ширины в процентах. Процент будет считываться отширины родителя.""
            code={`import { Breadcrumbs } from '@nlmk/ds-2.0';

export default  App = () => (
  <>
    <Breadcrumbs crumbs={${JSON.stringify(breadcrumbsThreeOptions, null, 4)}} />
    <Breadcrumbs width=""50"" crumbs={${JSON.stringify(breadcrumbsThreeOptions, null, 4)}} />
  </>
)
            `}
          />

          <Editor
            description=""Компонент может содержать ссылки с разными target.""
            code={`import { Breadcrumbs } from '@nlmk/ds-2.0';

export default  App = () => (
  <>
    <Breadcrumbs crumbs={${JSON.stringify(breadcrumbsTarget, null, 4)}} />
  </>
)
            `}
          />

          <Properties argsTypes={argsTypes} />
        </>
      )}
      {Number(activeTab) == 1 && (
        <FigmaEmbed url=""https://www.figma.com/file/MSMqfqJrQNaqbLe4Ctkq7n/Design-System-2.0-NLMK-(beta)-(Community)?type=design&node-id=1036%3A20843&mode=design&t=awyt3Fzj1XS6th7v-1"" />
      )}
      {Number(activeTab) == 2 && <Tests componentName=""Breadcrumbs"" />}
    </div>
  );
};

export default Stories;
"
Types for component index.ts,"/** Компоненты */
export { default as AttachFiles } from './AttachFiles';
export { default as File } from './AttachFiles/subcomponents/File';
export { default as Accordion } from './Accordion';
export { default as Alert } from './Alert';
export { default as Avatar } from './Avatar';
export { default as Input } from './Input';
export { default as ErrorPage } from './ErrorPage';
export { default as List } from './List';
export { default as Link } from './Link';
export { default as ListItem } from './ListItem';
export { default as Select } from './Select';
export { default as PseudoInput } from './PseudoInput';
export { default as Radio } from './Radio';
export { default as Box } from './Box';
export { default as Grid } from './Grid';
export { default as Button } from './Button';
export { default as Badge } from './Badge';
export { default as Breadcrumbs } from './Breadcrumbs';
export { default as Card } from './Card';
export { default as Chip } from './Chip';
export { default as DragAndDrop } from './DragAndDrop';
export { default as Checkbox } from './Checkbox';
export { default as Typography } from './Typography';
export { default as Tooltip } from './Tooltip';
export { default as Icon } from './Icon';
export { default as IconContainer } from './Icon/subcomponent/IconContainer';
export { default as ThemeSwitcher } from './ThemeSwitcher';
export { default as DatePicker } from './DatePicker';
export { default as DateTime } from './DateTime';
export { default as InputRange } from './InputRange';
export { default as InputSlider } from './InputSlider';
export { default as SkeletonLoader } from './SkeletonLoader';
export { default as Spinner } from './Spinner';
export { default as Tabs } from './Tabs';
export { default as ClickAwayListener } from './ClickAwayListener';
export { default as ProgressBar } from './ProgressBar';
export { default as Divider } from './Divider';
export { default as Snackbar } from './Snackbar';
export { default as Header } from './Header';
export { default as Switch } from './Switch';
export { default as TimePicker } from './TimePicker';
export { default as ToggleButtonGroup } from './ToggleButtonGroup';
export { default as SegmentButtonGroup } from './SegmentButtonGroup';
export { default as ImagePicture } from './ImagePicture';
export { default as Modal } from './Modal';
export { default as Sidebar } from './Sidebar';
export { default as SlideToggle } from './SlideToggle';
export { default as MenuItem } from './Sidebar';
export { default as SubmenuItem } from './Sidebar';
export { default as Scrollbar } from './Scrollbar';
export { default as Drawer } from './Drawer';
export { default as Dropdown } from './Dropdown';
export { default as DropdownMenuItem } from './Dropdown/subcomponents/DropdownMenuItem';
export { default as SimpleSelect } from './SimpleSelect';
export { default as OptionItem } from './SimpleSelect/subcomponents/OptionItem';
export { default as Stepper } from './Stepper';
export * from './ThemeSwitcher';
export * from './Icon/IconsDirectory';

/** Хуки */
export * from './Theme/hooks';
"
Codes for component Breadcrumbs BasicBreadcrumbs.tsx,"import React, { FC } from 'react';

import { Breadcrumb } from './types';

import LinkComponent from './LinkComponent';

const BasicBreadcrumbs: FC<{ crumbs: Breadcrumb[] }> = ({ crumbs }): JSX.Element => (
  <>
    {crumbs.map((item: Breadcrumb, index) => (
      <LinkComponent key={index} {...item} isLast={crumbs.length === index+1} />
    ))}
  </>
);

export default BasicBreadcrumbs;
"
Types for component Button types.ts,"import { ButtonHTMLAttributes, ReactNode } from 'react';

import { EButtonFill, EButtonSizes, EButtonVariant } from './enums';

export type TButtonSize = `${EButtonSizes}`;
export type TButtonVariant = `${EButtonVariant}`;
export type TButtonFill = `${EButtonFill}`;

export interface IButtonProps extends ButtonHTMLAttributes<HTMLButtonElement> {
  /**
   * Контент для бейджа кнопки в начале кнопки
   */
  startBadge?: string | number;

  /**
   * Контент для бейджа кнопки в конце кнопки
   */
  endBadge?: string | number;

  /**
   * Иконка, отображаемая в начале кнопки
   */
  startIcon?: ReactNode;

  /**
   * Иконка, отображаемая в конце кнопки
   */
  endIcon?: ReactNode;

  /**
   * Иконка для кнопки-иконки
   */
  iconButton?: ReactNode;

  /**
   * Размер кнопки
   */
  size?: `${EButtonSizes}`;

  /**
   * Вариант стиля кнопки
   */
  variant?: `${EButtonVariant}`;

  /**
   * Тип заливки кнопки
   */
  fill?: `${EButtonFill}`;

  /**
   * Дополнительный CSS класс для кнопки
   */
  className?: string;

  /**
   * Контент кнопки
   */
  children?: ReactNode;
}
"
Styles for component Button Button.module.scss,"@mixin buttonBase {
  display: flex;
  align-items: center;
  justify-content: center;
  flex-shrink: 0;
  border: unset;
  outline: none;
  cursor: pointer;
  transition: 0.08s;
  width: max-content;
  box-sizing: border-box;

  &:disabled {
    cursor: default;
    opacity: 0.5;
  }
}

@mixin iconButtonSize($size) {
  min-width: $size;
  padding: 0;
}

@mixin compactStyles($size, $padding) {
  height: $size;
  padding: $padding;
}

@mixin badge-styles($bg, $tx) {
  .badge {
    background-color: $bg;
    color: $tx;
  }
}

.button {
  @include buttonBase;
  height: 40px;
  border-radius: 4px;
  padding: 8px 12px;
  transition: 0.1s ease-in-out;
}

@mixin solid-btn($bg, $tx, $hbg, $abg, $icon, $badge-bg, $badge-hbg, $badge-abg, $badge-tx) {
  background-color: $bg;
  color: $tx;
  @include badge-styles($badge-bg, $badge-tx);

  &:not(:disabled) {
    &:hover {
      background: $hbg;
      @include badge-styles($badge-hbg, $badge-tx);
    }

    &:active {
      background: $abg;
      @include badge-styles($badge-abg, $badge-tx);
    }
  }

  svg {
    color: $icon;
  }
}

@mixin outline-btn($bg, $tx, $hbg, $abg, $icon, $br, $badge-bg, $badge-hbg, $badge-abg, $badge-tx) {
  @include solid-btn($bg, $tx, $hbg, $abg, $icon, $badge-bg, $badge-hbg, $badge-abg, $badge-tx);
  outline: 2px solid $br;
  outline-offset: -2px;
}

/* primary solid variant */

.primary-solid {
  @include solid-btn(
      var(--brand-sapphire-50),
      var(--unique-white),
      var(--brand-sapphire-40),
      var(--brand-sapphire-60),
      var(--unique-white),
      var(--brand-sapphire-40),
      var(--brand-sapphire-50),
      var(--brand-sapphire-40),
      var(--unique-white)
  )
}

/* primary outline variant */

.primary-outline {
  @include outline-btn(
      transparent,
      var(--unique-bluewhite),
      var(--brand-sapphire-10),
      var(--brand-sapphire-20),
      var(--brand-sapphire-60),
      var(--brand-sapphire-60),
      transparent,
      transparent,
      transparent,
      var(--steel-90)
  );

  .badge {
    outline-color: var(--brand-sapphire-60);
  }
}

/* primary clear variant */

.primary-clear {
  @include solid-btn(
      transparent,
      var(--unique-bluewhite),
      var(--brand-sapphire-10),
      var(--brand-sapphire-20),
      var(--brand-sapphire-60),
      var(--brand-sapphire-40),
      var(--brand-sapphire-40),
      var(--brand-sapphire-40),
      var(--unique-white)
  )
}

/* secondary variant */

.secondary {
  @include solid-btn(
      var(--brand-sapphire-20),
      var(--unique-bluewhite),
      var(--brand-sapphire-10),
      var(--brand-sapphire-30),
      var(--unique-bluewhite),
      var(--brand-sapphire-30),
      var(--brand-sapphire-30),
      var(--brand-sapphire-20),
      var(--steel-90)
  )
}

/* grey solid variant */

.grey-solid {
  @include solid-btn(
      var(--steel-30),
      var(--unique-bluewhite),
      var(--steel-40),
      var(--steel-50),
      var(--unique-bluewhite),
      var(--brand-sapphire-60),
      var(--brand-sapphire-60),
      var(--brand-sapphire-60),
      var(--unique-white)
  )
}

/* grey outline variant */

.grey-outline {
  @include outline-btn(
      transparent,
      var(--steel-70),
      var(--steel-30),
      var(--steel-40),
      var(--steel-70),
      var(--steel-70),
      transparent,
      transparent,
      transparent,
      var(--steel-90)
  )
}

/* grey clear variant */

.grey-clear {
  @include solid-btn(
      transparent,
      var(--steel-70),
      var(--steel-30),
      var(--steel-40),
      var(--steel-70),
      var(--steel-70),
      var(--steel-70),
      var(--steel-70),
      var(--steel-10)
  )
}

/* black solid variant */

.black-solid {
  @include solid-btn(
      var(--steel-80),
      var(--steel-10),
      var(--steel-70),
      var(--steel-90),
      var(--steel-10),
      var(--steel-70),
      var(--steel-80),
      var(--steel-70),
      var(--steel-10)
  )
}

/* black outline variant */

.black-outline {
  @include outline-btn(
      transparent,
      var(--steel-90),
      var(--steel-30),
      var(--steel-40),
      var(--steel-90),
      var(--steel-90),
      transparent,
      transparent,
      transparent,
      var(--steel-90)
  )
}

/* black clear variant */

.black-clear {
  @include solid-btn(
      transparent,
      var(--steel-90),
      var(--steel-30),
      var(--steel-40),
      var(--steel-90),
      var(--steel-70),
      var(--steel-70),
      var(--steel-70),
      var(--steel-10)
  )
}

/* info variant */

.info {
  @include solid-btn(
      transparent,
      var(--steel-90),
      var(--steel-30),
      var(--steel-40),
      var(--brand-sapphire-60),
      var(--brand-sapphire-30),
      var(--brand-sapphire-30),
      var(--brand-sapphire-30),
      var(--steel-90)
  )
}

/* error variant */

.error {
  @include solid-btn(
      transparent,
      var(--spectrum-red-60),
      var(--spectrum-red-10),
      var(--spectrum-red-20),
      var(--spectrum-red-60),
      var(--spectrum-red-40),
      var(--spectrum-red-40),
      var(--spectrum-red-40),
      var(--unique-white)
  )
}

/* warning variant */

.warning {
  @include solid-btn(
      transparent,
      var(--spectrum-yellow-60),
      var(--spectrum-yellow-10),
      var(--spectrum-yellow-20),
      var(--spectrum-yellow-60),
      var(--spectrum-yellow-40),
      var(--spectrum-yellow-40),
      var(--spectrum-yellow-40),
      var(--unique-white)
  )
}

/* success variant */

.success {
  @include solid-btn(
      transparent,
      var(--spectrum-green-60),
      var(--spectrum-green-10),
      var(--spectrum-green-20),
      var(--spectrum-green-60),
      var(--spectrum-green-40),
      var(--spectrum-green-40),
      var(--spectrum-green-40),
      var(--unique-white)
  )
}

.label-wrapper {
  padding: 0 4px;
}

.compact {
  @include compactStyles(32px, 4px 4px);

  &.outline {
    outline-width: 1px;
    outline-offset: -1px;
  }
}

.extra-compact {
  @include compactStyles(28px, 4px 4px);

  &.outline {
    outline-width: 1px;
    outline-offset: -1px;
  }
}

.icon {
  display: flex;

  &-button {
    @include buttonBase;
    @include iconButtonSize(48px);
  }

  &-button-compact {
    @include iconButtonSize(32px);
    width: 32px;
  }

  &-button-extra-compact {
    @include iconButtonSize(28px);
  }

  &--left {
    &--size {
      &-m {
        margin: unset;
        padding-right: 4px;
      }

      &-s,
      &-xs {
        padding-right: 2px;
      }
    }
  }

  &--right {
    &--size {
      &-m {
        margin: unset;
        padding-left: 4px;
      }

      &-s,
      &-xs {
        padding-left: 2px;
      }
    }
  }
}
"
Codes for component Button _stories argsTypes.tsx,"import React from 'react';

import { IconArticleOutlined16, IconArticleOutlined24, IconArticleOutlined32 } from '@components/index';

import { EButtonFill, EButtonSizes, EButtonVariant } from '../enums';

const iconOptions = {
  IconArticleOutlined32: <IconArticleOutlined32 />,
  IconArticleOutlined24: <IconArticleOutlined24 />,
  IconArticleOutlined16: <IconArticleOutlined16 />
};

const argsTypes = {
  children: {
    description: 'Текст лейбла кнопки.',
    control: { type: 'text' }
  },
  size: {
    description: `Размер кнопки – <b>${Object.values(EButtonSizes).join(' | ')}</b>.`,
    table: {
      defaultValue: {
        summary: 'm'
      },
      type: {
        summary: 'string'
      }
    },
    options: Object.values(EButtonSizes),
    control: { type: 'select' }
  },
  variant: {
    description: `Тип кнопки – <b>${Object.values(EButtonVariant).join(' | ')}</b>.`,
    table: {
      defaultValue: {
        summary: 'primary'
      },
      type: {
        summary: 'string'
      }
    },
    options: Object.values(EButtonVariant),
    control: { type: 'select' }
  },
  fill: {
    description: `Тип кнопки заливки – <b>${Object.values(EButtonFill).join(' | ')}</b>.`,
    table: {
      defaultValue: {
        summary: 'primary'
      },
      type: {
        summary: 'string'
      }
    },
    options: Object.values(EButtonFill),
    control: { type: 'select' }
  },
  disabled: {
    description: 'Условие блокировки доступа к копке и применению стилей.',
    table: {
      defaultValue: {
        summary: 'false'
      },
      type: {
        summary: 'boolean'
      }
    },
    control: { type: 'boolean' }
  },
  startIcon: {
    description: 'Элемент с иконкой, который располагается с левой стороны кнопки.',
    table: {
      defaultValue: {
        summary: ''
      },
      type: {
        summary: 'ReactNode'
      }
    },
    options: Object.keys(iconOptions),
    control: { type: 'select' },
    mapping: iconOptions
  },
  endIcon: {
    description: 'Элемент с иконкой, который располагается с правой стороны кнопки.',
    table: {
      defaultValue: {
        summary: ''
      },
      type: {
        summary: 'ReactNode'
      }
    },
    options: Object.keys(iconOptions),
    control: { type: 'select' },
    mapping: iconOptions
  },
  iconButton: {
    description: 'Свойство, позволяющее использовать кнопку-иконку без лейбла.',
    control: { type: 'string' }
  },
  startBadge: {
    description: 'Свойство, позволяющее разместить бейдж слева.',
    control: { type: 'text' }
  },
  endBadge: {
    description: 'Свойство, позволяющее разместить бейдж справа.',
    control: { type: 'text' }
  }
};

export default argsTypes;
"
Codes for component Button index.tsx,"import React, { forwardRef } from 'react';

import { EBadgeSizes } from '@components/Badge/enums';
import { variantsWithOneFill } from '@components/Button/helpers';
import { ButtonBadge } from '@components/Button/subcomponents';
import Typography from '@components/Typography';
import { ETypographyVariants } from '@components/Typography/enums';
import clsx from 'clsx';

import { IButtonProps } from './types';

import styles from './Button.module.scss';

import { EButtonFill, EButtonNodesPosition, EButtonSizes, EButtonVariant } from './enums';

/**
 * Компонент Button для создания кнопок различных стилей и размеров.
 * @component
 * @param {Object} props - Свойства компонента Button.
 * @param {ReactNode} props.children - Содержимое кнопки.
 * @param {EButtonVariant} [props.variant=EButtonVariant.primary] - Вариант стиля кнопки.
 * @param {EButtonFill} [props.fill=EButtonFill.solid] - Тип заливки кнопки.
 * @param {ReactNode} [props.startIcon] - Иконка в начале кнопки.
 * @param {ReactNode} [props.endIcon] - Иконка в конце кнопки.
 * @param {string|number} [props.startBadge] - Бейдж в начале кнопки.
 * @param {string|number} [props.endBadge] - Бейдж в конце кнопки.
 * @param {EButtonSizes} [props.size=EButtonSizes.m] - Размер кнопки.
 * @param {ReactNode} [props.iconButton] - Иконка для кнопки-иконки.
 * @param {string} [props.className] - Дополнительный CSS класс.
 * @returns {JSX.Element} Компонент Button.
 */
export const Button = forwardRef<HTMLButtonElement, IButtonProps>(
  (
    {
      children,
      variant = EButtonVariant.primary,
      fill = EButtonFill.solid,
      startIcon,
      endIcon,
      startBadge,
      endBadge,
      size = EButtonSizes.m,
      iconButton,
      className,
      ...props
    },
    ref
  ): JSX.Element => {
    const sizeClasses = {
      s: { default: styles.compact, icon: styles['icon-button-compact'] },
      xs: { default: styles['extra-compact'], icon: styles['icon-button-extra-compact'] },
      m: { default: null, icon: null }
    };

    const getIconClass = (position: EButtonNodesPosition) =>
      clsx(styles.icon, styles[`icon--${position}--size-${size}`]);

    const typographyVariants: Record<EButtonSizes, ETypographyVariants> = {
      [EBadgeSizes.m]: ETypographyVariants['Body1-Bold'],
      [EBadgeSizes.s]: ETypographyVariants['Body1-Bold'],
      [EBadgeSizes.xs]: ETypographyVariants['Caption-Bold']
    };

    const classes = clsx(
      variantsWithOneFill.has(EButtonVariant[variant]) ? styles[variant] : styles[`${variant}-${fill}`],
      styles.button,
      fill === EButtonFill.outline && styles.outline,
      iconButton && styles['icon-button'],
      sizeClasses[size].default,
      iconButton && sizeClasses[size].icon
    );

    if (iconButton) {
      return (
        <button ref={ref} className={clsx(classes, className)} {...props}>
          {iconButton}
        </button>
      );
    }

    return (
      <button ref={ref} className={clsx(classes, className)} {...props}>
        {startBadge != null && (
          <span className={getIconClass(EButtonNodesPosition.left)}>
            <ButtonBadge
              {...{
                badge: startBadge,
                variant,
                fill,
                size
              }}
            />
          </span>
        )}
        {startIcon && <span className={getIconClass(EButtonNodesPosition.left)}>{startIcon}</span>}
        <Typography className={styles['label-wrapper']} variant={typographyVariants[size]}>
          {children}
        </Typography>
        {endIcon && <span className={getIconClass(EButtonNodesPosition.right)}>{endIcon}</span>}
        {endBadge != null && (
          <span className={getIconClass(EButtonNodesPosition.right)}>
            <ButtonBadge
              {...{
                badge: endBadge,
                variant,
                fill,
                size
              }}
            />
          </span>
        )}
      </button>
    );
  }
);

export default Button;
"
Codes for component Button _stories Stories.tsx,"import React, { useState } from 'react';

import Editor from '@components/_storybook/Stories/components/Editor';
import FigmaEmbed from '@components/_storybook/Stories/components/FigmaEmbed';
import Header from '@components/_storybook/Stories/components/Header';
import Properties from '@components/_storybook/Stories/components/Properties';
import Tests from '@components/_storybook/Stories/components/Tests';
import '@components/_storybook/Stories/styles.css';
import { Tabs } from '@components/index';

import styles from '@components/_storybook/Stories/Stories.module.scss';

import { EButtonFill, EButtonSizes, EButtonVariant } from '../enums';
import argsTypes from './argsTypes';

const FIGMA_LINK =
  'https://www.figma.com/file/2bgeOS0URFNqFO1m1bnyvg/DS2.0-Buttons?type=design&node-id=102-26898&mode=design&t=AyZ6cEr1XAJLQdOB-0';

const Stories = (): JSX.Element => {
  const [activeTab, setActiveTab] = useState(0);

  return (
    <div className={styles.wrapper}>
      <Header
        title=""Button""
        description=""Компонент Button представляет собой кнопку, которую можно настроить с помощью различных параметров, таких как
          размер, иконки, знаки и стили.""
        isStable
        codeLink=""https://github.com/nlmk-group/ds-2.0/tree/main/src/components/Button""
        figmaLink={FIGMA_LINK}
      />

      <div className={styles.tabs}>
        <Tabs>
          <Tabs.Tab label=""Разработчику"" active={0 === Number(activeTab)} onClick={() => setActiveTab(0)} />
          {/* <Tabs.Tab label=""Дизайнеру"" active={1 === Number(activeTab)} onClick={() => setActiveTab(1)} /> */}
          <Tabs.Tab label=""Тестирование"" active={2 === Number(activeTab)} onClick={() => setActiveTab(2)} />
        </Tabs>
      </div>

      {Number(activeTab) == 0 && (
        <>
          <Editor
            description=""Компонент кнопки по умолчанию в трёх размерах: обычный (m) - является размером по умолчанию, высота кнопки
          в таком случае составляет 40px, компактный (s) - высота такой кнопки составляет 32px и экстра компактный
          (xs) с высотой в 28px.""
            code={`import { Button } from '@nlmk/ds-2.0';

export default  App = () =>(
  <>
  <Button>
    Button
  </Button>
  <Button size=""${EButtonSizes.s}"">
    Button
  </Button>
  <Button size=""${EButtonSizes.xs}"">
    Button
  </Button>
  </>
)`}
          />

          <Editor
            description=""Всего представлено для кнопки семь различных стилей – primary (отображается по умолчанию), secondary,
          grey, outline, greyOutline, text.""
            code={`import { Button } from '@nlmk/ds-2.0';

export default  App = () =>(
  <>
    <Button>
      Button
    </Button>
    <Button fill=""${EButtonFill.outline}"">
      Button
    </Button>
    <Button fill=""${EButtonFill.clear}"">
      Button
    </Button>
    <Button variant=""${EButtonVariant.secondary}"">
      Button
    </Button>
    <Button variant=""${EButtonVariant.grey}"">
      Button
    </Button>
    <Button variant=""${EButtonVariant.grey}"" fill=""${EButtonFill.outline}"">
      Button
    </Button>
    <Button variant=""${EButtonVariant.grey}"" fill=""${EButtonFill.clear}"">
      Button
    </Button>
    <Button variant=""${EButtonVariant.black}"">
      Button
    </Button>
    <Button variant=""${EButtonVariant.black}"" fill=""${EButtonFill.outline}"">
      Button
    </Button>
    <Button variant=""${EButtonVariant.black}"" fill=""${EButtonFill.clear}"">
      Button
    </Button>
  </>
)`}
          />

          <Editor
            description=""Компонент кнопки может быть неактивным для пользователя (disabled).""
            code={`import { Button } from '@nlmk/ds-2.0';

export default  App = () =>(
  <>
    <Button disabled>
      Button
    </Button>
    <Button fill=""${EButtonFill.outline}"" disabled>
      Button
    </Button>
    <Button fill=""${EButtonFill.clear}"" disabled>
      Button
    </Button>
    <Button variant=""${EButtonVariant.secondary}"" disabled>
      Button
    </Button>
    <Button variant=""${EButtonVariant.grey}"" disabled>
      Button
    </Button>
    <Button variant=""${EButtonVariant.grey}"" fill=""${EButtonFill.outline}"" disabled>
      Button
    </Button>
    <Button variant=""${EButtonVariant.grey}"" fill=""${EButtonFill.clear}"" disabled>
      Button
    </Button>
    <Button variant=""${EButtonVariant.black}"" disabled>
      Button
    </Button>
    <Button variant=""${EButtonVariant.black}"" fill=""${EButtonFill.outline}"" disabled>
      Button
    </Button>
    <Button variant=""${EButtonVariant.black}"" fill=""${EButtonFill.clear}"" disabled>
      Button
    </Button>
  </>
)`}
          />

          <Editor
            description="" Компонент может быть стилизован с помощью иконок. Они могут быть отображены слева (startIcon) и справа
          (endIcon) или одновременно с двух сторон от текста кнопки или только отображать иконку.""
            code={`import { Button, IconArticleFilled24 } from '@nlmk/ds-2.0';

export default  App = () =>(
  <>
    <Button startIcon={<IconArticleFilled24 />}>
      Button
    </Button>
    <Button variant=""${EButtonVariant.secondary}"" endIcon={<IconArticleFilled24 />}>
      Button
    </Button>
    <Button fill=""${EButtonFill.outline}"" iconButton={<IconArticleFilled24 />}/>

  </>
)`}
          />

          <Editor
            description=""Компонент может быть стилизован с помощью бэйджа. Бэйдж может отоброжаться непосредственно справа от
          лэйбла или справа от иконки (startIcon).""
            code={`import { Button } from '@nlmk/ds-2.0';

export default  App = () =>(
  <>
    <Button endBadge={1}>
      Button
    </Button>
    <Button variant=""${EButtonVariant.secondary}"" endBadge={1}>
      Button
    </Button>
    <Button fill=""${EButtonFill.outline}"" endBadge={1}>
      Button
    </Button>
  </>
)`}
          />
          <Properties argsTypes={argsTypes} />
        </>
      )}
      {Number(activeTab) == 1 && <FigmaEmbed url={FIGMA_LINK} />}
      {Number(activeTab) == 2 && <Tests componentName=""Button"" />}
    </div>
  );
};

export default Stories;
"
Types for component Button enums.ts,"/**
 * @type {enum} EButtonSizes
 * @type {enum} EButtonVariant
 * @type {enum} EButtonFill
 */

export enum EButtonSizes {
  m = 'm',
  s = 's',
  xs = 'xs'
}

export enum EButtonNodesPosition {
  left = 'left',
  right = 'right'
}

export enum EButtonVariant {
  primary = 'primary',
  secondary = 'secondary',
  grey = 'grey',
  black = 'black',
  success = 'success',
  warning = 'warning',
  error = 'error',
  info = 'info'
}

export enum EButtonFill {
  solid = 'solid',
  outline = 'outline',
  clear = 'clear'
}
"
Types for component Card types.ts,"import { PropsWithChildren } from 'react';

import { sizesMapping } from '@components/declaration';

import { indicatorStatusMapping, orientationMapping } from './enums';

export type OrientationType = `${orientationMapping}`;
export type IndicatorSizeType = `${sizesMapping}`;
export type IndicatorStatusType = `${indicatorStatusMapping}`;

export interface ICard extends PropsWithChildren<any> {
  orientation?: OrientationType;
  indicatorSize?: IndicatorSizeType;
  indicatorStatus?: IndicatorStatusType;
  className?: string;
}
"
Types for component Card _stories argsTypes.ts,"import { sizesMapping } from '@components/declaration';

import { indicatorStatusMapping, orientationMapping } from '../enums';

const argsTypes = {
  children: {
    description:
      'Свойство компонента Card, которое позволяет передавать элементы JSX или ReactNode для отображения в Card',
    control: { type: 'text' }
  },
  className: {
    description: 'Пользовательский класс для настройки стилей Card.',
    control: { type: 'string' }
  },
  orientation: {
    description: 'Определяет позиции элементов для компонента Card. По умолчанию vertical',
    table: {
      defaultValue: {
        summary: orientationMapping.vertical
      },
      type: {
        summary: 'string'
      }
    },
    options: Object.values(orientationMapping),
    control: { type: 'select' }
  },
  indicatorSize: {
    description: 'Необязательный атрибут. Ширина индикатора.',
    table: {
      defaultValue: {
        summary: sizesMapping.s
      },
      type: {
        summary: 'string'
      }
    },
    options: Object.values(sizesMapping),
    control: { type: 'select' }
  },
  indicatorStatus: {
    description: 'Необязательный атрибут. Цвет индикатора.',
    table: {
      defaultValue: {
        summary: indicatorStatusMapping.success
      },
      type: {
        summary: 'string'
      }
    },
    options: Object.values(indicatorStatusMapping),
    control: { type: 'select' }
  }
};

export default argsTypes;
"
Codes for component Card _stories Stories.tsx,"import React, { useState } from 'react';

import Editor from '@components/_storybook/Stories/components/Editor';
import FigmaEmbed from '@components/_storybook/Stories/components/FigmaEmbed';
import Header from '@components/_storybook/Stories/components/Header';
import Properties from '@components/_storybook/Stories/components/Properties';
import Tests from '@components/_storybook/Stories/components/Tests';
import '@components/_storybook/Stories/styles.css';
import { Tabs } from '@components/index';

import styles from '@components/_storybook/Stories/Stories.module.scss';

import argsTypes from './argsTypes';
import { CARD_ORIENTATION, DEFAULT_CARD } from './text';

const Stories = (): JSX.Element => {
  const [activeTab, setActiveTab] = useState(0);

  return (
    <div className={styles.wrapper}>
      <Header
        title=""Card""
        description=""Компонент Card является функциональным компонентом, который предназначен для отображения карточки с различными элементами интерфейса, такими как изображение, заголовок, описание, значки, селектор и группа кнопок.""
        isStable
        codeLink=""https://github.com/nlmk-group/ds-2.0/tree/main/src/components/Card""
        figmaLink=""https://www.figma.com/file/MSMqfqJrQNaqbLe4Ctkq7n/Design-System-2.0-NLMK-(beta)-(Community)?type=design&node-id=1036%3A20845&mode=design&t=awyt3Fzj1XS6th7v-1""
      />

      <div className={styles.tabs}>
        <Tabs>
          <Tabs.Tab label=""Разработчику"" active={0 === Number(activeTab)} onClick={() => setActiveTab(0)} />
          {/* <Tabs.Tab label=""Дизайнеру"" active={1 === Number(activeTab)} onClick={() => setActiveTab(1)} /> */}
          <Tabs.Tab label=""Тестирование"" active={2 === Number(activeTab)} onClick={() => setActiveTab(2)} />
        </Tabs>
      </div>

      {Number(activeTab) == 0 && (
        <>
          <Editor
            height={350}
            description={DEFAULT_CARD}
            code={`import { Button, Card, Typography, Select } from '@nlmk/ds-2.0';

export default  App = () => (
  <>
    <div style={{
      backgroundColor: 'var(--steel-20)',
      width: 'fit-content',
      padding: '20px'
  }}>
    <Card>
      <div
        style={{
          height: '200px',
          width: '300px',
          display: 'flex',
          flexDirection: 'column',
          gap: '10px'
        }}
      >
        <Typography variant='Heading3'>
          Заголовок
        </Typography>

        <Select
          label=""Выберите язык программирования""
          options={[
            {
              label: 'C++',
              value: 'C++'
            },
            {
              label: 'C#',
              value: 'C#'
            }]}
        />

        <div style={{ display: 'flex', gap: '8px', marginTop: 'auto' }}>
          <Button>
            Button
          </Button>
          <Button variant=""secondary"">
            Button
          </Button>
        </div>
      </div>
    </Card>
  </div>
</>
)
`}
          />

          <Editor
            height={400}
            description={CARD_ORIENTATION}
            code={`import { Button, Card, Typography, Select } from '@nlmk/ds-2.0';

export default  App = () => (
  <div style={{
    backgroundColor: 'var(--steel-20)',
    width: 'fit-content',
    padding: '20px',
    display: 'flex',
    gap: '20px'
  }}>
    <Card>
    <div
        style={{
          height: '200px',
          width: '300px',
          display: 'flex',
          flexDirection: 'column',
          gap: '10px'
        }}
      >
        <Typography variant='Heading3'>
          Заголовок
        </Typography>

        <Select
          label=""Выберите язык программирования""
          options={[
            {
              label: 'C++',
              value: 'C++'
            },
            {
              label: 'C#',
              value: 'C#'
            }]}
        />

        <div style={{ display: 'flex', gap: '8px', marginTop: 'auto' }}>
          <Button>
            Button
          </Button>
          <Button variant=""secondary"">
            Button
          </Button>
        </div>
      </div>
    </Card>

    <Card orientation=""horizontal"">
      <div style={{ display: 'flex', flexDirection: 'column', gap: '12px', width: '300px'}}>
        <Typography variant='Heading3'>
          Заголовок
        </Typography>

        <Select
          label=""Выберите язык программирования""
          options={[
            {
              label: 'C++',
              value: 'C++'
            },
            {
              label: 'C#',
              value: 'C#'
            }]}
        />

        <div style={{ display: 'flex', gap: '8px' }}>
          <Button>
            Button
          </Button>
          <Button variant=""secondary"">
            Button
          </Button>
        </div>
      </div>
    </Card>
  </div>
)
`}
          />

          <Properties argsTypes={argsTypes} />
        </>
      )}
      {Number(activeTab) == 1 && (
        <FigmaEmbed url=""https://www.figma.com/file/MSMqfqJrQNaqbLe4Ctkq7n/Design-System-2.0-NLMK-(beta)-(Community)?type=design&node-id=1036%3A20845&mode=design&t=awyt3Fzj1XS6th7v-1"" />
      )}
      {Number(activeTab) == 2 && <Tests componentName=""Card"" />}
    </div>
  );
};

export default Stories;
"
Types for component Card _stories text.ts,"export const DEFAULT_CARD = 'Card по умолчанию';
export const CARD_ORIENTATION = 'Card с разными вариантами ориентации';
export const CARD_VARIANT = 'Card с другими вариантами реализации';
"
Types for component Card enums.ts,"/**
 * @type {orientationMapping} targetMapping
 * @type {indicatorStatusMapping} indicatorStatusMapping
 */

export enum orientationMapping {
  vertical = 'vertical',
  horizontal = 'horizontal'
}

export enum indicatorStatusMapping {
  default = 'default',
  success = 'success',
  error = 'error',
  warning = 'warning',
  info = 'info'
}
"
Styles for component Card Card.module.scss,".wrapper {
  display: flex;
  border-radius: var(--4-radius);
  background: var(--steel-20);
  box-sizing: border-box;
}

.wrapper-vertical {
  padding: var(--32-space) var(--16-space);
  flex-direction: column;
}

.wrapper-horizontal {
  padding: var(--16-space) var(--32-space);
  flex-direction: row;
}

.card-vertical {
  gap: var(--24-space);
  width: 385px;
}

.card-horizontal {
  gap: var(--24-space);
}

.indicator-vertical {
  border-top-style: solid;
}

.indicator-horizontal {
  border-left-style: solid;
}

.indicator-s {
  border-width: var(--2-border);
}

.indicator-m {
  border-width: var(--4-border);
}

.indicator-l {
  border-width: calc(var(--4-border) * 2);
}

.indicator-default {
  border-color: var(--background-paper);
}

.indicator-success {
  border-color: var(--success-green-600);
}

.indicator-error {
  border-color: var(--error-red-600);
}

.indicator-warning {
  border-color: var(--warning-orange-600);
}

.indicator-info {
  border-color: var(--primary-blue-600);
}
"
Codes for component Card index.tsx,"import React, { FC } from 'react';

import { sizesMapping } from '@components/declaration';
import { clsx } from 'clsx';

import { ICard } from './types';

import styles from './Card.module.scss';

import { indicatorStatusMapping, orientationMapping } from './enums';

const Card: FC<ICard> = ({
  children,
  orientation = orientationMapping.vertical,
  indicatorSize = sizesMapping.s,
  indicatorStatus = indicatorStatusMapping.default,
  className
}) => {
  return (
    <div
      data-testid=""CARD_WRAPPER""
      className={clsx(
        styles.wrapper,
        styles[`wrapper-${orientation}`],
        styles[`indicator-${orientation}`],
        indicatorStatus !== indicatorStatusMapping.default && styles[`indicator-${indicatorSize}`],
        styles[`indicator-${indicatorStatus}`],
        styles[`card-${orientation}`],
        className
      )}
    >
      {children}
    </div>
  );
};

export default Card;
"
Styles for component Checkbox Checkbox.module.scss,".label {
  display: flex;
  align-items: center;
  column-gap: 12px;
  cursor: pointer;
  position: relative;
  width: fit-content;
  z-index: 1;

  &:has(.checkbox:disabled) {
    cursor: default;
  }

  &:not(:has(.checkbox:disabled)):has(.checkbox:not(.error))::after {
    content: '';
    position: absolute;
    top: 50%;
    left: 9px;
    transform: translate(-50%, -50%);
    width: var(--32-size);
    height: var(--32-size);
    border-radius: 50%;
    background-color: var(--ac-checkbox-checked-focused-focus);
    opacity: 0;
    transition: opacity 0.3s ease-in-out;
    pointer-events: none;
    z-index: -1;
  }

  &:not(:has(.checkbox:disabled)):has(.checkbox:not(.error)):hover::after {
    opacity: var(--8-opacity);
  }

  &:has(.checkbox:checked) {
    &:not(:has(.checkbox:disabled)):has(.checkbox:not(.error))::after {
      background-color: var(--ac-checkbox-checked-focused-focus);
    }
  }

  &:not(:has(.checkbox:disabled)):has(.checkbox:not(.error))::after {
    background-color: var(--ac-checkbox-unchecked-focused-focus);
  }

  &:not(.checkbox:disabled).checkbox:not(.error):hover {
    input.checkbox {
      border-color: var(--ac-checkbox-unchecked-focused-stroke);
      background-color: var(--ac-checkbox-unchecked-focused-fill);
    }
  }

}

.checkbox {
  appearance: none;
  -webkit-appearance: none;
  margin: 0;
  width: 18px;
  height: 18px;
  border: var(--2-border) solid var(--ac-checkbox-unchecked-normal-stroke);
  border-radius: var(--2-radius);
  background-color: var(--ac-checkbox-unchecked-normal-fill);
  cursor: pointer;

  &:checked {
    background-color: var(--ac-checkbox-checked-normal);
    border-color: var(--ac-checkbox-checked-normal);

    ~ .checkmark {
      opacity: 1;
    }
  }

  &.error {
    border-color: var(--ac-checkbox-unchecked-error-stroke);
    background-color: var(--ac-checkbox-unchecked-error--fill);

    ~ .checkmark {
      background-color: var(--ac-checkbox-unchecked-error-stroke);
    }
  }

  &:checked:disabled {
    cursor: default;
    border: unset;
    background-color: var(--ac-checkbox-unchecked-disabled-fill);

    ~ .checkmark {
      opacity: var(--50-opacity);
      background-color: var(--ac-checkbox-checked-disabled);
    }
  }

  &:disabled {
    opacity: var(--50-opacity);
    cursor: default;
    border-color: var(--ac-checkbox-unchecked-disabled-stroke);
    background-color: var(--ac-checkbox-unchecked-disabled-fill);

    ~ .checkmark {
      background-color: var(--ac-checkbox-checked-disabled);
    }
  }
}

.checkmark {
  position: absolute;
  left: 0;
  width: 18px;
  height: 18px;
  border-radius: var(--2-radius);
  display: flex;
  justify-content: center;
  align-items: center;
  opacity: 0;
  z-index: 10;

  svg {
    width: 14px;
    height: 14px;
  }
}
"
Types for component Checkbox _stories argsTypes.ts,"import { ECheckboxColors } from '../types';

export const argsTypes = {
  id: {
    description: 'Идентификатор компонента',
    control: { type: 'text' }
  },
  label: {
    description: 'Строка для вспомогательно текста справа от чекбокса',
    control: { type: 'text' }
  },
  onChange: {
    description: 'Callback, который будет вызван при изменении состояния чекбокса',
    action: 'изменено состояние чекбокса'
  },
  value: {
    description: 'Текущее значение чекбокса'
  },
  checked: {
    description: 'Условие отображения чекбокса',
    table: {
      defaultValue: {
        summary: 'false'
      },
      type: {
        summary: 'boolean'
      }
    },
    control: { type: 'boolean' }
  },
  disabled: {
    description: 'Пропc, позволяющий заблокировать чекбокс',
    table: {
      defaultValue: {
        summary: 'false'
      },
      type: {
        summary: 'boolean'
      }
    },
    control: { type: 'boolean' }
  },
  multiple: {
    description: 'Пропc, позволяющий отобразить промежуточное состояние чекбокса в списке чекбоксов',
    table: {
      defaultValue: {
        summary: 'false'
      },
      type: {
        summary: 'boolean'
      }
    },
    control: { type: 'boolean' }
  },
  color: {
    description: `Цвет компонента, отображающий разные состояния – <b>${Object.values(ECheckboxColors).join(
      ' | '
    )}</b>`,
    table: {
      defaultValue: {
        summary: ECheckboxColors.default
      },
      type: {
        summary: 'string'
      }
    },
    options: Object.values(ECheckboxColors),
    control: { type: 'select' }
  }
};
"
Codes for component Checkbox _stories Stories.tsx,"import React, { useState } from 'react';

import Editor from '@components/_storybook/Stories/components/Editor';
import FigmaEmbed from '@components/_storybook/Stories/components/FigmaEmbed';
import Header from '@components/_storybook/Stories/components/Header';
import Properties from '@components/_storybook/Stories/components/Properties';
import Tests from '@components/_storybook/Stories/components/Tests';
import '@components/_storybook/Stories/styles.css';
import { Tabs } from '@components/index';

import styles from '@components/_storybook/Stories/Stories.module.scss';

import { argsTypes } from './argsTypes';

const FIGMA_LINK =
  'https://www.figma.com/file/2bgeOS0URFNqFO1m1bnyvg/DS2.0-Buttons?type=design&node-id=3360-16500&mode=design&t=U47unVezMPIQMdQU-0';

const Stories = (): JSX.Element => {
  const [activeTab, setActiveTab] = useState(0);

  return (
    <div className={styles.wrapper}>
      <Header
        title=""Checkbox""
        description=""Компонент Checkbox является элементом пользовательского интерфейса, который позволяет пользователю взаимодействовать с формой, выбирая или снимая выбор с определённых опций. ""
        isStable
        codeLink=""https://github.com/nlmk-group/ds-2.0/tree/main/src/components/Checkbox""
        figmaLink={FIGMA_LINK}
      />

      <div className={styles.tabs}>
        <Tabs>
          <Tabs.Tab label=""Разработчику"" active={0 === Number(activeTab)} onClick={() => setActiveTab(0)} />
          {/* <Tabs.Tab label=""Дизайнеру"" active={1 === Number(activeTab)} onClick={() => setActiveTab(1)} /> */}
          <Tabs.Tab label=""Тестирование"" active={2 === Number(activeTab)} onClick={() => setActiveTab(2)} />
        </Tabs>
      </div>

      {Number(activeTab) == 0 && (
        <>
          <Editor
            height={150}
            description=""Компонент checkbox по умолчанию.""
            code={`import { Checkbox } from '@nlmk/ds-2.0';

export default  App = () => (
  <Checkbox onChange={() => console.log('Changed!')} />
)`}
          />

          <Editor
            description=""Актуальные состояния компонента checkbox.""
            code={`import { Checkbox } from '@nlmk/ds-2.0';

export default  App = () =>(
  <>
    <Checkbox />
    <Checkbox color=""error""/>
  </>
)`}
          />

          <Editor
            description=""Checkbox с установленными флагами для параметров checked, disabled, multiple и с текстом label.""
            code={`import { Checkbox } from '@nlmk/ds-2.0';

export default  App = () =>(
  <>
    <Checkbox label=""default"" />
    <Checkbox label=""disabled"" disabled />
    <Checkbox label=""multiple"" multiple checked />
    <Checkbox label=""multiple disabled"" disabled multiple checked />
  </>
)`}
          />

          <Editor
            description=""Ниже представлен checkbox с параметром multiple, который меняет свое состояние в зависимости от количества выбранных дочерних элементов (работает только при наличии пропса checked).""
            code={`import { useState } from 'react';
import { Checkbox } from '@nlmk/ds-2.0';

export default  App = () => {
  const [checked, setChecked] = useState([true, false]);

  const handleChange1 = (event: { target: { checked: boolean } }) => {
    setChecked([event.target.checked, event.target.checked]);
  };

  const handleChange2 = (event: { target: { checked: boolean } }) => {
    setChecked([event.target.checked, checked[1]]);
  };

  const handleChange3 = (event: { target: { checked: boolean } }) => {
    setChecked([checked[0], event.target.checked]);
  };

  const isCheckedMultiple = checked[0] !== checked[1];

  return (
            <>
              <Checkbox
                label=""Parent""
                checked={isCheckedMultiple || (checked[0] && checked[1])}
                multiple={isCheckedMultiple}
                onChange={handleChange1}
              />
              <Checkbox
                label=""Child 1""
                checked={checked[0]}
                onChange={handleChange2}
              />
              <Checkbox
                label=""Child 2""
                checked={checked[1]}
                onChange={handleChange3}
              />
    </>
)}`}
          />
          <Properties argsTypes={argsTypes} />
        </>
      )}
      {Number(activeTab) == 1 && <FigmaEmbed url={FIGMA_LINK} />}
      {Number(activeTab) == 2 && <Tests componentName=""Checkbox"" />}
    </div>
  );
};

export default Stories;
"
Types for component index.ts,"/** Компоненты */
export { default as AttachFiles } from './AttachFiles';
export { default as File } from './AttachFiles/subcomponents/File';
export { default as Accordion } from './Accordion';
export { default as Alert } from './Alert';
export { default as Avatar } from './Avatar';
export { default as Input } from './Input';
export { default as ErrorPage } from './ErrorPage';
export { default as List } from './List';
export { default as Link } from './Link';
export { default as ListItem } from './ListItem';
export { default as Select } from './Select';
export { default as PseudoInput } from './PseudoInput';
export { default as Radio } from './Radio';
export { default as Box } from './Box';
export { default as Grid } from './Grid';
export { default as Button } from './Button';
export { default as Badge } from './Badge';
export { default as Breadcrumbs } from './Breadcrumbs';
export { default as Card } from './Card';
export { default as Chip } from './Chip';
export { default as DragAndDrop } from './DragAndDrop';
export { default as Checkbox } from './Checkbox';
export { default as Typography } from './Typography';
export { default as Tooltip } from './Tooltip';
export { default as Icon } from './Icon';
export { default as IconContainer } from './Icon/subcomponent/IconContainer';
export { default as ThemeSwitcher } from './ThemeSwitcher';
export { default as DatePicker } from './DatePicker';
export { default as DateTime } from './DateTime';
export { default as InputRange } from './InputRange';
export { default as InputSlider } from './InputSlider';
export { default as SkeletonLoader } from './SkeletonLoader';
export { default as Spinner } from './Spinner';
export { default as Tabs } from './Tabs';
export { default as ClickAwayListener } from './ClickAwayListener';
export { default as ProgressBar } from './ProgressBar';
export { default as Divider } from './Divider';
export { default as Snackbar } from './Snackbar';
export { default as Header } from './Header';
export { default as Switch } from './Switch';
export { default as TimePicker } from './TimePicker';
export { default as ToggleButtonGroup } from './ToggleButtonGroup';
export { default as SegmentButtonGroup } from './SegmentButtonGroup';
export { default as ImagePicture } from './ImagePicture';
export { default as Modal } from './Modal';
export { default as Sidebar } from './Sidebar';
export { default as SlideToggle } from './SlideToggle';
export { default as MenuItem } from './Sidebar';
export { default as SubmenuItem } from './Sidebar';
export { default as Scrollbar } from './Scrollbar';
export { default as Drawer } from './Drawer';
export { default as Dropdown } from './Dropdown';
export { default as DropdownMenuItem } from './Dropdown/subcomponents/DropdownMenuItem';
export { default as SimpleSelect } from './SimpleSelect';
export { default as OptionItem } from './SimpleSelect/subcomponents/OptionItem';
export { default as Stepper } from './Stepper';
export * from './ThemeSwitcher';
export * from './Icon/IconsDirectory';

/** Хуки */
export * from './Theme/hooks';
"
Codes for component Checkbox index.tsx,"import React, { FC } from 'react';

import Typography from '@components/Typography';
import clsx from 'clsx';

import type { ICheckboxProps } from './types';

import styles from './Checkbox.module.scss';

import { IconDeleteMinusFilled16, IconDoneCheckFilled16 } from '..';

const Checkbox: FC<ICheckboxProps> = ({
  id,
  label,
  checked,
  disabled = false,
  color = 'default',
  multiple = false,
  onChange,
  value,
  className
}) => {
  const colorClassName = styles[color as keyof typeof styles];

  return (
    <label className={clsx(styles.label, className)} htmlFor={id} data-testid=""checkbox"">
      <input
        type=""checkbox""
        id={id}
        checked={onChange ? checked : undefined}
        defaultChecked={!onChange ? checked : undefined}
        disabled={disabled}
        className={clsx(styles.checkbox, colorClassName)}
        onChange={onChange}
        value={value}
        aria-label={label || 'checkbox'}
      />
      <span className={clsx(styles.checkmark, colorClassName)}>
        {multiple ? (
          <IconDeleteMinusFilled16 htmlColor=""var(--ac-checkbox-checked-bg)"" />
        ) : (
          <IconDoneCheckFilled16 htmlColor=""var(--ac-checkbox-checked-bg)"" />
        )}
      </span>
      {label && (
        <Typography
          variant=""Body1-Medium""
          style={{ color: disabled ? 'var(--text-grey-500)' : 'var(--text-grey-900)', lineHeight: '18px' }}
        >
          {label}
        </Typography>
      )}
    </label>
  );
};

export default Checkbox;
"
Types for component Checkbox types.ts,"import { ChangeEventHandler, InputHTMLAttributes } from 'react';

export enum ECheckboxColors {
  default = 'default',
  error = 'error'
}

type TCheckboxColors = `${ECheckboxColors}`;

export interface ICheckboxProps extends InputHTMLAttributes<HTMLInputElement> {
  label?: string;
  color?: TCheckboxColors;
  disabled?: boolean;
  checked?: boolean;
  id?: string;
  onChange?: ChangeEventHandler<HTMLInputElement> | undefined;
  value?: string;
  multiple?: boolean;
  className?: string;
}
"
Codes for component Chip _stories Stories.tsx,"import React, { useState } from 'react';

import Editor from '@components/_storybook/Stories/components/Editor';
import FigmaEmbed from '@components/_storybook/Stories/components/FigmaEmbed';
import Header from '@components/_storybook/Stories/components/Header';
import Properties from '@components/_storybook/Stories/components/Properties';
import Tests from '@components/_storybook/Stories/components/Tests';
import '@components/_storybook/Stories/styles.css';
import { Tabs } from '@components/index';

import styles from '@components/_storybook/Stories/Stories.module.scss';

import { argsTypes } from './argsTypes';

const Stories = (): JSX.Element => {
  const [activeTab, setActiveTab] = useState(0);

  return (
    <div className={styles.wrapper}>
      <Header
        title=""Chip""
        description=""Компонент Chip обычно используется для отображения небольших интерактивных элементов пользовательского интерфейса, таких как теги, метки, категории или выборы в фильтрах, а также для представления небольших блоков информации.""
        isStable
        codeLink=""https://github.com/nlmk-group/ds-2.0/tree/main/src/components/Chip""
        figmaLink=""https://www.figma.com/file/MSMqfqJrQNaqbLe4Ctkq7n/Design-System-2.0-NLMK-(beta)-(Community)?type=design&node-id=1039%3A25758&mode=design&t=awyt3Fzj1XS6th7v-1""
      />

      <div className={styles.tabs}>
        <Tabs>
          <Tabs.Tab label=""Разработчику"" active={0 === Number(activeTab)} onClick={() => setActiveTab(0)} />
          {/* <Tabs.Tab label=""Дизайнеру"" active={1 === Number(activeTab)} onClick={() => setActiveTab(1)} /> */}
          <Tabs.Tab label=""Тестирование"" active={2 === Number(activeTab)} onClick={() => setActiveTab(2)} />
        </Tabs>
      </div>

      {Number(activeTab) == 0 && (
        <>
          <Editor
            height={150}
            description=""Компонент Chip по умолчанию.""
            code={`import { Chip } from '@nlmk/ds-2.0';

export default  App = () => (
  <Chip>1234</Chip>
)`}
          />

          <Editor
            description=""Компонент Chip может использовать разные стили: primary (отображается по умолчанию), error, warning, success.""
            code={`import { Chip } from '@nlmk/ds-2.0';

export default  App = () =>(
  <>
    <Chip>1234</Chip>
    <Chip color=""error"">1234</Chip>
    <Chip color=""success"">1234</Chip>
    <Chip color=""warning"">1234</Chip>
  </>
)`}
          />

          <Editor
            description=""Компонент доступен в двух типах заливки: solid - полностью закрашенный, outline - закрашенна только граница.""
            code={`import { Chip } from '@nlmk/ds-2.0';;

export default  App = () =>(
  <>
    <Chip variant=""outline"">1234</Chip>
    <Chip color=""error"" variant=""outline"">1234</Chip>
    <Chip color=""success"" variant=""outline"">1234</Chip>
    <Chip color=""warning"" variant=""outline"">1234</Chip>
  </>
)`}
          />

          <Editor
            height={230}
            description=""Компонент доступен в двух размерах: s - маленький чип с высотой 16px, m - средний чип, его высота 24px.""
            code={`import { Chip } from '@nlmk/ds-2.0';

export default  App = () => (
  <>
    <Chip size=""s"">1234</Chip>
    <Chip size=""m"">1234</Chip>
  </>
)`}
          />
          <Editor
            description=""Чип может содержать суффикс.""
            code={`import { Chip } from '@nlmk/ds-2.0';

export default  App = () => (
  <>
    <Chip suffix=""кг"">1234</Chip>
    <Chip color=""error"" suffix=""кг"">1234</Chip>
    <Chip color=""success"" suffix=""кг"">1234</Chip>
    <Chip color=""warning"" suffix=""кг"">1234</Chip>
  </>
)`}
          />
          <Editor
            description=""Чип может содержать суффикс.""
            code={`import { Chip } from '@nlmk/ds-2.0';

export default  App = () => (
  <>
    <Chip label=""Цифры"">1234</Chip>
    <Chip color=""error"" label=""Цифры"">1234</Chip>
    <Chip color=""success"" label=""Цифры"">1234</Chip>
    <Chip color=""warning"" label=""Цифры"">1234</Chip>
  </>
)`}
          />

          <Properties argsTypes={argsTypes} />
        </>
      )}
      {Number(activeTab) == 1 && (
        <FigmaEmbed url=""https://www.figma.com/file/MSMqfqJrQNaqbLe4Ctkq7n/Design-System-2.0-NLMK-(beta)-(Community)?type=design&node-id=1039%3A25758&mode=design&t=awyt3Fzj1XS6th7v-1"" />
      )}
      {Number(activeTab) == 2 && <Tests componentName=""Chip"" />}
    </div>
  );
};

export default Stories;
"
Types for component Chip enums.ts,"export enum EChipColors {
  primary = 'primary',
  error = 'error',
  success = 'success',
  warning = 'warning'
}
"
Codes for component Chip types.tsx,"import { sizesMapping, variantsMapping } from '@components/declaration/enums';
import { EChipColors } from '@components/Chip/enums';

export type ChipSize = Exclude<`${sizesMapping}`, 'l'>;

export interface IChipProps {
  color?: `${EChipColors}`;
  size?: ChipSize;
  variant?: `${variantsMapping}`;
  label?: string;
  children: string | number;
  suffix?: string;
  className?: string;
}
"
Styles for component Chip Chip.module.scss,"@mixin unset-margins {
  margin-top: unset;
  margin-bottom: unset;
}

.chip {
  align-items: flex-start;
  flex-direction: column;
}

.label {
  @include unset-margins;
}

.suffix {
  @include unset-margins;
  display: flex;
  align-items: end;
  padding-left: 4px;
}
"
Types for component Chip _stories argsTypes.ts,"import { EChipColors } from '@components/Chip/enums';
import { sizesMapping, variantsMapping } from '@components/declaration/enums';

export const argsTypes = {
  children: {
    description: 'Содержание компонента',
    control: { type: 'text' }
  },
  size: {
    description: `Размер чипа <b>${Object.values(sizesMapping)
      .filter(i => i !== 'l')
      .join(' | ')}</b>`,
    table: {
      defaultValue: {
        summary: sizesMapping.m
      },
      type: {
        summary: 'string'
      }
    },
    options: Object.values(sizesMapping).filter(item => item !== sizesMapping.l),
    control: { type: 'select' }
  },
  color: {
    description: `Тип чипа – <b>${Object.values(EChipColors).join(' | ')}</b>`,
    table: {
      defaultValue: {
        summary: EChipColors.primary
      },
      type: {
        summary: 'string'
      }
    },
    options: Object.values(EChipColors),
    control: { type: 'select' }
  },
  label: {
    description: 'Текст лейбла компонента',
    control: { type: 'text' }
  },
  suffix: {
    description: 'Текст суффикса компонента',
    control: { type: 'text' }
  },
  variant: {
    description: `Вид компонента – <b>${Object.values(variantsMapping).join(' | ')}</b>`,
    table: {
      defaultValue: {
        summary: variantsMapping.solid
      },
      type: {
        summary: 'string'
      }
    },
    options: Object.values(variantsMapping),
    control: { type: 'select' }
  }
};
"
Codes for component Chip index.tsx,"import React, { FC } from 'react';

import { sizesMapping, variantsMapping } from '@components/declaration/enums';
import { Badge, Box, Typography } from '@components/index';
import { ETypographyVariants } from '@components/Typography/enums';
import clsx from 'clsx';

import { ChipSize, IChipProps } from './types';

import styles from './Chip.module.scss';

import { EChipColors } from './enums';

/**
 * Компонент Chip для отображения компактной информации с возможностью добавления метки и суффикса.
 * @component
 * @param {Object} props - Свойства компонента Chip.
 * @param {EChipColors} [props.color=EChipColors.primary] - Цвет чипа.
 * @param {ChipSize} [props.size=sizesMapping.m] - Размер чипа.
 * @param {variantsMapping} [props.variant=variantsMapping.solid] - Вариант отображения чипа.
 * @param {string} [props.label] - Метка чипа.
 * @param {string|number} props.children - Основной контент чипа.
 * @param {string} [props.suffix] - Суффикс чипа.
 * @param {string} [props.className] - Дополнительный CSS класс.
 * @returns {JSX.Element} Компонент Chip.
 */

export const Chip: FC<IChipProps> = ({
  color = EChipColors.primary,
  size = sizesMapping.m,
  variant = variantsMapping.solid,
  label,
  children,
  suffix,
  className
}: {
  color?: `${EChipColors}`;
  size?: ChipSize;
  variant?: `${variantsMapping}`;
  label?: string;
  children: string | number;
  suffix?: string;
  className?: string;
}): JSX.Element => {
  const suffixVariant: Record<string, ETypographyVariants> = {
    [sizesMapping.m]: ETypographyVariants['Body2-Bold'],
    [sizesMapping.s]: ETypographyVariants['Caption-Bold']
  };

  return (
    <div className={clsx(styles.chip, className)}>
      {label && (
        <Typography className={styles.label} variant={ETypographyVariants['Body2-Medium']} color=""var(--steel-70)"">
          {label}
        </Typography>
      )}
      <Box alignItems=""center"" justifyContent=""flex-start"" gap=""0"">
        <Badge color={color} variant={variant} size={size}>
          {children}
        </Badge>
        {suffix && (
          <Typography variant={suffixVariant[size]} color=""var(--steel-70)"" className={styles.suffix}>
            {suffix}
          </Typography>
        )}
      </Box>
    </div>
  );
};

export default Chip;
"
Codes for component DatePicker _stories Stories.tsx,"import React, { useState } from 'react';

import Editor from '@components/_storybook/Stories/components/Editor';
import FigmaEmbed from '@components/_storybook/Stories/components/FigmaEmbed';
import Header from '@components/_storybook/Stories/components/Header';
import Properties from '@components/_storybook/Stories/components/Properties';
import Tests from '@components/_storybook/Stories/components/Tests';
import { Tabs } from '@components/index';

import styles from '@components/_storybook/Stories/Stories.module.scss';

import { argsTypes } from './argsTypes';

const FIGMA_LINK =
  'https://www.figma.com/file/kFsgdsZ2n2j8bDlKW67YTc/DS2.0-Calendar?type=design&node-id=1113-8156&mode=design&t=4GLACqnE6wnER5XM-0';

const DatePickerStories = (): JSX.Element => {
  const [activeTab, setActiveTab] = useState(0);

  const datepickerDefaultCode = `import { useState } from 'react';
import { DatePicker } from '@nlmk/ds-2.0';

const App = () => {
  const [value, setValue] = useState(new Date());

  return (
    <DatePicker value={value} onChange={setValue} />
  );
};
export default App;
`;

  const datepickerTimeCode = `import { useState } from 'react';
import { DatePicker } from '@nlmk/ds-2.0';

const App = () => {
  const [value, setValue] = useState(new Date());

  return (
    <DatePicker type=""time"" value={value} onChange={setValue} />
  );
};
export default App;
`;

  const datepickerPeriodCode = `import { useState } from 'react';
import { DatePicker } from '@nlmk/ds-2.0';

const App = () => {
  const [valueFrom, setValueFrom] = useState(new Date());
  const [valueTo, setValueTo] = useState(new Date());

  return (
    <DatePicker type=""period"" valueFrom={valueFrom} valueTo={valueTo} onPeriodChange={(from, to) => { setValueFrom(from); setValueTo(to); }} />
  );
};
export default App;
`;

  const datepickerWithEnabledDateCode = `import { useState } from 'react';
import { DatePicker } from '@nlmk/ds-2.0';

const App = () => {
  const [value, setValue] = useState(new Date());
  const today = new Date();

  return (
    <DatePicker value={value} onChange={setValue} enabledFrom={new Date(today.getFullYear(), 0, 1)} enabledTo={new Date(today.getFullYear(), 11, 31)} />
  );
};
export default App;
`;

  return (
    <div className={styles.wrapper}>
      <Header
        title=""DatePicker""
        description=""Компонент для выбора даты и времени, с возможностью ограничения времени, выбором периода времени и опциональным сдвигом.""
        isBeta
        codeLink=""https://github.com/nlmk-group/ds-2.0/tree/main/src/components/DatePicker""
        figmaLink={FIGMA_LINK}
      />

      <div className={styles.tabs}>
        <Tabs>
          <Tabs.Tab label=""Разработчику"" active={0 === Number(activeTab)} onClick={() => setActiveTab(0)} />
          {/* <Tabs.Tab label=""Дизайнеру"" active={1 === Number(activeTab)} onClick={() => setActiveTab(1)} /> */}
        </Tabs>
      </div>

      {Number(activeTab) === 0 && (
        <>
          <Editor description=""Выбор даты по умолчанию"" code={datepickerDefaultCode} />

          <Editor
            description=""В DatePicker с типом time пользователь может выбрать дату и время""
            code={datepickerTimeCode}
          />

          <Editor description=""С типом period пользователь может выбрать период времени"" code={datepickerPeriodCode} />

          <Editor
            description=""Возможно установить ограничение выбора дат в определенном диапазоне с помощью пропсов с приставкой enabled""
            code={datepickerWithEnabledDateCode}
          />

          <Properties argsTypes={argsTypes} />
        </>
      )}

      {Number(activeTab) === 1 && <FigmaEmbed url={FIGMA_LINK} />}
      {Number(activeTab) === 2 && <Tests componentName=""DatePicker"" />}
    </div>
  );
};

export default DatePickerStories;
"
Types for component DatePicker helpers index.ts,"export * from './comparePeriodDates';
export * from './dateFormat';
export * from './generateCalendar';
export * from './getLastLevelDate';
export * from './hoursMinutesSeconds';
export * from './numberedDateByLevel';
export * from './panelToCalendarMapping';
export * from './quarterFormatInput';
export * from './quarters';
export * from './shifts';
export * from './yearsPanel';
export * from './levelMappingEnum';
export * from './calendarFormatEnum';
export * from './locale';
"
Codes for component DatePicker index.tsx,"import React, { useCallback, useEffect, useMemo, useState } from 'react';
import ReactDOM from 'react-dom';
import { usePopper } from 'react-popper';

import { useUpdatedValues } from '@components/declaration';
import { ClickAwayListener, PseudoInput } from '@components/index';
import clsx from 'clsx';
import { isEqual } from 'date-fns';

import { TDatePickerProps, TDateValues, TShiftValues } from './types';

import styles from './Datepicker.module.scss';

import { defaultShiftLength } from './helpers';
import { CalendarPanel, DatePickerInput } from './subcomponents';
import { LocaleProvider } from './utils';

/**
 * Компонент DatePicker для выбора даты и времени в различных форматах.
 * @component
 * @param {Object} props - Свойства компонента DatePicker.
 * @param {number|string} [props.id] - Уникальный идентификатор компонента.
 * @param {string} [props.locale='ru'] - Локаль для форматирования дат.
 * @param {TLevel} [props.level='day'] - Уровень детализации выбора даты.
 * @param {'date'|'time'|'seconds'|'period'|'shift'} [props.type='date'] - Тип пикера.
 * @param {string} [props.name] - Имя поля для использования в формах.
 * @param {string} [props.portalContainerId='root'] - ID контейнера для портала.
 * @param {Date} [props.valueFrom] - Начальная дата для периода.
 * @param {Date} [props.valueTo] - Конечная дата для периода.
 * @param {Date} [props.enabledFrom=new Date(1900, 0, 1)] - Минимальная доступная дата.
 * @param {Date} [props.enabledTo=new Date(2100, 11, 31)] - Максимальная доступная дата.
 * @param {function} [props.enabledHourFrom] - Функция для определения минимального доступного часа.
 * @param {function} [props.enabledHourTo] - Функция для определения максимального доступного часа.
 * @param {function} [props.enabledMinuteFrom] - Функция для определения минимальной доступной минуты.
 * @param {function} [props.enabledMinuteTo] - Функция для определения максимальной доступной минуты.
 * @param {Date} [props.value] - Выбранное значение даты.
 * @param {function} [props.onPeriodChange] - Обработчик изменения периода.
 * @param {function} [props.onChange] - Обработчик изменения даты.
 * @param {string} [props.className] - Дополнительный CSS класс.
 * @param {number} [props.shiftFrom] - Начальное значение смены для типа 'shift'.
 * @param {number} [props.shiftTo] - Конечное значение смены для типа 'shift'.
 * @param {2|3} [props.shiftLength=defaultShiftLength] - Длина смены.
 * @param {boolean} [props.disableChange] - Флаг для отключения возможности изменения.
 * @param {boolean} [props.withPortal] - Флаг для рендеринга в портале.
 * @param {boolean} [props.colored] - Флаг для применения цветовых стилей.
 * @param {boolean} [props.pseudo] - Флаг для отображения псевдо-инпута.
 * @param {ReactNode} [props.pseudoChildren] - Содержимое для псевдо-инпута.
 * @param {boolean} [props.disableChangesOnBlur=false] - Флаг для отключения изменений при потере фокуса.
 * @param {boolean} [props.isOpenOnFocus=false] - Флаг для открытия пикера при фокусе.
 * @param {boolean} [props.isHideYear=false] - Флаг для скрытия года.
 * @param {boolean} [props.withoutWeekdays=false] - Флаг для отображения без дней недели.
 * @param {function} [props.onPanelChange] - Обработчик изменения панели.
 * @param {function} [props.onSelect] - Обработчик выбора даты.
 * @param {boolean} [props.infiniteTimeScroll] - Флаг для бесконечной прокрутки времени.
 * @param {boolean} [props.reset=false] - Флаг наличия кнопки сброса.
 * @param {function} [props.onReset] - Обработчик сброса значения.
 * @returns {JSX.Element} Компонент DatePicker.
 */

export const DatePicker: TDatePickerProps = ({
  id,
  locale = 'ru',
  level = 'day',
  type = 'date',
  name,
  portalContainerId = 'root',
  valueFrom: outerValueFrom,
  valueTo: outerValueTo,
  enabledFrom = new Date(1900, 0, 1),
  enabledTo = new Date(2100, 11, 31),
  enabledHourFrom,
  enabledHourTo,
  enabledMinuteFrom,
  enabledMinuteTo,
  value: externalValue,
  onPeriodChange: outerOnPeriodChange,
  onChange: outerOnChange,
  className,
  shiftFrom: outerShiftFrom,
  shiftTo: outerShiftTo,
  shiftLength = defaultShiftLength,
  disableChange,
  withPortal,
  colored,
  pseudo,
  pseudoChildren,
  disableChangesOnBlur = false,
  isOpenOnFocus = false,
  isHideYear = false,
  withoutWeekdays = false,
  onPanelChange,
  onSelect,
  infiniteTimeScroll,
  reset,
  onReset,
  ...restInputProps
}) => {
  const withPeriod = useMemo(() => ['period', 'shift'].includes(type), [type]);
  const withTime = useMemo(() => ['time', 'seconds'].includes(type), [type]);
  const withSeconds = useMemo(() => type === 'seconds', [type]);
  const withShift = useMemo(() => type === 'shift', [type]);
  const [isOpen, setOpen] = useState(false);
  const [inputRef, setInputRef] = useState<null | HTMLInputElement>(null);
  const [calendarRef, setCalendarRef] = useState<null | HTMLDivElement>(null);
  const [toggle, setToggle] = useState(false);

  id = useMemo(() => `DatePicker-${id?.toString() ?? performance.now().toString().split('.').join('')}`, [id]);

  const {
    value: { valueFrom, valueTo },
    onChange: innerOnPeriodChange
  } = useUpdatedValues<TDateValues>(
    useMemo(() => ({ valueFrom: outerValueFrom, valueTo: outerValueTo }), [outerValueFrom, outerValueTo]),
    useCallback((a: TDateValues, b: TDateValues) => {
      if (a.valueFrom === undefined || b.valueFrom === undefined) {
        return a.valueFrom === b.valueFrom;
      }
      if (a.valueTo === undefined || b.valueTo === undefined) {
        return a.valueTo === b.valueTo;
      }
      return isEqual(a.valueFrom, b.valueFrom) && isEqual(a.valueTo, b.valueTo);
    }, [])
  );

  const {
    value: { shiftFrom, shiftTo },
    onChange: innerShiftChange
  } = useUpdatedValues<TShiftValues>(
    useMemo(
      () => ({
        shiftFrom: outerShiftFrom,
        shiftTo: outerShiftTo
      }),
      [outerShiftFrom, outerShiftTo]
    )
  );

  const { value, onChange: innerOnChange } = useUpdatedValues<Date | undefined>(externalValue);

  const onChange = useCallback(
    (date: Date) => {
      innerOnChange(date);
      if (outerOnChange) {
        outerOnChange(date);
      }
    },
    [innerOnChange, outerOnChange]
  );

  const onPeriodChange = useCallback(
    (valueFrom?: Date, valueTo?: Date, shiftFrom?: number, shiftTo?: number) => {
      if (outerOnPeriodChange) {
        outerOnPeriodChange(valueFrom, valueTo, shiftFrom, shiftTo);
      }
      if (valueFrom || valueTo) {
        innerOnPeriodChange({ valueFrom, valueTo });
      }
      if (shiftFrom || shiftTo) {
        innerShiftChange({ shiftFrom, shiftTo });
      }
    },
    [innerOnPeriodChange, innerShiftChange, outerOnPeriodChange]
  );

  const outerValue = useMemo(() => {
    return value && new Date(value);
  }, [value, toggle]);

  const handleClose = useCallback(() => {
    setOpen(false);
  }, []);

  const handleFocus = useCallback(() => {
    setOpen(true);
  }, []);

  const handleReset = useCallback(() => {
    setToggle(s => !s);
    setOpen(false);
  }, []);

  useEffect(() => {
    if (pseudo) {
      handleClose();
    }
  }, [handleClose, pseudo]);

  const { styles: popperStyles, attributes } = usePopper(inputRef, calendarRef, {
    placement: 'bottom-start'
  });

  const handleSetValues = useCallback(
    (isBlur?: boolean) => (date: any, date2: any, shiftFrom: any, shiftTo: any) => {
      if (isOpen && isBlur) {
        return;
      }
      inputRef?.blur();
      if (withPeriod && onPeriodChange) {
        if (withShift) {
          onPeriodChange(date || undefined, date2 || undefined, shiftFrom || undefined, shiftTo || undefined);
        } else {
          onPeriodChange(date || undefined, date2 || undefined);
        }
        setToggle(s => !s);
      } else if (onChange) {
        onChange(date);
      }
      setOpen(false);
    },
    [inputRef, isOpen, onChange, onPeriodChange, withPeriod, withShift]
  );

  const renderCalendarPanel = () => (
    <CalendarPanel
      type={type}
      level={level}
      ref={setCalendarRef}
      withPeriod={withPeriod}
      valueFrom={valueFrom}
      valueTo={valueTo}
      enabledHourFrom={enabledHourFrom}
      enabledHourTo={enabledHourTo}
      enabledMinuteFrom={enabledMinuteFrom}
      enabledMinuteTo={enabledMinuteTo}
      shiftFrom={shiftFrom}
      shiftTo={shiftTo}
      shiftLength={shiftLength}
      value={value}
      onClose={handleClose}
      onReset={handleReset}
      disableChange={disableChange}
      disableChangesOnBlur={disableChangesOnBlur}
      onChange={onChange}
      onPeriodChange={onPeriodChange}
      withTime={withTime}
      enabledTo={enabledTo}
      enabledFrom={enabledFrom}
      style={popperStyles.popper}
      withShift={withShift}
      withSeconds={withSeconds}
      isOpenOnFocus={isOpenOnFocus}
      isHideYear={isHideYear}
      withoutWeekdays={withoutWeekdays}
      onPanelChange={onPanelChange}
      onSelect={onSelect}
      infiniteTimeScroll={infiniteTimeScroll}
      {...attributes.popper}
    />
  );

  const portalContainer = useMemo(() => document.getElementById(portalContainerId) as HTMLElement, [portalContainerId]);

  const renderDatepicker = () => (
    <div
      className={clsx(styles.root, className, restInputProps.disabled && styles.disabled, isOpen && styles.isOpen)}
      id={id as any}
    >
      {name && ['date', 'time', 'seconds'].includes(type) && (
        <input type=""hidden"" name={name} value={value?.toISOString()} />
      )}
      {name && ['period', 'shift'].includes(type) && (
        <>
          <input type=""hidden"" name={`${name}-from`} value={valueFrom?.toISOString()} />
          <input type=""hidden"" name={`${name}-to`} value={valueTo?.toISOString()} />
        </>
      )}
      {name && type === 'shift' && (
        <>
          <input type=""hidden"" name={`${name}-shift-from`} value={shiftFrom} />
          <input type=""hidden"" name={`${name}-shift-to`} value={shiftTo} />
        </>
      )}
      <DatePickerInput
        level={level}
        ref={setInputRef}
        showTime={withTime}
        value={outerValue}
        onChange={onChange}
        enabledFrom={enabledFrom}
        enabledTo={enabledTo}
        enabledHourFrom={enabledHourFrom}
        enabledHourTo={enabledHourTo}
        enabledMinuteFrom={enabledMinuteFrom}
        enabledMinuteTo={enabledMinuteTo}
        onFocus={handleFocus}
        withPeriod={withPeriod}
        valueFrom={valueFrom}
        valueTo={valueTo}
        shiftFrom={shiftFrom}
        shiftTo={shiftTo}
        shiftLength={shiftLength}
        withShift={withShift}
        withSeconds={withSeconds}
        isOpenOnFocus={isOpenOnFocus}
        onEnterKeyDown={handleSetValues(false)}
        onTabKeyDown={handleSetValues(false)}
        onBlur={handleSetValues(true)}
        colored={colored}
        reset={reset}
        onReset={onReset}
        isHideYear={isHideYear}
        {...restInputProps}
      />
      {isOpen &&
        (!withPortal ? (
          <>{renderCalendarPanel()}</>
        ) : (
          ReactDOM.createPortal(<>{renderCalendarPanel()}</>, portalContainer)
        ))}
    </div>
  );

  return (
    <LocaleProvider value={locale}>
      {pseudo ? (
        <PseudoInput label={withTime ? 'Дата и время' : 'Дата'}>{pseudoChildren}</PseudoInput>
      ) : (
        (isOpenOnFocus && <ClickAwayListener onClickAway={handleClose}>{renderDatepicker()}</ClickAwayListener>) || (
          <>{renderDatepicker()}</>
        )
      )}
    </LocaleProvider>
  );
};

export default DatePicker;
"
Styles for component DatePicker Datepicker.module.scss,".root {
  font-family: var(--font-families-pt-root-ui);
  user-select: none;
  transition: 0.2s;
  width: 100%;
  position: relative;
}

.disabled {
  pointer-events: none;

  path {
    fill: var(--steel-70);
  }
}

.isOpen {
  z-index: 100000;
}
"
Types for component DatePicker _stories argsTypes.ts,"import { sizesMappingInput } from '@components/declaration';

export const argsTypes = {
  onPeriodChange: {
    description: 'Callback, который будет вызван при выборе периода(выборе 2 дат или нажатии ""Применить"")',
    action: 'изменен период'
  },
  onChange: {
    description: 'Callback, который будет вызван при выборе даты',
    action: 'изменена дата'
  },
  value: {
    description: 'Значение выбранной даты'
  },
  valueFrom: {
    description: 'Значение начала выбранного периода'
  },
  valueTo: {
    description: 'Значение конца выбранного периода'
  },
  shiftFrom: {
    description: 'Значение начала выбранной смены'
  },
  shiftTo: {
    description: 'Значение конца выбранной смены'
  },
  shiftLength: {
    description: 'Количество смен в датапикере типа shift'
  },
  type: {
    description: 'Тип пикера. Возможные варианты: date | time | seconds | period | shift',
    table: {
      defaultValue: {
        summary: 'date'
      },
      type: {
        summary: 'string'
      }
    },
    options: ['date', 'time', 'seconds', 'period', 'shift'],
    control: { type: 'select' }
  },
  enabledFrom: {
    description: 'Начальная дата, доступная к выбору',
    table: {
      defaultValue: {
        summary: '-'
      }
    }
  },
  enabledTo: {
    description: 'Конечная дата, доступная к выбору',
    table: {
      defaultValue: {
        summary: '-'
      }
    }
  },
  enabledHourFrom: {
    description: 'Начальный час, доступный к выбору'
  },
  enabledHourTo: {
    description: 'Конечный час, доступный к выбору'
  },
  enabledMinuteFrom: {
    description: 'Начальная минута, доступную к выбору'
  },
  enabledMinuteTo: {
    description: 'Конечная минута, доступную к выбору'
  },
  level: {
    description: 'Детализация даты(можно выбрать отдельно год, месяц с годом или полную дату)',
    table: {
      defaultValue: {
        summary: 'false'
      },
      type: {
        summary: '""day"" | ""month"" | ""year""'
      }
    },
    options: ['day', 'month', 'year'],
    control: { type: 'select' }
  },
  disableChange: {
    description: 'Заблокирована только панель для выбора',
    table: {
      defaultValue: {
        summary: 'false'
      }
    },
    control: { type: 'boolean' }
  },
  withoutWeekdays: {
    description: 'Убрать панель с отображением дней недели',
    table: {
      defaultValue: {
        summary: 'false'
      }
    },
    control: { type: 'boolean' }
  },
  name: {
    description: 'Название поля(нужно для использования пикера как нативного - без value и onChange)'
  },
  label: {
    description:
      'Label для инпута. Если не передан, то определяться будет по пропсу showTime, если он true, то выводится ""Дата и время"", иначе ""Дата""'
  },
  size: {
    description: 'Свойство, позволяющее регулировать высоту DatePicker',
    table: {
      defaultValue: {
        summary: sizesMappingInput.m
      }
    },
    options: Object.values(sizesMappingInput),
    control: { type: 'select' }
  },
  error: {
    description: 'С ошибкой или нет'
  },
  disabled: {
    description: 'Заблокирован ли инпут'
  },
  withPortal: {
    description: 'Оборачивать ли компонент в react портал (например, для корректного отображения в модальных окнах)'
  },
  colored: {
    description: 'Условие применения стилей подсветки',
    table: {
      defaultValue: {
        summary: 'false'
      },
      type: {
        summary: 'boolean'
      }
    },
    control: { type: 'boolean' }
  },
  disableChangesOnBlur: {
    description: 'Условие применения даты из пикера при событии onBlur',
    table: {
      defaultValue: {
        summary: 'false'
      },
      type: {
        summary: 'boolean'
      }
    },
    control: { type: 'boolean' }
  },
  pseudo: {
    description: 'Свойство, позволяющее переключать элемент с default на PseudoInput',
    table: {
      defaultValue: {
        summary: 'false'
      },
      type: {
        summary: 'boolean'
      }
    },
    control: { type: 'boolean' }
  },
  pseudoChildren: {
    description: 'Данные, передаваемые в PseudoInput для отображения. Используется только со свойством `pseudo`'
  },
  isHideYear: {
    description: 'Свойство, позволяющее скрывать год в компоненте DatePicker с типами: date,time,seconds',
    table: {
      defaultValue: {
        summary: 'false'
      },
      type: {
        summary: 'boolean'
      }
    },
    control: { type: 'boolean' }
  },
  portalContainerId: {
    description:
      'Идентификатор контейнера, в который будет рендериться календарь с помощью React Portal. По умолчанию используется ""root"".',
    table: {
      defaultValue: {
        summary: 'root'
      }
    },
    control: { type: 'text' }
  },
  onPanelChange: {
    description: 'Callback, который будет вызван при изменении панели дней, месяца, года, квартала в календаре',
    action: 'изменена панель дней, месяца, квартала или года'
  },
  onSelect: {
    description: 'Callback, который будет вызван при нажатии на любое значение дня/месяца/квартала/года в календаре',
    action: 'изменен день/месяц/квартал/год'
  },
  infiniteTimeScroll: {
    description: 'Включаем бесконечный скролл календаря',
    table: {
      defaultValue: {
        summary: 'false'
      }
    },
    control: { type: 'boolean' }
  },
  onReset: {
    description: 'Callback, который будет вызван при клике по иконке сброса',
    action: 'изменено value'
  },
  reset: {
    description: 'Булевое значение для показа иконки сброса',
    control: { type: 'boolean' },
    table: {
      defaultValue: {
        summary: false
      }
    }
  }
};
"
Types for component DatePicker types.ts,"import { FC, ReactNode } from 'react';

import { LEVEL_MAPPING_ENUM } from '@components/DatePicker/helpers/levelMappingEnum';
import { ENABLED_HOURS_FROM_VALUES, ENABLED_HOURS_TO_VALUES, sizesMappingInput } from '@components/declaration';

export type TLevel = `${LEVEL_MAPPING_ENUM}`;

export type TEnabledHourFrom = typeof ENABLED_HOURS_FROM_VALUES[number];
export type TEnabledHourTo = typeof ENABLED_HOURS_TO_VALUES[number];

export interface IBaseProps {
  id?: number | string;
  portalContainerId?: string;
  locale?: string;
  className?: string;
  enabledFrom?: Date;
  enabledTo?: Date;
  enabledHourFrom?: (date: Date) => TEnabledHourFrom;
  enabledHourTo?: (date: Date) => TEnabledHourTo;
  enabledMinuteFrom?: (date: Date) => number;
  enabledMinuteTo?: (date: Date) => number;
  disabled?: boolean;
  label?: string;
  disableChange?: boolean;
  name?: string;
  withPortal?: boolean;
  error?: boolean;
  colored?: boolean;
  disableChangesOnBlur?: boolean;
  isOpenOnFocus?: boolean;
  pseudo?: boolean;
  pseudoChildren?: ReactNode;
  isHideYear?: boolean;
  size?: sizesMappingInput;
  withoutWeekdays?: boolean;
  onPanelChange?: (date: Date) => void;
  onSelect?: (date: Date) => void;
  infiniteTimeScroll?: boolean;
  reset?: boolean;
  onReset?: () => void;
}

export interface IBaseRegularProps extends IBaseProps {
  value?: Date;
  shiftFrom?: undefined;
  shiftTo?: undefined;
  shiftLength?: 2 | 3;
  onChange?: (date: Date) => void;
  valueFrom?: undefined;
  valueTo?: undefined;
  onPeriodChange?: undefined;
  level?: TLevel;
}

export interface IDatePickerRegularProps extends IBaseRegularProps {
  type?: 'date';
}

export interface IDateTimePickerRegularProps extends IBaseRegularProps {
  type?: 'time';
}

export interface IDateTimeSecondsPickerRegularProps extends IBaseRegularProps {
  type?: 'seconds';
}

export interface IBasePeriodProps extends IBaseProps {
  valueFrom?: Date;
  valueTo?: Date;
  onChange?: undefined;
  value?: undefined;
  level?: undefined;
}

export interface IDatePickerPeriodProps extends IBasePeriodProps {
  shiftFrom?: undefined;
  shiftTo?: undefined;
  shiftLength?: 2 | 3;
  onPeriodChange?: (valueFrom?: Date, valueTo?: Date) => void;
  type?: 'period';
}

export interface IDatePickerUnFullPeriodProps extends IBaseProps {
  valueFrom?: Date;
  valueTo?: Date;
  onChange?: undefined;
  value?: undefined;
  shiftFrom?: undefined;
  shiftTo?: undefined;
  shiftLength?: 2 | 3;
  onPeriodChange?: (valueFrom?: Date, valueTo?: Date) => void;
  type?: 'period';
  level?: TLevel;
}

export interface IDatePickerPeriodShiftProps extends IBasePeriodProps {
  shiftFrom?: number;
  shiftTo?: number;
  shiftLength?: 2 | 3;
  onPeriodChange?: (valueFrom?: Date, valueTo?: Date, shiftFrom?: number, shiftTo?: number) => void;
  type?: 'shift';
}

export type TDatePickerProps = FC<
  | IDatePickerRegularProps
  | IDateTimePickerRegularProps
  | IDateTimeSecondsPickerRegularProps
  | IDatePickerPeriodProps
  | IDatePickerUnFullPeriodProps
  | IDatePickerPeriodShiftProps
>;

export type TDateValues = {
  valueFrom: Date | undefined;
  valueTo: Date | undefined;
};

export type TShiftValues = {
  shiftFrom: number | undefined;
  shiftTo: number | undefined;
};
"
Types for component DatePicker utils index.ts,"export * from './LocaleContext';
"
Types for component DatePicker subcomponents index.ts,"export * from './CalendarPanel';
export * from './CommonCalendar';
export * from './DatePickerInput';
export * from './Day';
export * from './DaysCalendar';
export * from './Footer';
export * from './MonthsCalendar';
export * from './PeriodPicker';
export * from './QuartersCalendar';
export * from './ShiftSelector';
export * from './TimeSelector';
export * from './Weekdays';
export * from './YearsCalendar';
export * from './InfiniteContainer';
"
Types for component Divider enums.ts,"/**
 * @type {enum} orientationMapping
 * @type {enum} typeMapping
 */

export enum orientationMapping {
  left = 'left',
  right = 'right',
  center = 'center'
}

export enum typeMapping {
  horizontal = 'horizontal',
  vertical = 'vertical'
}
"
Codes for component Divider index.tsx,"import React, { FC } from 'react';

import { clsx } from 'clsx';

import { IDivider } from './types';

import styles from './Divider.module.scss';

import { orientationMapping, typeMapping } from './enums';
import HorizontalBorder from './HorizontalBorder';
import Vertical from './Vertical';

const Divider: FC<IDivider> = ({
  children,
  className,
  dashed = false,
  orientation = orientationMapping.center,
  orientationSpace = 0,
  type
}) => {
  if (type === typeMapping.vertical) {
    return <Vertical className={className} dashed={dashed} />;
  }

  if (!children) {
    return (
      <div data-testid=""WRAPPER"" className={clsx(className, styles.wrapper)}>
        <HorizontalBorder isSmall={orientation === orientationMapping.left} dashed={dashed} />
      </div>
    );
  }

  return (
    <div data-testid=""WRAPPER"" className={clsx(className, styles.wrapper)}>
      <HorizontalBorder
        isSmall={orientation === orientationMapping.left}
        dashed={dashed}
        orientationSpace={orientationSpace}
      />
      <div className={styles['child-wrapper']}>{children}</div>
      <HorizontalBorder
        isSmall={orientation === orientationMapping.right}
        dashed={dashed}
        orientationSpace={orientationSpace}
      />
    </div>
  );
};

export default Divider;
"
Codes for component Divider HorizontalBorder.tsx,"import React, { FC } from 'react';

import { clsx } from 'clsx';

import { IHorizontalBorder } from './types';

import styles from './Divider.module.scss';

const HorizontalBorder: FC<IHorizontalBorder> = ({ isSmall, dashed = false, orientationSpace = 0 }): JSX.Element => (
  <div
    data-testid=""BORDER_WRAPPER""
    style={isSmall && orientationSpace !== 0 ? { width: `${orientationSpace}px` } : {}}
    className={clsx(styles['border-horizontal-wrapper'], isSmall && styles['border-horizontal-small'])}
  >
    <div
      data-testid=""BORDER""
      className={clsx(styles['border-horizontal'], dashed ? styles['border-dashed'] : styles['border-solid'])}
    />
  </div>
);

export default HorizontalBorder;
"
Codes for component Divider _stories Stories.tsx,"import React, { useState } from 'react';

import Editor from '@components/_storybook/Stories/components/Editor';
import FigmaEmbed from '@components/_storybook/Stories/components/FigmaEmbed';
import Header from '@components/_storybook/Stories/components/Header';
import Properties from '@components/_storybook/Stories/components/Properties';
import Tests from '@components/_storybook/Stories/components/Tests';
import '@components/_storybook/Stories/styles.css';
import { Tabs } from '@components/index';

import styles from '@components/_storybook/Stories/Stories.module.scss';

import argsTypes from './argsTypes';
import {
  DASHED_DIVIDER,
  DEFAULT_DIVIDER,
  DIVIDER_ORIENTATION,
  DIVIDER_ORIENTATION_CUSTOM_SPACE,
  DIVIDER_TYPE,
  VERTICAL_DIVIDER
} from './text';

const style = '{{ width: 900, padding: 30 }}';

const styleVariations = `{{
    padding: '30px',
    display: 'flex',
    flexDirection: 'column',
    gap: '24px'
}}`;

const FIGMA_LINK =
  'https://www.figma.com/file/3dTe0kYNFqQO3VnjJ10jyv/DS2.0-Input?type=design&node-id=4230-7104&mode=design&t=hGZk1uvXm3rDzcu6-0';

const Stories = (): JSX.Element => {
  const [activeTab, setActiveTab] = useState(0);

  return (
    <div className={styles.wrapper}>
      <Header
        title=""Divider""
        description=""Компонент Divider - это визуальный элемент, используемый для разделения содержимого на разных частях пользовательского интерфейса, таких как списки, сетки или разделы на странице.""
        isStable
        codeLink=""https://github.com/nlmk-group/ds-2.0/tree/main/src/components/Divider""
        figmaLink={FIGMA_LINK}
      />

      <div className={styles.tabs}>
        <Tabs>
          <Tabs.Tab label=""Разработчику"" active={0 === Number(activeTab)} onClick={() => setActiveTab(0)} />
          {/* <Tabs.Tab label=""Дизайнеру"" active={1 === Number(activeTab)} onClick={() => setActiveTab(1)} /> */}
          <Tabs.Tab label=""Тестирование"" active={2 === Number(activeTab)} onClick={() => setActiveTab(2)} />
        </Tabs>
      </div>

      {Number(activeTab) == 0 && (
        <>
          <Editor
            description={DEFAULT_DIVIDER}
            code={`import { Divider } from '@nlmk/ds-2.0';

export default  App = () => (
  <div style=${style}>
    <Divider>
      <span style={{color: ""var(--text-grey-900)""}}>
        Divider по умолчанию
      </span>
    </Divider>
  </div>
)
`}
          />

          <Editor
            description={DASHED_DIVIDER}
            code={`import { Divider } from '@nlmk/ds-2.0';

export default  App = () => (
  <div style=${style}>
    <Divider dashed>
      <span style={{color: ""var(--text-grey-900)""}}>
        Divider по умолчанию
      </span>
    </Divider>
  </div>
)
`}
          />

          <Editor
            description={DIVIDER_ORIENTATION}
            code={`import { Divider } from '@nlmk/ds-2.0';

export default  App = () => (
  <div style=${style}>
    <Divider orientation=""left"">
      <span style={{color: ""var(--text-grey-900)""}}>
        Вариант ориентации Divider влево
      </span>
    </Divider>
    <br/>
    <Divider orientation=""right"">
      <span style={{color: ""var(--text-grey-900)""}}>
        Вариант ориентации Divider вправо
      </span>
    </Divider>
    <br/>
    <Divider orientation=""center"">
      <span style={{color: ""var(--text-grey-900)""}}>
        Вариант ориентации Divider по середине
      </span>
    </Divider>
  </div>
)
`}
          />

          <Editor
            description={DIVIDER_ORIENTATION_CUSTOM_SPACE}
            code={`import { Divider } from '@nlmk/ds-2.0';

export default  App = () => (
  <div style=${style}>
    <Divider
      orientation=""left""
      orientationSpace={68}
    >
      <span style={{color: ""var(--text-grey-900)""}}>
        Кастомизация размера пространства
      </span>
    </Divider>
    <br/>
    <Divider
      orientation=""right""
      orientationSpace={72}
    >
      <span style={{color: ""var(--text-grey-900)""}}>
        Кастомизация размера пространства
      </span>
    </Divider>
  </div>
)
`}
          />

          <Editor
            description={VERTICAL_DIVIDER}
            code={`import { Divider } from '@nlmk/ds-2.0';

export default  App = () => (
  <div style=${style}>
    <div
      style={{
        display: 'flex'
      }}
    >
      <span className=""_divider-content_12xmv_74"" style={{color: ""var(--text-grey-900)""}}>
        Текст №1
      </span>
      <Divider type=""vertical"" />
      <span className=""_divider-content_12xmv_74"" style={{color: ""var(--text-grey-900)""}}>
        Текст №2
      </span>
      <Divider
        dashed
        type=""vertical""
      />
      <span className=""_divider-content_12xmv_74"" style={{color: ""var(--text-grey-900)""}}>
        Текст №3
      </span>
    </div>
  </div>
)
`}
          />

          <Editor
            height={400}
            description={DIVIDER_TYPE}
            code={`import { Divider, Button, Icon, IconChemical24 } from '@nlmk/ds-2.0';

export default  App = () =>(
  <div style=${styleVariations}>
    <Divider dashed />
    <div
      style={{
        display: 'flex'
      }}
    >
      <span className=""_divider-content_12xmv_74"" style={{color: ""var(--text-grey-900)""}}>
        Текст №1
      </span>
      <Divider type=""vertical"" />
      <span className=""_divider-content_12xmv_74"" style={{color: ""var(--text-grey-900)""}}>
        Текст №2
      </span>
      <Divider
        dashed
        type=""vertical""
      />
      <span className=""_divider-content_12xmv_74"" style={{color: ""var(--text-grey-900)""}}>
        Текст №3
      </span>
    </div>
    <Divider dashed>
      <Button>
        <span>
          Нажать
        </span>
      </Button>
    </Divider>
    <div
      style={{
        display: 'flex'
      }}
    >
      <div
        style={{
          alignItems: 'center',
          display: 'flex'
        }}
      >
        <span className=""_divider-content_12xmv_74"" style={{color: ""var(--text-grey-900)""}}>
          Текст №1
        </span>
      </div>
      <Divider type=""vertical"" />
      <Button variant=""secondary"">
        <span>
          Нажать
        </span>
      </Button>
      <Divider
        dashed
        type=""vertical""
      />
      <Button fill=""clear"">
        <IconChemical24 />
      </Button>
    </div>
    <Divider orientation=""left"">
      <div
        style={{
          alignItems: 'center',
          display: 'flex',
          gap: '8px'
        }}
      >
        <span className=""_divider-content_12xmv_74"" style={{color: ""var(--text-grey-900)""}}>
          Экспертиза
        </span>
        <Button fill=""clear"">
          <IconChemical24 />
        </Button>
      </div>
    </Divider>
    <Divider dashed />
  </div>
)
`}
          />

          <Properties argsTypes={argsTypes} />
        </>
      )}
      {Number(activeTab) == 1 && <FigmaEmbed url={FIGMA_LINK} />}
      {Number(activeTab) == 2 && <Tests componentName=""Divider"" />}
    </div>
  );
};

export default Stories;
"
Types for component Divider _stories text.ts,"export const DEFAULT_DIVIDER = 'Divider по умолчанию';
export const DASHED_DIVIDER = 'Divider с пунктирной линией';
export const DIVIDER_ORIENTATION = 'Варианты ориентаций Divider';
export const DIVIDER_ORIENTATION_CUSTOM_SPACE = 'Кастомизация размера пространства';
export const DIVIDER_TYPE = 'Типы Divider';
export const VERTICAL_DIVIDER = 'Вертикальный Divider';
export const DIVIDER_CUSTOM_CLASSNAME = 'Divider с кастомным классом';
"
Styles for component Divider Divider.module.scss,".wrapper {
  height: inherit;
  display: flex;
  gap: var(--16-space);
  color: var(--text-grey-900);
}

.child-wrapper {
  display: flex;
  align-items: center;
}

.border-horizontal-wrapper {
  flex: 1;
  margin: auto 0;
}

.border-horizontal-small {
  flex: unset;
  width: var(--24-size);
}

.border-horizontal {
  border-bottom-width: var(--1-size);
  border-bottom-color: var(--steel-50);
}

.border-solid {
  border-bottom-style: solid;
}

.border-dashed {
  border-bottom-style: dashed;
}

.small-border {
  width: var(--24-size);
  flex: unset;
}

.vertical-wrapper {
  height: inherit;
  min-height: var(--24-size);
  margin: 0;
  display: flex;
}

.border-vertical {
  border-right-width: var(--1-size);
  border-right-color: var(--steel-50);
}

.border-vertical-solid {
  border-right-style: solid;
}

.border-vertical-dashed {
  border-right-style: dashed;
}
"
Types for component Divider _stories argsTypes.ts,"import { orientationMapping, typeMapping } from '../enums';

const argsTypes = {
  children: {
    description: 'Содержимое, которое будет отображаться на разделителе, например текст или иконка.',
    control: { type: 'ReactNode' }
  },
  className: {
    description: 'Пользовательский класс для настройки стилей Divider.',
    control: { type: 'string' }
  },
  dashed: {
    description: 'Параметр, определяющий, будет ли граница пунктирной или сплошной.',
    control: { type: 'boolean' },
    table: {
      defaultValue: {
        summary: 'false'
      }
    }
  },
  orientation: {
    description: 'Определяет позицию текста или иконки относительно границы (left, center, right).',
    table: {
      defaultValue: {
        summary: orientationMapping.center
      },
      type: {
        summary: 'string'
      }
    },
    options: Object.values(orientationMapping),
    control: { type: 'select' }
  },
  orientationSpace: {
    description: `Пользовательское значение для ширины пространства слева или справа от содержимого перед границей. Для правильной работы свойства, orientation должен быть ${orientationMapping.left} или ${orientationMapping.right}. Значение в пикселях.`,
    control: { type: 'number' }
  },
  type: {
    description:
      'Тип разделителя, определяет, будет ли разделитель горизонтальным или вертикальным. Вертикальный разделитель нельзя использовать в контейнере блочного стиля, иначе сам разделитель отображаться не будет. Приемлимые стили для вертикального контейнера: inline, inline-block, flex и т.д.',
    table: {
      defaultValue: {
        summary: typeMapping.horizontal
      },
      type: {
        summary: 'string'
      }
    },
    options: Object.values(typeMapping),
    control: { type: 'select' }
  }
};

export default argsTypes;
"
Types for component Divider types.ts,"import { PropsWithChildren } from 'react';

export interface IDivider extends PropsWithChildren<any> {
  className?: string;
  dashed?: boolean;
  orientation?: string;
  orientationSpace?: number;
  type?: string;
}

export interface IHorizontalBorder {
  isSmall: boolean;
  dashed?: boolean;
  orientation?: string;
  orientationSpace?: number;
}

export interface IVertical {
  className?: string;
  dashed?: boolean;
}
"
Codes for component Divider Vertical.tsx,"import React, { FC } from 'react';

import { clsx } from 'clsx';

import { IVertical } from './types';

import styles from './Divider.module.scss';

const Vertical: FC<IVertical> = ({ className, dashed = false }) => {
  return (
    <div data-testid=""VERTICAL_DIVIDER"" className={clsx(className, styles['vertical-wrapper'])}>
      <div
        data-testid=""VERTICAL_DIVIDER_BORDER""
        className={clsx(
          styles['border-vertical'],
          dashed ? styles['border-vertical-dashed'] : styles['border-vertical-solid']
        )}
      />
    </div>
  );
};

export default Vertical;
"
Types for component DragAndDrop constants.ts,"export const fileTypes = {
  file: `.doc,.docx,application/msword,application/vnd.openxmlformats-officedocument.wordprocessingml.document, application/msword, application/vnd.ms-excel, application/vnd.ms-powerpoint,
    text/plain, application/pdf`,
  image: 'image/*',
  video: 'video/*'
};

export const dragNDropTitle = 'Drag&Drop files here';

export const dragNDropDescription = 'File requirements or';

export const dragNDropBtnLabel = 'Click to Upload';

export const smallTextUploadText = 'Uploading...';

export const cancelUploadLabel = 'Cancel Uploading';
"
Codes for component DragAndDrop index.tsx,"import React, { ChangeEvent, DragEvent, FC, useId, useRef, useState } from 'react';

import { sizesMapping } from '@components/declaration';
import { clsx } from 'clsx';

import { IDragAndDrop } from './types';

import styles from './DragAndDrop.module.scss';

import { dragNDropBtnLabel, dragNDropDescription, dragNDropTitle, fileTypes } from './constants';
import DefaultDragAndDrop from './DefaultDragAndDrop';
import { fileTypeMapping, statusColorMapping } from './enums';
import SmallIcon from './SmallIcon';
import SmallText from './SmallText';

const DragAndDrop: FC<IDragAndDrop> = ({
  children = null,
  className,
  title = dragNDropTitle,
  description = dragNDropDescription,
  btnLabel = dragNDropBtnLabel,
  fileType = fileTypeMapping.image,
  statusColor = statusColorMapping.default,
  size = sizesMapping.l,
  withIcon = true,
  customIcon = null,
  multiple = true,
  loading = false,
  percentUpload = 0,
  smallText = false,
  smallIcon = false,
  disabled = false,
  accept = undefined,
  onUpload,
  cancelUpload = null
}) => {
  const inputId = useId();
  // drag state
  const [dragActive, setDragActive] = useState<boolean>(false);
  // ref
  const inputRef = useRef<HTMLInputElement>(null);
  // handle drag events
  const handleDrag = (e: DragEvent<HTMLDivElement> | DragEvent<HTMLFormElement>) => {
    e.preventDefault();
    e.stopPropagation();
    if (e.type === 'dragenter' || e.type === 'dragover') {
      setDragActive(true);
    } else if (e.type === 'dragleave') {
      setDragActive(false);
    }
  };

  // triggers when file is dropped
  const handleDrop = (e: DragEvent<HTMLInputElement>) => {
    e.preventDefault();
    e.stopPropagation();
    setDragActive(false);
    if (e.dataTransfer.files && e.dataTransfer.files[0]) {
      onUpload(e.dataTransfer.files);
    }
  };

  // triggers when file is selected with click
  const handleChange = (e: ChangeEvent<HTMLInputElement>) => {
    e.preventDefault();
    if (e.target.files && e.target.files[0]) {
      onUpload(e.target.files);
    }
  };

  // triggers the input when the button is clicked
  const onButtonClick = () => {
    if (loading && cancelUpload !== null) {
      cancelUpload();
    } else {
      if (inputRef.current !== null) inputRef.current.click();
    }
  };

  return (
    <form
      style={{ pointerEvents: loading ? 'none' : 'all' }}
      className={clsx(styles['form-file-upload'], disabled && styles.disabled, className)}
      onDragEnter={handleDrag}
      onSubmit={e => e.preventDefault()}
      onClick={onButtonClick}
    >
      <input
        ref={inputRef}
        type=""file""
        id={`input-file-upload-${inputId}`}
        className={styles['input-file-upload']}
        multiple={multiple}
        accept={accept || fileTypes[fileType]}
        onChange={handleChange}
      />
      <label
        className={clsx(
          styles['label-file-upload'],
          loading ? styles['label-loading'] : styles[`label-${statusColor}`],
          smallIcon && statusColorMapping.default && styles['label-s-default'],
          dragActive && styles[`label-${statusColorMapping.info}`],
          smallText ? styles[`label-file-upload-${sizesMapping.s}`] : styles[`label-file-upload-${size}`],
          smallIcon && styles['label-file-upload-small-icon']
        )}
        htmlFor={`input-file-upload-${inputId}`}
      >
        {children !== null && children}
        {children === null && smallText && !smallIcon && (
          <SmallText
            loading={loading}
            percentUpload={percentUpload}
            statusColor={statusColor}
            title={title}
            disabled={disabled}
            cancelUpload={cancelUpload || undefined}
          />
        )}
        {children === null && smallIcon && !smallText && (
          <SmallIcon
            loading={loading}
            percentUpload={percentUpload}
            statusColor={statusColor}
            customIcon={customIcon}
          />
        )}
        {children === null && !smallText && !smallIcon && (
          <DefaultDragAndDrop
            disabled={disabled}
            loading={loading}
            size={size}
            percentUpload={percentUpload}
            withIcon={withIcon}
            customIcon={customIcon}
            fileType={fileType}
            title={title}
            statusColor={statusColor}
            description={description}
            btnLabel={btnLabel}
          />
        )}
      </label>
      {dragActive && (
        <div
          className={styles['drag-file-element']}
          onDragEnter={handleDrag}
          onDragLeave={handleDrag}
          onDragOver={handleDrag}
          onDrop={handleDrop}
        />
      )}
    </form>
  );
};

export default DragAndDrop;
"
Types for component DragAndDrop _stories argsTypes.ts,"import { sizesMapping } from '@components/declaration';

import { dragNDropBtnLabel, dragNDropDescription, dragNDropTitle } from '../constants';
import { fileTypeMapping, statusColorMapping } from '../enums';

export const argsTypes = {
  className: {
    description: 'В компонент можно передать альтернативные стили',
    control: { type: 'string' }
  },
  children: {
    description: 'DragAndDrop может иметь собвственный контекст.',
    control: { type: 'ReactNode' }
  },
  title: {
    description:
      'Заголовок компонента. Если пустая строка, то заголовок отображаться не будет. Так же можно передать компонент типа ReactNode.',
    table: {
      defaultValue: {
        summary: dragNDropTitle
      },
      type: {
        summary: 'string'
      }
    },
    control: { type: 'text' }
  },
  description: {
    description:
      'Описание компонента. Если пустая строка, то описание отображаться не будет. Можно передать компонент типа ReactNode.',
    table: {
      defaultValue: {
        summary: dragNDropDescription
      },
      type: {
        summary: 'string'
      }
    },
    control: { type: 'text' }
  },
  btnLabel: {
    description:
      'Название кнопки. Если пустая строка, то кнопка отображаться не будет.',
    table: {
      defaultValue: {
        summary: dragNDropBtnLabel
      },
      type: {
        summary: 'string'
      }
    },
    control: { type: 'text' }
  },
  fileType: {
    description: 'Необязательное свойство. Тип расширения загружаемого файла.',
    table: {
      defaultValue: {
        summary: fileTypeMapping.image
      },
      type: {
        summary: Object.values(fileTypeMapping).join(' | ')
      }
    },
    options: Object.values(fileTypeMapping),
    control: { type: 'select' }
  },
  statusColor: {
    description: 'Необязательное свойство. Цвета заливки компонента.',
    table: {
      defaultValue: {
        summary: statusColorMapping.default
      },
      type: {
        summary: Object.values(statusColorMapping).join(' | ')
      }
    },
    options: Object.values(statusColorMapping),
    control: { type: 'select' }
  },
  size: {
    description: 'Необязательное свойство. Размер компонента.',
    table: {
      defaultValue: {
        summary: sizesMapping.l
      },
      type: {
        summary: Object.values(sizesMapping).join(' | ')
      }
    },
    options: Object.values(sizesMapping),
    control: { type: 'select' }
  },
  withIcon: {
    description: 'Необязательное свойство. Отображать ли иконку.',
    table: {
      defaultValue: {
        summary: true
      },
      type: {
        summary: 'boolean'
      }
    },
    control: { type: 'boolean' }
  },
  customIcon: {
    description: 'Необязательное свойство. Кастомная иконка.',
    control: { type: 'ReactNode' }
  },
  multiple: {
    description: 'Необязательное свойство. Можно ли компоненту загружать более одного файла за раз.',
    table: {
      defaultValue: {
        summary: true
      },
      type: {
        summary: 'boolean'
      }
    },
    control: { type: 'boolean' }
  },
  loading: {
    description: 'Необязательное свойство. Показать статус процесса загрузки файла.',
    table: {
      defaultValue: {
        summary: true
      },
      type: {
        summary: 'boolean'
      }
    },
    control: { type: 'boolean' }
  },
  percentUpload: {
    description: 'Необязательное свойство. Показать процент процесса загрузки файла.',
    table: {
      defaultValue: {
        summary: 0
      },
      type: {
        summary: 'number'
      }
    },
    control: { type: 'number' }
  },
  smallText: {
    description: 'Необязательное свойство. Показать DragAndDrop только малого размера с текстом.',
    table: {
      defaultValue: {
        summary: true
      },
      type: {
        summary: 'boolean'
      }
    },
    control: { type: 'boolean' }
  },
  smallIcon: {
    description: 'Необязательное свойство. Показать DragAndDrop только малого размера с иконкой.',
    table: {
      defaultValue: {
        summary: true
      },
      type: {
        summary: 'boolean'
      }
    },
    control: { type: 'boolean' }
  },
  disabled: {
    description: 'Необязательное свойство. Условие блокировки доступа к элементам компонента.',
    table: {
      defaultValue: {
        summary: false
      },
      type: {
        summary: 'boolean'
      }
    },
    control: { type: 'boolean' }
  },
  accept: {
    description:
      'Необязательное свойство. Можно указать какие типы файлов принимать. Если ввести символ ""*"", компонент будет принимать файлы любого типа.',
    control: { type: 'text' }
  },
  onUpload: {
    description: 'Функция callback для работы с DragAndDrop.'
  },
  cancelUpload: {
    description:
      'Необязательная функция. Функция отмены загрузки файлов. Будет активна только в момент загрузки файлов (loading = true).'
  }
};

export default argsTypes;
"
Types for component DragAndDrop enums.ts,"/**
 * @type {fileTypeMapping} orientationMapping
 * @type {statusColorMapping} statusColorMapping
 * @type {iconTypeMapping} iconTypeMapping
 * @type {titleSizeHelperMapping} titleSizeHelperMapping
 * @type {descriptionSizeHelperMapping} descriptionSizeHelperMapping
 * @type {spinnerSizeHelperMapping} spinnerSizeHelperMapping
 * @type {percentageSizeHelperMapping} percentageSizeHelperMapping
 * @type {spinnerWidthHelperMapping} spinnerWidthHelperMapping
 */

export enum fileTypeMapping {
  file = 'file',
  image = 'image',
  video = 'video'
}

export enum statusColorMapping {
  default = 'default',
  info = 'info',
  error = 'error',
  warning = 'warning'
}

export enum iconTypeMapping {
  file = 'IconUploadFile32',
  image = 'IconUploadImage32',
  video = 'IconUploadVideo32'
}

export enum titleSizeHelperMapping {
  l = 'Heading3',
  m = 'Heading4',
  s = 'Heading4'
}

export enum descriptionSizeHelperMapping {
  l = 'Subheading3',
  m = 'Body1',
  s = 'Caption'
}

export enum spinnerSizeHelperMapping {
  l = 'xxl',
  m = 'xl',
  s = 'l'
}

export enum percentageSizeHelperMapping {
  l = 'Heading3',
  m = 'Body1-Medium',
  s = 'Caption-Bold'
}

export enum spinnerWidthHelperMapping {
  l = '96px',
  m = '56px',
  s = '40px'
}
"
Codes for component DragAndDrop UploadIcon.tsx,"import React, { FC } from 'react';

import { Spinner, Typography } from '@components/index';

import { IUploadHelper } from './types';

import styles from './DragAndDrop.module.scss';

import { percentageSizeHelperMapping, spinnerSizeHelperMapping, spinnerWidthHelperMapping } from './enums';
import clsx from 'clsx';

const UploadIcon: FC<IUploadHelper> = ({
  smallText = false,
  smallIcon = false,
  showSpinner = true,
  size,
  percentUpload
}) => {
  const handleBoxSize = (): string[] => {
    let height: string = spinnerWidthHelperMapping[size];
    let width: string = spinnerWidthHelperMapping[size];

    if (smallText) {
      height = 'unset';
      width = '51px';
    }

    if (smallIcon) {
      height = 'var(--40-size)';
      width = '42px';
    }

    return [height, width];
  };

  const wrapperSize = handleBoxSize();

  return (
    <div
      className={clsx(
        (!smallText && !smallIcon) && styles['loader-wrapper'],
        smallText && styles['loader-wrapper-small-text']
      )}
      style={{
        height: wrapperSize[0],
        width: wrapperSize[1]
      }}
    >
      {showSpinner && (
        <div className={styles['spinner-position-helper']}>
          <Spinner size={spinnerSizeHelperMapping[size]} />
        </div>
      )}
      {percentUpload > 0 && (
        <div className={styles['percent-wrapper']} data-testid=""PERCENT"">
          <Typography variant={smallIcon ? 'Heading4' : percentageSizeHelperMapping[size]}>{percentUpload}%</Typography>
        </div>
      )}
    </div>
  );
};

export default UploadIcon;
"
Types for component index.ts,"/** Компоненты */
export { default as AttachFiles } from './AttachFiles';
export { default as File } from './AttachFiles/subcomponents/File';
export { default as Accordion } from './Accordion';
export { default as Alert } from './Alert';
export { default as Avatar } from './Avatar';
export { default as Input } from './Input';
export { default as ErrorPage } from './ErrorPage';
export { default as List } from './List';
export { default as Link } from './Link';
export { default as ListItem } from './ListItem';
export { default as Select } from './Select';
export { default as PseudoInput } from './PseudoInput';
export { default as Radio } from './Radio';
export { default as Box } from './Box';
export { default as Grid } from './Grid';
export { default as Button } from './Button';
export { default as Badge } from './Badge';
export { default as Breadcrumbs } from './Breadcrumbs';
export { default as Card } from './Card';
export { default as Chip } from './Chip';
export { default as DragAndDrop } from './DragAndDrop';
export { default as Checkbox } from './Checkbox';
export { default as Typography } from './Typography';
export { default as Tooltip } from './Tooltip';
export { default as Icon } from './Icon';
export { default as IconContainer } from './Icon/subcomponent/IconContainer';
export { default as ThemeSwitcher } from './ThemeSwitcher';
export { default as DatePicker } from './DatePicker';
export { default as DateTime } from './DateTime';
export { default as InputRange } from './InputRange';
export { default as InputSlider } from './InputSlider';
export { default as SkeletonLoader } from './SkeletonLoader';
export { default as Spinner } from './Spinner';
export { default as Tabs } from './Tabs';
export { default as ClickAwayListener } from './ClickAwayListener';
export { default as ProgressBar } from './ProgressBar';
export { default as Divider } from './Divider';
export { default as Snackbar } from './Snackbar';
export { default as Header } from './Header';
export { default as Switch } from './Switch';
export { default as TimePicker } from './TimePicker';
export { default as ToggleButtonGroup } from './ToggleButtonGroup';
export { default as SegmentButtonGroup } from './SegmentButtonGroup';
export { default as ImagePicture } from './ImagePicture';
export { default as Modal } from './Modal';
export { default as Sidebar } from './Sidebar';
export { default as SlideToggle } from './SlideToggle';
export { default as MenuItem } from './Sidebar';
export { default as SubmenuItem } from './Sidebar';
export { default as Scrollbar } from './Scrollbar';
export { default as Drawer } from './Drawer';
export { default as Dropdown } from './Dropdown';
export { default as DropdownMenuItem } from './Dropdown/subcomponents/DropdownMenuItem';
export { default as SimpleSelect } from './SimpleSelect';
export { default as OptionItem } from './SimpleSelect/subcomponents/OptionItem';
export { default as Stepper } from './Stepper';
export * from './ThemeSwitcher';
export * from './Icon/IconsDirectory';

/** Хуки */
export * from './Theme/hooks';
"
Types for component DragAndDrop types.ts,"import { ChangeEvent, PropsWithChildren, ReactNode } from 'react';

import { sizesMapping } from '@components/declaration';

import { fileTypeMapping, statusColorMapping } from './enums';

export interface IFile extends PropsWithChildren<any> {
  children?: JSX.Element;
  title?: string;
  label?: string;
  checked?: boolean;
  removed?: boolean;
  commented?: boolean;
  saved?: boolean;
  addFile?: boolean;
  onCheckedChange?: (event: ChangeEvent<HTMLInputElement>) => void;
  removedOnClick?: () => void;
  commentedOnClick?: () => void;
  savedOnClick?: () => void;
  addFileOnClick?: () => void;
  description?: string;
  empty?: boolean;
  checkedValue?: boolean;
  indeterminate?: boolean;
  longTitle?: boolean;
  tick?: boolean;
}

export type TFileType = `${fileTypeMapping}`;
export type TStatusColorType = `${statusColorMapping}`;
export type TSizeType = `${sizesMapping}`;

export interface IDragAndDrop
  extends PropsWithChildren<{
    children?: ReactNode;
  }> {
  className?: string;
  title?: string | ReactNode;
  description?: string | ReactNode;
  btnLabel?: string;
  fileType?: TFileType;
  statusColor?: TStatusColorType;
  withIcon?: boolean;
  customIcon?: JSX.Element;
  size?: TSizeType;
  multiple?: boolean;
  loading?: boolean;
  percentUpload?: number;
  smallText?: boolean;
  smallIcon?: boolean;
  disabled?: boolean;
  accept?: string;
  onUpload: (a: FileList) => void;
  cancelUpload?: () => void;
}

export interface IUploadHelper {
  smallText?: boolean;
  smallIcon?: boolean;
  showSpinner?: boolean;
  size: TSizeType;
  percentUpload: number;
}

export interface ISmallText {
  title: string | ReactNode;
  loading: boolean;
  percentUpload: number;
  statusColor: TStatusColorType;
  disabled: boolean;
  cancelUpload?: () => void;
}

export interface IDefaultDnD {
  disabled: boolean;
  loading: boolean;
  size: TSizeType;
  percentUpload: number;
  withIcon: boolean;
  customIcon: JSX.Element | null;
  fileType: TFileType;
  title: string | ReactNode;
  statusColor: TStatusColorType;
  description: string | ReactNode;
  btnLabel: string;
}

export interface ISmallIcon {
  loading: boolean;
  percentUpload: number;
  statusColor: TStatusColorType;
  customIcon: JSX.Element | null;
}
"
Codes for component DragAndDrop SmallIcon.tsx,"import React, { FC } from 'react';

import { sizesMapping } from '@components/declaration';
import { clsx } from 'clsx';

import { ISmallIcon } from './types';

import styles from './DragAndDrop.module.scss';

import {
  Button,
  IconAddPlusOutlined24,
  IconAttentionWarningAlertErrorOutlined24,
  IconAttentionWarningAlertOutlined24
} from '..';
import { statusColorMapping } from './enums';
import UploadIcon from './UploadIcon';

const SmallIcon: FC<ISmallIcon> = ({ loading, percentUpload, statusColor, customIcon }) => {
  const iconHelper = () => {
    switch (statusColor) {
      case statusColorMapping.error:
        return <Button variant=""grey"" fill=""clear"" iconButton={<IconAttentionWarningAlertErrorOutlined24 />} />;
      case statusColorMapping.info:
        return <Button variant=""primary"" fill=""clear"" iconButton={<IconAddPlusOutlined24 />} />;
      case statusColorMapping.warning:
        return (
          <Button
            variant=""grey""
            fill=""clear""
            className={styles['small-warning-icon']}
            iconButton={<IconAttentionWarningAlertOutlined24 />}
          />
        );
      default:
        return <Button variant=""grey"" fill=""clear"" iconButton={<IconAddPlusOutlined24 />} />;
    }
  };

  return (
    <div
      className={clsx(styles['icon-s'], styles['small-icon-margin'])}
      style={{ height: 'var(--24-size)', display: 'flex', alignItems: 'center' }}
    >
      {loading ? (
        <UploadIcon smallIcon showSpinner={false} size={sizesMapping.m} percentUpload={percentUpload} />
      ) : (
        customIcon || iconHelper()
      )}
    </div>
  );
};

export default SmallIcon;
"
Styles for component DragAndDrop DragAndDrop.module.scss,"@mixin height-width-helper($val) {
  height: $val;
  width: $val;
}

@mixin bg-border-icon-helper($bw, $bc, $bg, $ic) {
  border-width: $bw;
  border-color: $bc;
  background-color: $bg;

  path {
    fill: $ic;
  }
}

@mixin title-helper($cl, $hv) {
  color: $cl;
  transition: 0.5s;
  cursor: pointer;
  &:hover {
    color: $hv;
  }
}

@mixin position-center {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
}

.form-file-upload {
  text-align: center;
  position: relative;
}

.input-file-upload {
  display: none;
}

.label-file-upload {
  cursor: pointer;
  padding: var(--16-space) var(--24-space);
  display: flex;
  align-items: center;
  justify-content: center;
  border-radius: var(--4-radius);
  border-style: dashed;
  transition: 0.5s;
}

.label-file-upload-l {
  padding: var(--32-space) var(--48-space);
}

.label-file-upload-m {
  padding: var(--16-space) var(--24-space);
}

.label-file-upload-s {
  padding: var(--16-space);

}

.label-file-upload-small-icon {
  padding: var(--8-space);
  height: var(--56-size);
  width: var(--64-size);
}

.label-loading {
  border-color: var(--ac-drag-drop-uploading-stroke)!important;
  background-color: var(--ac-drag-drop-uploading-bg)!important;
}

.label-s-default {
  @include bg-border-icon-helper(
    var(--1-border),
    var(--ac-drag-drop-default-stroke),
    auto,
    auto
  );
}

.label-default {
  @include bg-border-icon-helper(
    var(--1-border),
    var(--ac-drag-drop-default-stroke),
    transparent,
    var(--ac-drag-drop-default-icon)
  );

  &:hover {
    @include bg-border-icon-helper(
      var(--1-border),
      var(--ac-drag-drop-hover-stroke),
      var(--ac-drag-drop-hover-bg),
      var(--ac-drag-drop-hover-icon)
    );
  }
}

.label-info {
  @include bg-border-icon-helper(
    var(--2-border),
    var(--ac-drag-drop-dragging-stroke),
    var(--ac-drag-drop-dragging-bg),
    var(--ac-drag-drop-dragging-icon)
  );
}

.label-error {
  @include bg-border-icon-helper(
    var(--2-border),
    var(--ac-drag-drop-error-stroke),
    var(--ac-drag-drop-error-bg),
    var(--ac-drag-drop-error-icon)
  );
}

.label-warning {
  @include bg-border-icon-helper(
    var(--2-border),
    var(--ac-drag-drop-warning-stroke),
    var(--ac-drag-drop-warning-bg),
    var(--ac-drag-drop-warning-icon)
  );
}

.drag-file-element {
  position: absolute;
  width: 100%;
  height: 100%;
  border-radius: 1rem;
  top: 0px;
  right: 0px;
  bottom: 0px;
  left: 0px;
}

.icon-wrapper {
  width: 100%;
  display: flex;
  justify-content: center;

  path {
    transition: 0.5s;
  }
}

.icon-l {
  height: calc(var(--32-size) * 3);
  margin-bottom: var(--24-space);
  & > div {
    @include height-width-helper(calc(var(--32-size) * 3));
    & > svg {
      @include height-width-helper(calc(var(--32-size) * 3));
    }
  }
}

.icon-m {
  height: var(--56-size);
  margin-bottom: var(--16-space);
  & > div {
    @include height-width-helper(var(--56-size));
    & > svg {
      @include height-width-helper(var(--56-size));
    }
  }
}

.icon-s {
  height: var(--40-size);
  margin-bottom: var(--8-space);
}

.text-wrapper {
  display: flex;
  justify-content: center;
  flex-direction: column;
  gap: var(--8-space);
}

.title-loading {
  @include title-helper(var(--ac-drag-drop-uploading-text-title), var(--ac-drag-drop-hover-text-title));
}

.title-default {
  @include title-helper(var(--ac-drag-drop-default-text-title), var(--ac-drag-drop-hover-text-title));
}

.title-info {
  @include title-helper(var(--ac-drag-drop-dragging-text-title), var(--ac-drag-drop-hover-text-title));
}

.title-error {
  @include title-helper(var(--ac-drag-drop-error-text-title), var(--ac-drag-drop-hover-text-title));
}

.title-warning {
  @include title-helper(var(--ac-drag-drop-warning-text-title), var(--ac-drag-drop-hover-text-title));
}

.small-title-default {
  @include title-helper(var(--ac-drag-drop-default-text-only), var(--ac-drag-drop-hover-text-only));
}

.small-title-info {
  @include title-helper(var(--ac-drag-drop-dragging-text-only), var(--ac-drag-drop-dragging-text-only));
}

.small-title-error {
  @include title-helper(var(--ac-drag-drop-error-text-only), var(--ac-drag-drop-error-text-only));
}

.small-title-warning {
  @include title-helper(var(--ac-drag-drop-warning-text-only), var(--ac-drag-drop-warning-text-only));
}

.text-default {
  color: var(--ac-drag-drop-default-text-details);
  &:hover {
    color: var(--ac-drag-drop-hover-text-details);
  }
}

.text-waring {
  color: var(--ac-drag-drop-warning-text-details);
  &:hover {
    color: var();
  }
}

.text-error {
  color: var(--ac-drag-drop-error-text-details);
  &:hover {
    color: var();
  }
}

.text-info {
  color: var(--ac-drag-drop-dragging-text-details);
  &:hover {
    color: var();
  }
}

.text-loading{
  color: var(--ac-drag-drop-uploading-text-details);
  &:hover {
    color: var();
  }
}

.btn-wrapper {
  display: flex;
  justify-content: center;
}

.loader-wrapper {
  width: fit-content;
  margin: 0 auto;
  position: relative;
  margin-bottom: var(--24-space);
}

.loader-wrapper-small-text {
  width: fit-content;
  margin: 0 auto;
  position: relative;
  color: var(--ac-drag-drop-uploading-number);
}

.percent-wrapper {
  @include position-center;
  color: var(--ac-drag-drop-uploading-number);
}

.small-title-helper {
  display: flex;
  align-items: center;
  color: var(--ac-drag-drop-uploading-text-title);
}

.spinner-position-helper {
  @include position-center;
}

.disabled {
  opacity: 0.5;
  pointer-events: none;
  > * {
    pointer-events: none;
  }
}

.small-icon-margin {
  margin-bottom: unset;
}

.custom-component-style {
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
  gap: 8px;
}

.small-warning-icon {
  path {
    fill: var(--ac-drag-drop-warning-small-icon);
  }
}
"
Codes for component DragAndDrop DefaultDragAndDrop.tsx,"import React, { FC } from 'react';
import * as ReactIs from 'react-is';

import { Button, Icon, Typography } from '@components/index';
import { clsx } from 'clsx';

import { IDefaultDnD } from './types';

import styles from './DragAndDrop.module.scss';

import { descriptionSizeHelperMapping, iconTypeMapping, statusColorMapping, titleSizeHelperMapping } from './enums';
import UploadIcon from './UploadIcon';

const DefaultDragAndDrop: FC<IDefaultDnD> = ({
  disabled,
  loading,
  size,
  percentUpload,
  withIcon,
  customIcon,
  fileType,
  title,
  statusColor,
  description,
  btnLabel
}) => {
  return (
    <div>
      {loading && <UploadIcon size={size} percentUpload={percentUpload} />}
      {!loading && withIcon && (
        <div
          data-testid={`ICON_TYPE_${iconTypeMapping[fileType]}`}
          className={clsx(styles['icon-wrapper'], styles[`icon-${size}`])}
        >
          {customIcon || <Icon name={iconTypeMapping[fileType]} />}
        </div>
      )}

      <div className={styles['text-wrapper']}>
        {ReactIs.typeOf(title) === ReactIs.Element ? (
          <>{title}</>
        ) : (
          <Typography
            variant={titleSizeHelperMapping[size]}
            className={clsx(styles[`title-${statusColor}`], loading && styles['title-loading'])}
          >
            {title}
          </Typography>
        )}
        {ReactIs.typeOf(description) === ReactIs.Element ? (
          <>{description}</>
        ) : (
          <Typography
            variant={descriptionSizeHelperMapping[size]}
            className={clsx(styles[`text-${statusColor}`], loading && styles['text-loading'])}
          >
            {description}
          </Typography>
        )}
        {btnLabel.length > 0 && (
          <div className={styles['btn-wrapper']} style={{ pointerEvents: disabled ? 'none' : 'all' }}>
            <Button
              variant={
                statusColor === statusColorMapping.default || statusColor === statusColorMapping.info
                  ? 'primary'
                  : 'grey'
              }
              fill=""clear""
            >
              {btnLabel}
            </Button>
          </div>
        )}
      </div>
    </div>
  );
};

export default DefaultDragAndDrop;
"
Codes for component DragAndDrop SmallText.tsx,"import React, { FC } from 'react';

import { sizesMapping } from '@components/declaration';
import { Button, IconCloseOutlined24, Typography } from '@components/index';

import { ISmallText } from './types';

import styles from './DragAndDrop.module.scss';

import UploadIcon from './UploadIcon';

const SmallText: FC<ISmallText> = ({
  title,
  loading,
  percentUpload,
  statusColor,
  disabled,
  cancelUpload = null
}) => {
  return (
    <div data-testid={`SMALL_TEXT_${statusColor}`}>
      {loading ? (
        <div style={{ display: 'flex', gap: '8px' }}>
          <UploadIcon smallText showSpinner={false} size={sizesMapping.l} percentUpload={percentUpload} />
          <Typography className={styles['small-title-helper']} variant=""Heading3"">
            {title}
          </Typography>
          {cancelUpload !== null && (
            <div style={{ pointerEvents: disabled ? 'none' : 'all' }}>
              <Button
                variant='primary'
                fill='clear'
                size='s'
                iconButton={<IconCloseOutlined24 />}
                onClick={cancelUpload}
              />
            </div>
          )}
        </div>
      ) : (
        <Typography variant=""Heading3"" className={styles[`small-title-${statusColor}`]}>
          {title}
        </Typography>
      )}
    </div>
  );
};

export default SmallText;
"
Codes for component DragAndDrop _stories Stories.tsx,"import React, { useState } from 'react';

import Editor from '@components/_storybook/Stories/components/Editor';
import FigmaEmbed from '@components/_storybook/Stories/components/FigmaEmbed';
import Header from '@components/_storybook/Stories/components/Header';
import Properties from '@components/_storybook/Stories/components/Properties';
import Tests from '@components/_storybook/Stories/components/Tests';
import '@components/_storybook/Stories/styles.css';
import { Tabs } from '@components/index';

import styles from '@components/_storybook/Stories/Stories.module.scss';

import { argsTypes } from './argsTypes';

const Stories = (): JSX.Element => {
  const [activeTab, setActiveTab] = useState(0);

  return (
    <div className={styles.wrapper}>
      <Header
        title=""DragAndDrop""
        description=""Компонент DragAndDrop представляет собой компонент ...""
        isBeta
        codeLink=""https://github.com/nlmk-group/ds-2.0/tree/main/src/components/DragAndDrop""
        figmaLink=""https://www.figma.com/file/6TeplhuWEqaYbru1WEvbcA/Treelist?node-id=228%3A38735&mode=dev""
      />

      <div className={styles.tabs}>
        <Tabs>
          <Tabs.Tab label=""Разработчику"" active={0 === Number(activeTab)} onClick={() => setActiveTab(0)} />
          {/* <Tabs.Tab label=""Дизайнеру"" active={1 === Number(activeTab)} onClick={() => setActiveTab(1)} /> */}
          <Tabs.Tab label=""Тестирование"" active={2 === Number(activeTab)} onClick={() => setActiveTab(2)} />
        </Tabs>
      </div>

      {Number(activeTab) == 0 && (
        <>
          <Editor
            height={400}
            description=""Компонент DragAndDrop разработан в разных вариантах: успешным, с ошибкой, с предупреждением и в качестве информационного оповещения. Для собственных вариантов используйте className.""
            code={`import { DragAndDrop } from '@nlmk/ds-2.0'

export default  App = () => (
  <DragAndDrop
    onUpload={() => {}}
    percentUpload={0}
  />
)`}
          />

          <Properties argsTypes={argsTypes} />
        </>
      )}
      {Number(activeTab) == 1 && (
        <FigmaEmbed url=""https://www.figma.com/file/6TeplhuWEqaYbru1WEvbcA/Treelist?type=design&node-id=228-38735&mode=design&t=PWYYXZVAWIcENpPX-0"" />
      )}
      {Number(activeTab) == 2 && <Tests componentName=""DragAndDrop"" />}
    </div>
  );
};

export default Stories;
"
Codes for component Drawer index.tsx,"import React, { FC, useEffect, useRef, useState } from 'react';

import { EButtonSizes } from '@components/Button/enums';
import { Button, ClickAwayListener, IconCloseOutlined24 } from '@components/index';
import clsx from 'clsx';

import { IDrawerProps } from './types';

import styles from './Drawer.module.scss';

import { EDrawerPosition } from './enums';

/**
 * Компонент Drawer для отображения боковой панели.
 * @component
 * @param {Object} props - Свойства компонента Drawer.
 * @param {boolean} props.isOpen - Состояние открытия/закрытия панели.
 * @param {() => void} props.onClose - Функция для закрытия панели.
 * @param {EDrawerPosition} [props.position=EDrawerPosition.right] - Позиция панели.
 * @param {ReactNode} props.children - Содержимое панели.
 * @param {string} [props.className] - Дополнительные CSS классы для панели.
 * @param {string} [props.overlayClassName] - Дополнительные CSS классы для оверлея.
 * @param {string} [props.width='var(--drawer-default-width)'] - Ширина панели (если позиция 'left' или 'right').
 * @param {string} [props.height='var(--drawer-default-height)'] - Высота панели (если позиция 'top' или 'bottom').
 * @param {boolean} [props.disableBackdropClick=false] - Отключает закрытие панели по клику вне её области.
 * @param {boolean} [props.isViewCloseButton=true] - Отображает кнопку закрытия.
 * @param {boolean} [props.overlay=true] - Отображает оверлей.
 * @returns {ReactElement | null} Компонент Drawer.
 */

const Drawer: FC<IDrawerProps> = ({
  isOpen,
  onClose,
  position = EDrawerPosition.right,
  className,
  overlayClassName,
  children,
  width = 'var(--drawer-default-width)',
  height = 'var(--drawer-default-height)',
  disableBackdropClick,
  isViewCloseButton = true,
  overlay = true
}) => {
  const drawerRef = useRef<HTMLDivElement>(null);
  const [isClosing, setIsClosing] = useState(false);

  useEffect(() => {
    const handleKeyDown = (e: KeyboardEvent) => {
      if (e.key === 'Escape') {
        handleClose();
      }
    };

    window.addEventListener('keydown', handleKeyDown);

    return () => {
      window.removeEventListener('keydown', handleKeyDown);
    };
  }, []);

  const handleClose = () => {
    setIsClosing(true);
    setTimeout(() => {
      setIsClosing(false);
      onClose();
    }, 300);
  };

  if (!isOpen && !isClosing) return null;

  const isHorizontal = position === EDrawerPosition.left || position === EDrawerPosition.right;

  const dynamicStyleForCloseButton = {
    right: position === EDrawerPosition.right ? `calc(${width} + 16px)` : 'auto',
    left: position === EDrawerPosition.left ? `calc(${width} + 16px)` : 'auto',
    top: position === EDrawerPosition.top ? `calc(${height} + 16px)` : 'auto',
    bottom: position === EDrawerPosition.bottom ? `calc(${height} + 16px)` : 'auto'
  };

  return (
    <div
      data-testid=""DRAWER""
      className={clsx(styles.drawerOverlay, styles[position], overlayClassName, {
        [styles.fadeOut]: isClosing,
        [styles.drawerOverlayBackdrop]: !overlay
      })}
    >
      <ClickAwayListener
        className={clsx(styles.wrapper, styles[position], {
          [styles.slideOutLeft]: isClosing && position === EDrawerPosition.left,
          [styles.slideOutRight]: isClosing && position === EDrawerPosition.right,
          [styles.slideOutTop]: isClosing && position === EDrawerPosition.top,
          [styles.slideOutBottom]: isClosing && position === EDrawerPosition.bottom
        })}
        onClickAway={() => (disableBackdropClick ? undefined : handleClose())}
      >
        <div
          ref={drawerRef}
          className={clsx(styles.drawer, styles[position], className)}
          style={isHorizontal ? { width } : { height }}
        >
          <div className={styles.drawerContent}>{children}</div>
        </div>
        {!isClosing && isViewCloseButton && (
          <div className={clsx(styles.close, styles[position])}>
            <Button
              iconButton={
                <IconCloseOutlined24
                  htmlColor={overlay ? 'var(--ac-overlay-button)' : 'var(--ac-button-black-outline-default-text)'}
                />
              }
              variant=""primary""
              fill=""clear""
              className={clsx(styles.drawerClose, styles[position])}
              onClick={handleClose}
              aria-label=""Close""
              size={EButtonSizes.s}
              style={dynamicStyleForCloseButton}
            />
          </div>
        )}
      </ClickAwayListener>
    </div>
  );
};

export default Drawer;
"
Types for component Drawer enums.ts,"export enum EDrawerPosition {
  left = 'left',
  right = 'right',
  top = 'top',
  bottom = 'bottom'
}
"
Types for component Drawer _stories argsTypes.ts,"export const argsTypes = {
  isOpen: {
    description: 'Определяет, открыт ли Drawer',
    table: {
      defaultValue: {
        summary: 'false'
      },
      type: {
        summary: 'boolean'
      }
    },
    control: { type: 'boolean' }
  },
  onClose: {
    description: 'Callback, вызываемый при закрытии Drawer',
    action: 'закрыт Drawer'
  },
  position: {
    description: 'Позиция отображения Drawer',
    table: {
      defaultValue: {
        summary: 'right'
      }
    },
    options: ['left', 'right', 'top', 'bottom'],
    control: { type: 'radio' }
  },
  className: {
    description: 'Дополнительный класс для Drawer',
    control: { type: 'text' }
  },
  overlayClassName: {
    description: 'Дополнительный класс для оверлея Drawer',
    control: { type: 'text' }
  },
  children: {
    description: 'Содержимое Drawer',
    control: { type: 'text' }
  },
  width: {
    description: 'Ширина Drawer',
    control: { type: 'text' }
  },
  height: {
    description: 'Высота Drawer',
    control: { type: 'text' }
  },
  disableBackdropClick: {
    description: 'Отключает закрытие Drawer при клике на оверлей',
    table: {
      defaultValue: {
        summary: 'false'
      },
      type: {
        summary: 'boolean'
      }
    },
    control: { type: 'boolean' }
  },
  overlay: {
    description: 'Отключает подсветку оверлея',
    table: {
      defaultValue: {
        summary: 'false'
      },
      type: {
        summary: 'boolean'
      }
    },
    control: { type: 'boolean' }
  }
};
"
Styles for component Drawer Drawer.module.scss,".drawerOverlay {
  position: fixed;
  top: 0;
  width: 100%;
  height: 100%;
  background-color: var(--ac-overlay-bg);
  display: flex;
  z-index: 1000;
  opacity: 0;
  animation: fadeIn 0.3s ease-in-out forwards;

  &Backdrop {
    background-color: transparent;
  }

  &.left {
    left: 0;
    justify-content: flex-start;
  }

  &.right {
    right: 0;
    justify-content: flex-end;
  }

  &.top {
    left: 0;
    top: 0;
  }

  &.bottom {
    left: 0;
    bottom: 0;
    top: auto;
    align-items: flex-end;
  }
}

.wrapper {
  display: flex;

  &.left {
    transform: translateX(-100%);
    animation: slideInLeft 0.3s ease-in-out forwards;

    &.slideOutLeft {
      animation: slideOutLeft 0.3s ease-in-out forwards;
    }
  }

  &.right {
    flex-direction: row-reverse;
    transform: translateX(100%);
    animation: slideInRight 0.3s ease-in-out forwards;

    &.slideOutRight {
      animation: slideOutRight 0.3s ease-in-out forwards;
    }
  }

  &.top {
    flex-direction: column;
    //height: max-content;
    transform: translateY(-100%);
    animation: slideInTop 0.3s ease-in-out forwards;

    &.slideOutTop {
      animation: slideOutTop 0.3s ease-in-out forwards;
    }
  }

  &.bottom {
    flex-direction: column-reverse;
    height: max-content;
    transform: translateY(100%);
    animation: slideInBottom 0.3s ease-in-out forwards;
    bottom: 0;
    top: auto;

    &.slideOutBottom {
      animation: slideOutBottom 0.3s ease-in-out forwards;
    }
  }

  &.left,
  &.right {
    top: 0;
    height: 100%;
  }

  &.top,
  &.bottom {
    left: 0;
    width: 100%;
    height: max-content;
  }
}

.drawer {
  background: var(--steel-10);
  padding: 32px;
  box-sizing: border-box;
}

.drawerContent {
  overflow-y: auto;

  &.left,
  &.right {
    height: 100%;
  }

  &.top,
  &.bottom {
    width: 100%;
  }
}

.close {
  position: absolute;
  display: flex;
  background: transparent;
  padding: 12px;

  &.left {
    top: 0;
    right: -56px;
  }

  &.right {
    top: 0;
    left: -56px;
  }

  &.top {
    bottom: -56px;
    right: 0;
  }

  &.bottom {
    top: -56px;
    right: 0;
  }
}

.drawerClose {
  cursor: pointer;

  &:hover {
    background: none !important;
  }
}

@keyframes fadeIn {
  0% {
    opacity: 0;
  }
  100% {
    opacity: 1;
  }
}

@keyframes slideInLeft {
  0% {
    transform: translateX(-100%);
  }
  100% {
    transform: translateX(0);
  }
}

@keyframes slideInRight {
  0% {
    transform: translateX(100%);
  }
  100% {
    transform: translateX(0);
  }
}

@keyframes slideInTop {
  0% {
    transform: translateY(-100%);
  }
  100% {
    transform: translateY(0);
  }
}

@keyframes slideInBottom {
  0% {
    transform: translateY(100%);
  }
  100% {
    transform: translateY(0);
  }
}

@keyframes slideOutLeft {
  0% {
    transform: translateX(0);
  }
  100% {
    transform: translateX(-100%);
  }
}

@keyframes slideOutRight {
  0% {
    transform: translateX(0);
  }
  100% {
    transform: translateX(100%);
  }
}

@keyframes slideOutTop {
  0% {
    transform: translateY(0);
  }
  100% {
    transform: translateY(-100%);
  }
}

@keyframes slideOutBottom {
  0% {
    transform: translateY(0);
  }
  100% {
    transform: translateY(100%);
  }
}
"
Types for component Drawer types.ts,"import React, { CSSProperties } from 'react';

import { EDrawerPosition } from './enums';

export interface IDrawerProps {
  isOpen: boolean;
  onClose: () => void;
  position?: `${EDrawerPosition}`;
  className?: string;
  overlayClassName?: string;
  children: React.ReactNode;
  width?: CSSProperties['width'];
  height?: CSSProperties['height'];
  disableBackdropClick?: boolean;
  isViewCloseButton?: boolean;
  overlay?: boolean;
}
"
Codes for component Drawer _stories Stories.tsx,"import React, { useState } from 'react';

import Editor from '@components/_storybook/Stories/components/Editor';
import FigmaEmbed from '@components/_storybook/Stories/components/FigmaEmbed';
import Header from '@components/_storybook/Stories/components/Header';
import Properties from '@components/_storybook/Stories/components/Properties';
import Tests from '@components/_storybook/Stories/components/Tests';
import { Tabs } from '@components/index';

import styles from '@components/_storybook/Stories/Stories.module.scss';

import { argsTypes } from './argsTypes';

const DrawerStories = (): JSX.Element => {
  const [activeTab, setActiveTab] = useState(0);

  const drawerDefaultCode = `import { Button, Drawer, Typography }  from '@nlmk/ds-2.0';
import { useState } from 'react';

export default  App = () => {
  const [isOpen, setIsOpen] = useState(false);

  return (
      <>
        <Button onClick={() => setIsOpen(true)}>Открыть Drawer</Button>
        <Drawer
            isOpen={isOpen}
            onClose={() => {
                setIsOpen(false);
            }}
        >
            <Typography color=""primary"">Содержимое Drawer</Typography>
        </Drawer>
      </>
  );
};
`;

  const drawerLeftCode = `import { Button, Drawer, Typography }  from '@nlmk/ds-2.0';
import { useState } from 'react';

export default  App = () => {
  const [isOpen, setIsOpen] = useState(false);

  return (
      <>
        <Button onClick={() => setIsOpen(true)}>Открыть Drawer слева</Button>
        <Drawer
            isOpen={isOpen}
            position=""left""
            onClose={() => {
                setIsOpen(false);
            }}
        >
            <Typography color=""primary"">Drawer, открывающийся слева</Typography>
        </Drawer>
      </>
  );
};
`;

  return (
    <div className={styles.wrapper}>
      <Header
        title=""Drawer""
        description=""Компонент Drawer обеспечивает отображение выдвижной панели с возможностью настройки позиции и обработки закрытия.""
        isStable
        codeLink=""https://github.com/nlmk-group/ds-2.0/tree/main/src/components/Drawer""
        figmaLink=""https://www.figma.com/file/0BGHYt5CjO71I4KhygQJD5/DS2.0-Filtering-%26-Sorting?node-id=534-67220&mode=dev""
      />

      <div className={styles.tabs}>
        <Tabs>
          <Tabs.Tab label=""Разработчику"" active={0 === Number(activeTab)} onClick={() => setActiveTab(0)} />
          {/* <Tabs.Tab label=""Дизайнеру"" active={1 === Number(activeTab)} onClick={() => setActiveTab(1)} /> */}
          <Tabs.Tab label=""Тестирование"" active={2 === Number(activeTab)} onClick={() => setActiveTab(2)} />
        </Tabs>
      </div>

      {Number(activeTab) === 0 && (
        <>
          <Editor height={350} description=""Пример базового использования Drawer."" code={drawerDefaultCode} />

          <Editor height={350} description=""Пример Drawer, открывающегося слева."" code={drawerLeftCode} />

          <Properties argsTypes={argsTypes} />
        </>
      )}
      {Number(activeTab) === 1 && (
        <FigmaEmbed url=""https://www.figma.com/file/0BGHYt5CjO71I4KhygQJD5/DS2.0-Filtering-%26-Sorting?node-id=534-67220"" />
      )}
      {Number(activeTab) === 2 && <Tests componentName=""Drawer"" />}
    </div>
  );
};

export default DrawerStories;
"
Types for component Dropdown types.ts,"import { CSSProperties, ReactNode } from 'react';

import { EButtonSizes } from '@components/Button/enums';

/**
 * Интерфейс пропсов для компонента Dropdown
 */
export interface IDropdownProps {
  /** Элементы, которые будут отображаться в меню */
  children: ReactNode;
  /** Отключает кнопку и возможность открытия меню */
  disabled?: boolean;
  /** Дополнительный класс для кнопки */
  className?: string;
  /** Размер кнопки и меню */
  size?: `${EButtonSizes}`;
  /** Содержимое кнопки */
  buttonChildren?: ReactNode;
  /** Кастомные стили меню */
  menuStyle?: CSSProperties;
}
"
Types for component Dropdown subcomponents index.ts,"export { default as DropdownMenu } from './DropdownMenu';
export { default as DropdownMenuItem } from './DropdownMenuItem';
"
Styles for component Dropdown Dropdown.module.scss,".icon-rotate {
  display: flex;
  align-items: center;
  transition: transform 0.3s ease-in-out;
  height: 24px;
  max-width: 24px;

  &-open {
    transform: rotate(180deg);
  }
}

.button {
  &:focus {
    background-color: var(--brand-sapphire-30) !important;
    color: var(--unique-bluewhite) !important;
  }
}

"
Types for component Dropdown context.ts,"import { createContext, CSSProperties, ReactNode, RefObject } from 'react';

import { EButtonSizes } from '@components/Button/enums';

interface DropdownContextProps {
  /** Флаг, указывающий, открыто ли меню */
  isOpen: boolean;
  /** Функция для установки состояния открытия/закрытия меню */
  setIsOpen: (isOpen: boolean) => void;
  /** Флаг, указывающий, отключен ли компонент */
  disabled: boolean;
  /** Содержимое кнопки */
  buttonChildren?: ReactNode;
  /** Ссылка на DOM-элемент кнопки */
  buttonRef: RefObject<HTMLButtonElement> | null;
  /** Размер компонента */
  size?: `${EButtonSizes}`;
  /** Кастомные стили меню */
  menuStyle?: CSSProperties;
}

export const DropdownContext = createContext<DropdownContextProps>({
  isOpen: false,
  setIsOpen: () => {},
  disabled: false,
  buttonChildren: undefined,
  menuStyle: undefined,
  buttonRef: null,
  size: EButtonSizes.m
});
"
Codes for component Dropdown _stories Stories.tsx,"import React, { useState } from 'react';

import Editor from '@components/_storybook/Stories/components/Editor';
import FigmaEmbed from '@components/_storybook/Stories/components/FigmaEmbed';
import Header from '@components/_storybook/Stories/components/Header';
import Properties from '@components/_storybook/Stories/components/Properties';
import Tests from '@components/_storybook/Stories/components/Tests';
import { Tabs } from '@components/index';

import styles from '@components/_storybook/Stories/Stories.module.scss';

import { argsTypes } from './argsTypes';

const DropdownStories = (): JSX.Element => {
  const [activeTab, setActiveTab] = useState(0);
  const positionsExample = `const positions = [
  { value: 'Сталь'},
  { value: 'Железо'},
  { value: 'Чугун', disabled: true},
  { value: 'Медь'},
  { value: 'Цинк'},
  { value: 'Титан'},
  { value: 'Хром'}
];`;

  const DropdownDefaultCode = `
import { Dropdown, DropdownMenuItem, Typography } from '@nlmk/ds-2.0';

${positionsExample}

const App = () => {
  return (
    <Dropdown buttonChildren='Dropdown'>
      {positions.map(({value, disabled}) => (
        <DropdownMenuItem value={value} disabled={disabled}>
          <Typography variant=""Body1-Medium"">{value}</Typography>
        </DropdownMenuItem>
      ))}
    </Dropdown>
  );
};
export default App;
`;

  const DropdownDisabledCode = `
import { Dropdown, DropdownMenuItem, Typography } from '@nlmk/ds-2.0';
import { useState } from 'react';

${positionsExample}

const App = () => {
  return (
    <Dropdown disabled buttonChildren='Dropdown'>
      {positions.map(({value, disabled}) => (
        <DropdownMenuItem value={value} disabled={disabled}>
          <Typography variant=""Body1-Medium"">{value}</Typography>
        </DropdownMenuItem>
      ))}
    </Dropdown>
  );
};
export default App;
`;

  return (
    <div className={styles.wrapper}>
      <Header
        title=""Dropdown""
        description=""Dropdown позволяет пользователям выбирать одно действие из выпадающего меню""
        isStable
        codeLink=""https://github.com/nlmk-group/ds-2.0/tree/main/src/components/Dropdown""
        // figmaLink=""https://www.figma.com/design/2bgeOS0URFNqFO1m1bnyvg/Button-DS-3.0?node-id=6070-93163&t=nJ2tmRpMpk8P3SWk-0""
      />

      <div className={styles.tabs}>
        <Tabs>
          <Tabs.Tab label=""Разработчику"" active={0 === Number(activeTab)} onClick={() => setActiveTab(0)} />
          {/* <Tabs.Tab label=""Дизайнеру"" active={1 === Number(activeTab)} onClick={() => setActiveTab(1)} /> */}
          <Tabs.Tab label=""Тестирование"" active={2 === Number(activeTab)} onClick={() => setActiveTab(2)} />
        </Tabs>
      </div>

      {Number(activeTab) === 0 && (
        <>
          <Editor description=""Компонент Dropdown с одиночным выбором"" code={DropdownDefaultCode} />
          <Editor description=""Dropdown в состоянии disabled"" code={DropdownDisabledCode} />
          <Properties argsTypes={argsTypes} />
        </>
      )}
      {Number(activeTab) === 1 && (
        <FigmaEmbed url=""https://www.figma.com/design/2bgeOS0URFNqFO1m1bnyvg/Button-DS-3.0?node-id=6070-93163&t=nJ2tmRpMpk8P3SWk-0"" />
      )}
      {Number(activeTab) === 2 && <Tests componentName=""Dropdown"" />}
    </div>
  );
};
export default DropdownStories;
"
Codes for component Dropdown index.tsx,"import React, { CSSProperties, FC, MouseEventHandler, ReactNode, useRef, useState } from 'react';

import { EButtonSizes } from '@components/Button/enums';
import { Button, IconChevronArrowDownOutlined16, IconChevronArrowDownOutlined24 } from '@components/index';
import clsx from 'clsx';

import { IDropdownProps } from './types';

import styles from './Dropdown.module.scss';

import { DropdownContext } from './context';
import { DropdownMenu } from './subcomponents';

/**
 * Компонент Dropdown предоставляет интерактивное выпадающее меню с настраиваемыми кнопками и элементами меню.
 * @component
 * @param {object} props - Пропсы компонента.
 * @param {ReactNode} props.children - Элементы, которые будут отображаться в меню.
 * @param {boolean} [props.disabled=false] - Отключает кнопку и возможность открытия меню.
 * @param {ReactNode} props.buttonChildren - Содержимое кнопки.
 * @param {string} [props.className] - Дополнительный класс для кнопки.
 * @param {EButtonSizes} [props.size=EButtonSizes.m] - Размер кнопки и меню.
 * @param {CSSProperties} [props.menuStyle] - Размер кнопки и меню.
 */

const Dropdown: FC<IDropdownProps> = ({
  children,
  disabled = false,
  buttonChildren,
  className,
  size = EButtonSizes.m,
  menuStyle
}: {
  children: ReactNode;
  disabled?: boolean;
  buttonChildren?: ReactNode;
  className?: string;
  size?: `${EButtonSizes}`;
  menuStyle?: CSSProperties;
}) => {
  const [isOpen, setIsOpen] = useState(false);
  const buttonRef = useRef(null);
  /**
   * Переключает состояние открытия/закрытия выпадающего меню.
   * @param {React.MouseEvent<HTMLButtonElement>} e - Событие клика мыши.
   */
  const toggleDropdown: MouseEventHandler<HTMLButtonElement> = (e: React.MouseEvent<HTMLButtonElement>) => {
    e.preventDefault();
    e.stopPropagation();
    if (!disabled) {
      setIsOpen(prev => !prev);
    }
  };
  const ChevronIcon = size === EButtonSizes.xs ? IconChevronArrowDownOutlined16 : IconChevronArrowDownOutlined24;
  const Chevron = (
    <div className={clsx(styles['icon-rotate'], { [styles['icon-rotate-open']]: isOpen })}>
      <ChevronIcon />
    </div>
  );

  return (
    <DropdownContext.Provider value={{ isOpen, setIsOpen, disabled, buttonChildren, buttonRef, size, menuStyle }}>
      <Button
        ref={buttonRef}
        className={clsx(styles.button, className)}
        variant=""secondary""
        onClick={toggleDropdown}
        disabled={disabled}
        size={size}
        iconButton={!buttonChildren ? Chevron : undefined}
        endIcon={buttonChildren ? Chevron : undefined}
      >
        {buttonChildren}
      </Button>
      {isOpen && <DropdownMenu>{children}</DropdownMenu>}
    </DropdownContext.Provider>
  );
};

export default Dropdown;
"
Codes for component Dropdown _stories argsTypes.tsx,"import { EButtonSizes } from '@components/Button/enums';

export const argsTypes = {
  children: {
    description: 'Содержимое выпадающего меню в компоненте Dropdown',
    table: {
      type: {
        summary: 'ReactNode'
      }
    },
    control: { type: 'text' }
  },
  size: {
    description: `Размер кнопки – <b>${Object.values(EButtonSizes).join(' | ')}</b>.`,
    table: {
      defaultValue: {
        summary: 'm'
      },
      type: {
        summary: 'string'
      }
    },
    options: Object.values(EButtonSizes),
    control: { type: 'select' }
  },
  disabled: {
    description: 'Отключает кнопку Dropdown',
    table: {
      defaultValue: {
        summary: 'false'
      },
      type: {
        summary: 'boolean'
      }
    },
    control: { type: 'boolean' }
  },
  className: {
    description: 'Класс для дополнительной стилизации Dropdown',
    table: {
      type: {
        summary: 'string'
      }
    },
    control: { type: 'text' }
  },
  buttonChildren: {
    description: 'Содержимое кнопки Dropdown',
    table: {
      type: {
        summary: 'ReactNode'
      }
    },
    control: { type: 'text' }
  },
  menuStyle: {
    description: 'Кастомная ширина меню',
    table: {
      type: {
        summary: 'string'
      }
    },
    control: { type: 'object' }
  }
};
"
Codes for component ErrorPage index.tsx,"import React, { FC, memo } from 'react';

import { errorImagesByCode, ErrorKeys, ErrorPageProps } from './types';

import styles from './ErrorPage.module.scss';

import Box from '../Box';
import Typography from '../Typography';

const ErrorPage: FC<ErrorPageProps> = memo(
  ({ errorCode, description = 'Произошла ошибка', hint = 'Попробуйте обновить страницу', ...props }) => {
    const ImageSrc = errorImagesByCode[errorCode as ErrorKeys] || errorImagesByCode.default;
    return (
      <Box display=""flex"" justifyContent=""center"" alignItems=""center"" width=""100%"" height=""100%"" {...props}>
        <Box display=""flex"" flexDirection=""column"" alignItems=""center"" gap={'var(--60-size)'}>
          <ImageSrc />
          <Box display=""flex"" flexDirection=""column"" gap={'var(--32-size)'} className={styles.text}>
            <Typography variant=""Heading1"" color=""textPrimary"">
              {errorCode}
              {errorCode && ': '}
              {description}
            </Typography>
            <Typography variant=""Subheading3"" color=""textSecondary"">
              {hint}
            </Typography>
          </Box>
        </Box>
      </Box>
    );
  }
);

export default ErrorPage;
"
Types for component Typography enums.ts,"export enum ETypographyVariants {
  'Heading1' = 'Heading1',
  'Heading2' = 'Heading2',
  'Heading3' = 'Heading3',
  'Heading4' = 'Heading4',
  'Subheading1' = 'Subheading1',
  'Subheading2' = 'Subheading2',
  'Subheading2-Medium' = 'Subheading2-Medium',
  'Subheading3' = 'Subheading3',
  'Subheading3-Medium' = 'Subheading3-Medium',
  'Body' = 'Body',
  'Body-Medium' = 'Body-Medium',
  'Body-Bold' = 'Body-Bold',
  'Body1' = 'Body1',
  'Body1-Medium' = 'Body1-Medium',
  'Body1Table-Medium' = 'Body1Table-Medium',
  'Body1Mono-Medium' = 'Body1Mono-Medium',
  'Body1Mono-Bold' = 'Body1Mono-Bold',
  'Body1-Bold' = 'Body1-Bold',
  'Body2' = 'Body2',
  'Body2-Medium' = 'Body2-Medium',
  'Body2Mono-Medium' = 'Body2Mono-Medium',
  'Body2Mono-Bold' = 'Body2Mono-Bold',
  'Body2-Bold' = 'Body2-Bold',
  'Caption' = 'Caption',
  'Caption-Medium' = 'Caption-Medium',
  'Caption-Bold' = 'Caption-Bold',
  'CaptionMono' = 'CaptionMono',
  'CaptionMono-Medium' = 'CaptionMono-Medium',
  'CaptionMono-Bold' = 'CaptionMono-Bold',
  'Additional-Bold' = 'Additional-Bold'
}
"
Types for component Typography types.ts,"import { CSSProperties, HTMLAttributes, ReactNode } from 'react';

import { ETypographyVariants } from './enums';

export interface ITypographyProps extends HTMLAttributes<HTMLSpanElement> {
  variant?: `${ETypographyVariants}`;
  children: ReactNode;
  className?: string;
  color?: CSSProperties['color'];
  style?: CSSProperties;
}
"
Types for component ErrorPage _stories argsTypes.ts,"export const argsTypes = {
  errorCode: {
    description: 'Код ошибки',
    options: [
      100, 101, 102, 103, 200, 201, 202, 203, 204, 205, 206, 207, 300, 301, 302, 303, 304, 305, 307, 308, 400, 401, 402,
      403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 426,
      428, 429, 431, 451, 500, 501, 502, 503, 504, 505, 507, 511
    ],
    control: { type: 'select' },
    defaultValue: 400,
    table: {
      defaultValue: {
        summary: 'number'
      }
    }
  },
  description: {
    description: 'Описание',
    control: { type: 'text' },
    table: {
      defaultValue: {
        summary: 'Произошла ошибка'
      },
      type: {
        summary: 'string'
      }
    }
  },
  hint: {
    description: 'Подсказка',
    control: { type: 'text' },
    defaultValue: 'Попробуйте обновить страницу',
    table: {
      defaultValue: {
        summary: 'Попробуйте обновить страницу'
      },
      type: {
        summary: 'string'
      }
    }
  }
};
"
Styles for component Typography Typography.module.scss,"@mixin typography-properties($args...) {
  $font-family: nth($args, 1);
  $font-size: nth($args, 2);
  $font-weight: nth($args, 3);
  $line-height: nth($args, 4);
  $letter-spacing: nth($args, 5);
  $text-decoration: nth($args, 6);
  font-family: $font-family;
  font-size: $font-size;
  font-weight: $font-weight;
  line-height: $line-height;
  letter-spacing: $letter-spacing;
  text-decoration: $text-decoration;
  overflow-wrap: break-word;
}

.typography {
  display: block;
  margin-block-start: 0;
  margin-block-end: 0;
  margin-inline-start: 0;
  margin-inline-end: 0;
  font-variant-numeric: tabular-nums lining-nums;
  color: inherit;
}

.typography--variant-Heading1 {
  @include typography-properties(
    var(--heading1-48-fontFamily),
    var(--heading1-48-fontSize),
    var(--heading1-48-fontWeight),
    var(--heading1-48-lineHeight),
    var(--heading1-48-letterSpacing),
    var(--heading1-48-textDecoration)
  );
}

.typography--variant-Heading2 {
  @include typography-properties(
    var(--heading2-32-fontFamily),
    var(--heading2-32-fontSize),
    var(--heading2-32-fontWeight),
    var(--heading2-32-lineHeight),
    var(--heading2-32-letterSpacing),
    var(--heading2-32-textDecoration)
  );
}

.typography--variant-Heading3 {
  @include typography-properties(
    var(--heading3-24-fontFamily),
    var(--heading3-24-fontSize),
    var(--heading3-24-fontWeight),
    var(--heading3-24-lineHeight),
    var(--heading3-24-letterSpacing),
    var(--heading3-24-textDecoration)
  );
}

.typography--variant-Heading4 {
  @include typography-properties(
    var(--heading4-20-fontFamily),
    var(--heading4-20-fontSize),
    var(--heading4-20-fontWeight),
    var(--heading4-20-lineHeight),
    var(--heading4-20-letterSpacing),
    var(--heading4-20-textDecoration)
  );
}

.typography--variant-Subheading1 {
  @include typography-properties(
    var(--subheading1-32-fontFamily),
    var(--subheading1-32-fontSize),
    var(--subheading1-32-fontWeight),
    var(--subheading1-32-lineHeight),
    var(--subheading1-32-letterSpacing),
    var(--subheading1-32-textDecoration)
  );
}

.typography--variant-Subheading2 {
  @include typography-properties(
    var(--subheading2-24-fontFamily),
    var(--subheading2-24-fontSize),
    var(--subheading2-24-fontWeight),
    var(--subheading2-24-lineHeight),
    var(--subheading2-24-letterSpacing),
    var(--subheading2-24-textDecoration)
  );
}

.typography--variant-Subheading2-Medium {
  @include typography-properties(
    var(--subheading2-medium-24-fontFamily),
    var(--subheading2-medium-24-fontSize),
    var(--subheading2-medium-24-fontWeight),
    var(--subheading2-medium-24-lineHeight),
    var(--subheading2-medium-24-letterSpacing),
    var(--subheading2-medium-24-textDecoration)
  );
}

.typography--variant-Subheading3 {
  @include typography-properties(
    var(--subheading3-20-fontFamily),
    var(--subheading3-20-fontSize),
    var(--subheading3-20-fontWeight),
    var(--subheading3-20-lineHeight),
    var(--subheading3-20-letterSpacing),
    var(--subheading3-20-textDecoration)
  );
}

.typography--variant-Subheading3-Medium {
  @include typography-properties(
    var(--subheading3-medium-20-fontFamily),
    var(--subheading3-medium-20-fontSize),
    var(--subheading3-medium-20-fontWeight),
    var(--subheading3-medium-20-lineHeight),
    var(--subheading3-medium-20-letterSpacing),
    var(--subheading3-medium-20-textDecoration)
  );
}

.typography--variant-Body {
  @include typography-properties(
    var(--body-18-fontFamily),
    var(--body-18-fontSize),
    var(--body-18-fontWeight),
    var(--body-18-lineHeight),
    var(--body-18-letterSpacing),
    var(--body-18-textDecoration)
  );
}

.typography--variant-Body-Medium {
  @include typography-properties(
    var(--body-medium-18-fontFamily),
    var(--body-medium-18-fontSize),
    var(--body-medium-18-fontWeight),
    var(--body-medium-18-lineHeight),
    var(--body-medium-18-letterSpacing),
    var(--body-medium-18-textDecoration)
  );
}

.typography--variant-Body-Bold {
  @include typography-properties(
    var(--body-bold-18-fontFamily),
    var(--body-bold-18-fontSize),
    var(--body-bold-18-fontWeight),
    var(--body-bold-18-lineHeight),
    var(--body-bold-18-letterSpacing),
    var(--body-bold-18-textDecoration)
  );
}

.typography--variant-Body1 {
  @include typography-properties(
    var(--body1-16-fontFamily),
    var(--body1-16-fontSize),
    var(--body1-16-fontWeight),
    var(--body1-16-lineHeight),
    var(--body1-16-letterSpacing),
    var(--body1-16-textDecoration)
  );
}

.typography--variant-Body1-Medium {
  @include typography-properties(
    var(--body1-medium-16-fontFamily),
    var(--body1-medium-16-fontSize),
    var(--body1-medium-16-fontWeight),
    var(--body1-medium-16-lineHeight),
    var(--body1-medium-16-letterSpacing),
    var(--body1-medium-16-textDecoration)
  );
}

.typography--variant-Body1Table-Medium {
  @include typography-properties(
    var(--body1-table-medium-16-fontFamily),
    var(--body1-table-medium-16-fontSize),
    var(--body1-table-medium-16-fontWeight),
    var(--body1-table-medium-16-lineHeight),
    var(--body1-table-medium-16-letterSpacing),
    var(--body1-table-medium-16-textDecoration)
  );
}

.typography--variant-Body1-Bold {
  @include typography-properties(
    var(--body1-bold-16-fontFamily),
    var(--body1-bold-16-fontSize),
    var(--body1-bold-16-fontWeight),
    var(--body1-bold-16-lineHeight),
    var(--body1-bold-16-letterSpacing),
    var(--body1-bold-16-textDecoration)
  );
}

.typography--variant-Body1Mono-Medium {
  @include typography-properties(
    var(--body1-mono-medium-16-fontFamily),
    var(--body1-mono-medium-16-fontSize),
    var(--body1-mono-medium-16-fontWeight),
    var(--body1-mono-medium-16-lineHeight),
    var(--body1-mono-medium-16-letterSpacing),
    var(--body1-mono-medium-16-textDecoration)
  );
}

.typography--variant-Body1Mono-Bold {
  @include typography-properties(
    var(--body1-mono-bold-16-fontFamily),
    var(--body1-mono-bold-16-fontSize),
    var(--body1-mono-bold-16-fontWeight),
    var(--body1-mono-bold-16-lineHeight),
    var(--body1-mono-bold-16-letterSpacing),
    var(--body1-mono-bold-16-textDecoration)
  );
}

.typography--variant-Body2 {
  @include typography-properties(
    var(--body2-14-fontFamily),
    var(--body2-14-fontSize),
    var(--body2-14-fontWeight),
    var(--body2-14-lineHeight),
    var(--body2-14-letterSpacing),
    var(--body2-14-textDecoration)
  );
}

.typography--variant-Body2-Medium {
  @include typography-properties(
    var(--body2-medium-14-fontFamily),
    var(--body2-medium-14-fontSize),
    var(--body2-medium-14-fontWeight),
    var(--body2-medium-14-lineHeight),
    var(--body2-medium-14-letterSpacing),
    var(--body2-medium-14-textDecoration)
  );
}

.typography--variant-Body2-Bold {
  @include typography-properties(
    var(--body2-bold-14-fontFamily),
    var(--body2-bold-14-fontSize),
    var(--body2-bold-14-fontWeight),
    var(--body2-bold-14-lineHeight),
    var(--body2-bold-14-letterSpacing),
    var(--body2-bold-14-textDecoration)
  );
}

.typography--variant-Body2Mono-Medium {
  @include typography-properties(
    var(--body2-mono-medium-14-fontFamily),
    var(--body2-mono-medium-14-fontSize),
    var(--body2-mono-medium-14-fontWeight),
    var(--body2-mono-medium-14-lineHeight),
    var(--body2-mono-medium-14-letterSpacing),
    var(--body2-mono-medium-14-textDecoration)
  );
}

.typography--variant-Body2Mono-Bold {
  @include typography-properties(
    var(--body2-mono-bold-14-fontFamily),
    var(--body2-mono-bold-14-fontSize),
    var(--body2-mono-bold-14-fontWeight),
    var(--body2-mono-bold-14-lineHeight),
    var(--body2-mono-bold-14-letterSpacing),
    var(--body2-mono-bold-14-textDecoration)
  );
}

.typography--variant-Caption {
  @include typography-properties(
    var(--caption-12-fontFamily),
    var(--caption-12-fontSize),
    var(--caption-12-fontWeight),
    var(--caption-12-lineHeight),
    var(--caption-12-letterSpacing),
    var(--caption-12-textDecoration)
  );
}

.typography--variant-Caption-Medium {
  @include typography-properties(
    var(--caption-medium-12-fontFamily),
    var(--caption-medium-12-fontSize),
    var(--caption-medium-12-fontWeight),
    var(--caption-medium-12-lineHeight),
    var(--caption-medium-12-letterSpacing),
    var(--caption-medium-12-textDecoration)
  );
}

.typography--variant-Caption-Bold {
  @include typography-properties(
    var(--caption-bold-12-fontFamily),
    var(--caption-bold-12-fontSize),
    var(--caption-bold-12-fontWeight),
    var(--caption-bold-12-lineHeight),
    var(--caption-bold-12-letterSpacing),
    var(--caption-bold-12-textDecoration)
  );
}

.typography--variant-CaptionMono {
  @include typography-properties(
    var(--caption-mono-12-fontFamily),
    var(--caption-mono-12-fontSize),
    var(--caption-mono-12-fontWeight),
    var(--caption-mono-12-lineHeight),
    var(--caption-mono-12-letterSpacing),
    var(--caption-mono-12-textDecoration)
  );
}

.typography--variant-CaptionMono-Medium {
  @include typography-properties(
    var(--caption-mono-medium-12-fontFamily),
    var(--caption-mono-medium-12-fontSize),
    var(--caption-mono-medium-12-fontWeight),
    var(--caption-mono-medium-12-lineHeight),
    var(--caption-mono-medium-12-letterSpacing),
    var(--caption-mono-medium-12-textDecoration)
  );
}

.typography--variant-CaptionMono-Bold {
  @include typography-properties(
    var(--caption-mono-bold-12-fontFamily),
    var(--caption-mono-bold-12-fontSize),
    var(--caption-mono-bold-12-fontWeight),
    var(--caption-mono-bold-12-lineHeight),
    var(--caption-mono-bold-12-letterSpacing),
    var(--caption-mono-bold-12-textDecoration)
  );
}

.typography--variant-Additional-Bold {
  @include typography-properties(
    var(--additional-bold-9-fontFamily),
    var(--additional-bold-9-fontSize),
    var(--additional-bold-9-fontWeight),
    var(--additional-bold-9-lineHeight),
    var(--additional-bold-9-letterSpacing),
    var(--additional-bold-9-textDecoration)
  );
}
"
Codes for component Box index.tsx,"import React, { FC } from 'react';

import clsx from 'clsx';

import { IBox } from './types';

import styles from './Box.module.scss';

const Box: FC<IBox> = ({
  children,
  st,
  className,
  p = 0,
  px,
  py,
  pt,
  pb,
  pl,
  pr,
  background,
  height,
  width,
  maxWidth,
  color = 'var(--text-grey-900)',
  border,
  borderRadius = 0,
  display = 'flex',
  flexDirection,
  justifyContent,
  alignItems,
  flexWrap,
  gap = '24px',
  ...rest
}) => {
  const propsStyles = {
    backgroundColor: background,
    height,
    color,
    width,
    maxWidth,
    border,
    borderRadius,
    display,
    flexDirection,
    justifyContent,
    alignItems,
    flexWrap,
    gap,
    padding: p,
    paddingTop: pt,
    paddingBottom: pb,
    paddingLeft: pl,
    paddingRight: pr,
    ...st
  };

  if (px !== undefined) {
    propsStyles.paddingLeft = px;
    propsStyles.paddingRight = px;
  }

  if (py !== undefined) {
    propsStyles.paddingTop = py;
    propsStyles.paddingBottom = py;
  }

  return (
    <div data-testid=""BOX_WRAPPER"" className={clsx(styles.wrapper, className)} style={propsStyles} {...rest}>
      {children}
    </div>
  );
};

export default Box;
"
Types for component Box types.ts,"import { CSSProperties, DetailedHTMLProps, HTMLAttributes, ReactNode } from 'react';

type TBorderProps = string | number;

export interface IBox extends DetailedHTMLProps<HTMLAttributes<HTMLDivElement>, HTMLDivElement> {
  children?: ReactNode;
  p?: TBorderProps;
  px?: TBorderProps;
  py?: TBorderProps;
  pt?: TBorderProps;
  pb?: TBorderProps;
  pl?: TBorderProps;
  pr?: TBorderProps;
  background?: string;
  height?: TBorderProps;
  width?: TBorderProps;
  maxWidth?: TBorderProps;
  border?: string;
  color?: string;
  borderRadius?: TBorderProps;
  display?: CSSProperties['display'];
  flexDirection?: CSSProperties['flexDirection'];
  justifyContent?: CSSProperties['justifyContent'];
  alignItems?: CSSProperties['alignItems'];
  flexWrap?: CSSProperties['flexWrap'];
  st?: CSSProperties;
  className?: string;
  gap?: TBorderProps;
}
"
Styles for component Box Box.module.scss,".wrapper {
  height: auto;
  width: auto;
}
"
Codes for component Typography index.tsx,"import React, { CSSProperties, FC, ReactNode } from 'react';

import clsx from 'clsx';

import { ITypographyProps } from './types';

import styles from './Typography.module.scss';

import { ETypographyVariants } from './enums';

/**
 * Компонент Typography для стилизованного отображения текста.
 * @component
 * @param {Object} props - Свойства компонента Typography.
 * @param {ETypographyVariants} [props.variant=ETypographyVariants.Body1] - Вариант типографики.
 * @param {React.ReactNode} props.children - Текстовое содержимое.
 * @param {string} [props.className] - Дополнительный CSS класс.
 * @param {CSSProperties['color']} [props.color] - Цвет текста.
 * @param {CSSProperties} [props.style] - Дополнительные встроенные стили.
 * @returns {JSX.Element} Компонент Typography.
 */

const Typography: FC<ITypographyProps> = ({
  variant = ETypographyVariants.Body1,
  children,
  className,
  color,
  style,
  ...props
}: {
  variant?: `${ETypographyVariants}`;
  children: ReactNode;
  className?: string;
  color?: CSSProperties['color'];
  style?: CSSProperties;
}): JSX.Element => {
  const variantClass = styles[`typography--variant-${variant}`];

  return (
    <span
      data-testid=""typography-wrapper""
      className={clsx(variantClass, styles.typography, className)}
      style={{ color, ...style }}
      {...props}
    >
      {children}
    </span>
  );
};

export default Typography;
"
Codes for component ErrorPage _stories Stories.tsx,"import React, { useState } from 'react';

import Editor from '@components/_storybook/Stories/components/Editor';
import FigmaEmbed from '@components/_storybook/Stories/components/FigmaEmbed';
import Header from '@components/_storybook/Stories/components/Header';
import Properties from '@components/_storybook/Stories/components/Properties';
import Tests from '@components/_storybook/Stories/components/Tests';
import '@components/_storybook/Stories/styles.css';
import { Tabs } from '@components/index';

import styles from '@components/_storybook/Stories/Stories.module.scss';

import { argsTypes } from './argsTypes';

const COMPONENT_NAME = 'ErrorPage';
const FIGMA_URL =
  'https://www.figma.com/file/ocBJCN1akiFe5oQljRKNi0/DS2.0-Error?type=design&node-id=2-10&mode=design&t=RSFbkTXfvL8sjP7n-0';

const Stories = (): JSX.Element => {
  const [activeTab, setActiveTab] = useState(0);

  return (
    <div className={styles.wrapper}>
      <Header
        title=""Error page""
        description=""Компонент ErrorPage предназначен для информирования пользователя о различных ошибках веб-приложения и предложения возможных действий для их решения с помощью настраиваемых сообщений и изображений.""
        isStable
        codeLink={`https://github.com/nlmk-group/ds-2.0/tree/main/src/components/${COMPONENT_NAME}`}
        figmaLink={FIGMA_URL}
      />

      <div className={styles.tabs}>
        <Tabs>
          <Tabs.Tab label=""Разработчику"" active={0 === Number(activeTab)} onClick={() => setActiveTab(0)} />
          {/* <Tabs.Tab label=""Дизайнеру"" active={1 === Number(activeTab)} onClick={() => setActiveTab(1)} /> */}
          <Tabs.Tab label=""Тестирование"" active={2 === Number(activeTab)} onClick={() => setActiveTab(2)} />
        </Tabs>
      </div>

      {Number(activeTab) == 0 && (
        <>
          <Editor
            height={600}
            description=""Компонент ErrorPage разработан в разных вариантах""
            code={`import { ErrorPage } from '@nlmk/ds-2.0';

export default  App = () => (
  <ErrorPage errorCode=""403"" description=""Нет доступа"" hint=""Воспользуйтесь боковым меню, чтобы перейти к нужной форме"" />
)
`}
          />

          <Properties argsTypes={argsTypes} />
        </>
      )}
      {Number(activeTab) == 1 && (
        <FigmaEmbed url=""https://www.figma.com/file/ocBJCN1akiFe5oQljRKNi0/DS2.0-Error?type=design&node-id=2-10&mode=design&t=RSFbkTXfvL8sjP7n-0"" />
      )}
      {Number(activeTab) == 2 && <Tests componentName=""ErrorPage"" />}
    </div>
  );
};

export default Stories;
"
Types for component ErrorPage types.ts,"import { error403, error404, Default } from './components';

export const errorImagesByCode = {
  404: error404,
  403: error403,
  default: Default
} as const;

export interface ErrorPageProps {
  errorCode?: number;
  description?: string;
  hint?: string;
}

export type ErrorKeys = keyof typeof errorImagesByCode;
"
Types for component ErrorPage components index.ts,"export { default as error404 } from './Error404';
export { default as error403 } from './Error403';
export { default as Default } from './Default';
"
Styles for component ErrorPage ErrorPage.module.scss,".text {
  text-align: center;
}
"
Codes for component Grid index.tsx,"import React from 'react';

import Box from '@components/Box';
import { IGrid } from '@components/Grid/types';

import { GridColumn, GridRow } from './subcomponents';

const Grid = ({ children, ...props }: IGrid) => {
  return <Box {...props}>{children}</Box>;
};

Grid.Column = GridColumn;
Grid.Row = GridRow;

export default Grid;
"
Types for component Grid subcomponents index.ts,"export { GridColumn } from './GridColumn';
export { GridRow } from './GridRow';"
Codes for component Grid _stories Stories.tsx,"import React, { useState } from 'react';

import Editor from '@components/_storybook/Stories/components/Editor';
import FigmaEmbed from '@components/_storybook/Stories/components/FigmaEmbed';
import Header from '@components/_storybook/Stories/components/Header';
import Properties from '@components/_storybook/Stories/components/Properties';
import Tests from '@components/_storybook/Stories/components/Tests';
import '@components/_storybook/Stories/styles.css';
import { Tabs } from '@components/index';

import styles from '@components/_storybook/Stories/Stories.module.scss';

import { argsTypes } from './argsTypes';

const FIGMA_LINK =
  'https://www.figma.com/file/UrNaiI72SjVg0aHW6NYVCi/DS2.0-Grid?type=design&node-id=207-40301&mode=design&t=H6uAggyoryLoFprh-0';

const gridExampleCode = `import { Grid, Box } from '@nlmk/ds-2.0';

const App = () => (
    <Grid borderRadius=""var(--4-border)"" st={{ width: ""100%"", padding: 0 }}>
      {Array.from({ length: 3 }, (_, index) => (
        <Box
          key={index}
          px=""var(--8-space)""
          py=""var(--16-space)""
          borderRadius=""var(--4-border)""
          background=""var(--primary-blue-400)""
          st={{ flex: '1' }}
        >
          Контент {index + 1}
        </Box>
      ))}
    </Grid>
);
export default App;
`;

const equalWidthColumnsCode = `import { Grid, Box } from '@nlmk/ds-2.0';

const App = () => (
    <Grid borderRadius=""var(--4-border)"">
      <Grid.Row borderRadius=""var(--4-border)"" background=""var(--error-red-100)"">
        <Grid.Column borderRadius=""var(--4-border)"" background=""var(--primary-blue-400)"" width=""50%"">
          <Box
            st={{ flex: '1' }}
            px=""var(--8-space)""
            py=""var(--16-space)""
            borderRadius=""var(--4-border)""
            background=""var(--primary-blue-400)""
          >
            1 из 2
          </Box>
        </Grid.Column>
        <Grid.Column borderRadius=""var(--4-border)"" background=""var(--primary-blue-400)"" width=""50%"">
          <Box
            st={{ flex: '1' }}
            px=""var(--8-space)""
            py=""var(--16-space)""
            borderRadius=""var(--4-border)""
            background=""var(--primary-blue-400)""
          >
            2 из 2
          </Box>
        </Grid.Column>
      </Grid.Row>
      <Grid.Row borderRadius=""var(--4-border)"" background=""var(--error-red-100)"">
        <Grid.Column borderRadius=""var(--4-border)"" background=""var(--primary-blue-400)"" width=""33.33%"">
          <Box
            st={{ flex: '1' }}
            px=""var(--8-space)""
            py=""var(--16-space)""
            borderRadius=""var(--4-border)""
            background=""var(--primary-blue-400)""
          >
            1 из 3
          </Box>
        </Grid.Column>
        <Grid.Column borderRadius=""var(--4-border)"" background=""var(--primary-blue-400)"" width=""33.33%"">
          <Box
            st={{ flex: '1' }}
            px=""var(--8-space)""
            py=""var(--16-space)""
            borderRadius=""var(--4-border)""
            background=""var(--primary-blue-400)""
          >
            2 из 3
          </Box>
        </Grid.Column>
        <Grid.Column borderRadius=""var(--4-border)"" background=""var(--primary-blue-400)"" width=""33.33%"">
          <Box
            st={{ flex: '1' }}
            px=""var(--8-space)""
            py=""var(--16-space)""
            borderRadius=""var(--4-border)""
            background=""var(--primary-blue-400)""
          >
            3 из 3
          </Box>
        </Grid.Column>
      </Grid.Row>
    </Grid>
);
export default App;
`;

const settingOneColumnWidthCode = `import { Grid, Box } from '@nlmk/ds-2.0';

const App = () => (
    <Grid borderRadius=""var(--4-border)"">
      <Grid.Row borderRadius=""var(--4-border)"" background=""var(--error-red-100)"">
        <Grid.Column borderRadius=""var(--4-border)"" background=""var(--primary-blue-400)"">
          <Box
            st={{ flex: '1' }}
            px=""var(--8-space)""
            py=""var(--16-space)""
            borderRadius=""var(--4-border)""
            background=""var(--primary-blue-400)""
          >
            1 из 3
          </Box>
        </Grid.Column>
        <Grid.Column borderRadius=""var(--4-border)"" background=""var(--primary-blue-400)"" width=""50%"">
          <Box
            st={{ flex: '1' }}
            px=""var(--8-space)""
            py=""var(--16-space)""
            borderRadius=""var(--4-border)""
            background=""var(--primary-blue-400)""
          >
            2 из 3 (шире)
          </Box>
        </Grid.Column>
        <Grid.Column borderRadius=""var(--4-border)"" background=""var(--primary-blue-400)"">
          <Box
            st={{ flex: '1' }}
            px=""var(--8-space)""
            py=""var(--16-space)""
            borderRadius=""var(--4-border)""
            background=""var(--primary-blue-400)""
          >
            3 из 3
          </Box>
        </Grid.Column>
      </Grid.Row>
      <Grid.Row borderRadius=""var(--4-border)"" background=""var(--error-red-100)"">
        <Grid.Column borderRadius=""var(--4-border)"" background=""var(--primary-blue-400)"">
          <Box
            st={{ flex: '1' }}
            px=""var(--8-space)""
            py=""var(--16-space)""
            borderRadius=""var(--4-border)""
            background=""var(--primary-blue-400)""
          >
            1 из 3
          </Box>
        </Grid.Column>
        <Grid.Column borderRadius=""var(--4-border)"" background=""var(--primary-blue-400)"" width=""58.33%"">
          <Box
            st={{ flex: '1' }}
            px=""var(--8-space)""
            py=""var(--16-space)""
            borderRadius=""var(--4-border)""
            background=""var(--primary-blue-400)""
          >
            2 из 3 (шире)
          </Box>
        </Grid.Column>
        <Grid.Column borderRadius=""var(--4-border)"" background=""var(--primary-blue-400)"">
          <Box
            st={{ flex: '1' }}
            px=""var(--8-space)""
            py=""var(--16-space)""
            borderRadius=""var(--4-border)""
            background=""var(--primary-blue-400)""
          >
            3 из 3
          </Box>
        </Grid.Column>
      </Grid.Row>
    </Grid>
);
export default App;
`;

const variableWidthContentCode = `import { Grid, Box } from '@nlmk/ds-2.0';

const App = () => (
    <Grid borderRadius=""var(--4-border)"">
      <Grid.Row borderRadius=""var(--4-border)"" background=""var(--error-red-100)"">
        <Grid.Column borderRadius=""var(--4-border)"" background=""var(--primary-blue-400)"" width=""16.67%"">
          <Box
            st={{ flex: '1' }}
            px=""var(--8-space)""
            py=""var(--16-space)""
            borderRadius=""var(--4-border)""
            background=""var(--primary-blue-400)""
          >
            1 из 3
          </Box>
        </Grid.Column>
        <Grid.Column borderRadius=""var(--4-border)"" background=""var(--primary-blue-400)"" width=""auto"">
          <Box
            st={{ flex: '1' }}
            px=""var(--8-space)""
            py=""var(--16-space)""
            borderRadius=""var(--4-border)""
            background=""var(--primary-blue-400)""
          >
            Переменная ширина контента
          </Box>
        </Grid.Column>
        <Grid.Column borderRadius=""var(--4-border)"" background=""var(--primary-blue-400)"" width=""16.67%"">
          <Box
            st={{ flex: '1' }}
            px=""var(--8-space)""
            py=""var(--16-space)""
            borderRadius=""var(--4-border)""
            background=""var(--primary-blue-400)""
          >
            3 из 3
          </Box>
        </Grid.Column>
      </Grid.Row>
      <Grid.Row borderRadius=""var(--4-border)"" background=""var(--error-red-100)"">
        <Grid.Column borderRadius=""var(--4-border)"" background=""var(--primary-blue-400)"">
          <Box
            st={{ flex: '1' }}
            px=""var(--8-space)""
            py=""var(--16-space)""
            borderRadius=""var(--4-border)""
            background=""var(--primary-blue-400)""
          >
            1 из 3
          </Box>
        </Grid.Column>
        <Grid.Column borderRadius=""var(--4-border)"" background=""var(--primary-blue-400)"" width=""auto"">
          <Box
            st={{ flex: '1' }}
            px=""var(--8-space)""
            py=""var(--16-space)""
            borderRadius=""var(--4-border)""
            background=""var(--primary-blue-400)""
          >
            Переменная ширина контента
          </Box>
        </Grid.Column>
        <Grid.Column borderRadius=""var(--4-border)"" background=""var(--primary-blue-400)"" width=""16.67%"">
          <Box
            st={{ flex: '1' }}
            px=""var(--8-space)""
            py=""var(--16-space)""
            borderRadius=""var(--4-border)""
            background=""var(--primary-blue-400)""
          >
            3 из 3
          </Box>
        </Grid.Column>
      </Grid.Row>
    </Grid>
);
export default App;
`;

const equalWidthMultiRowCode = `import { Grid, Box } from '@nlmk/ds-2.0';

const App = () => (
    <Grid borderRadius=""var(--4-border)"">
      <Grid.Row borderRadius=""var(--4-border)"" background=""var(--error-red-100)"">
        <Grid.Column borderRadius=""var(--4-border)"" background=""var(--primary-blue-400)"">
          <Box
            st={{ flex: '1' }}
            px=""var(--8-space)""
            py=""var(--16-space)""
            borderRadius=""var(--4-border)""
            background=""var(--primary-blue-400)""
          >
            Колонка
          </Box>
        </Grid.Column>
        <Grid.Column borderRadius=""var(--4-border)"" background=""var(--primary-blue-400)"">
          <Box
            st={{ flex: '1' }}
            px=""var(--8-space)""
            py=""var(--16-space)""
            borderRadius=""var(--4-border)""
            background=""var(--primary-blue-400)""
          >
            Колонка
          </Box>
        </Grid.Column>
        <Grid.Row borderRadius=""var(--4-border)"" background=""var(--error-red-100)"" width=""100%"" />
        <Grid.Column borderRadius=""var(--4-border)"" background=""var(--primary-blue-400)"">
          <Box
            st={{ flex: '1' }}
            px=""var(--8-space)""
            py=""var(--16-space)""
            borderRadius=""var(--4-border)""
            background=""var(--primary-blue-400)""
          >
            Колонка
          </Box>
        </Grid.Column>
        <Grid.Column borderRadius=""var(--4-border)"" background=""var(--primary-blue-400)"">
          <Box
            st={{ flex: '1' }}
            px=""var(--8-space)""
            py=""var(--16-space)""
            borderRadius=""var(--4-border)""
            background=""var(--primary-blue-400)""
          >
            Колонка
          </Box>
        </Grid.Column>
      </Grid.Row>
    </Grid>
);
export default App;
`;

const verticalAlignmentCode = `import { Grid, Box } from '@nlmk/ds-2.0';

const App = () => (
    <Grid borderRadius=""var(--4-border)"">
      <Grid.Row borderRadius=""var(--4-border)"" background=""var(--error-red-100)"" alignItems=""start"">
        <Grid.Column borderRadius=""var(--4-border)"" background=""var(--primary-blue-400)"">
          <Box
            st={{ flex: '1' }}
            px=""var(--8-space)""
            py=""var(--16-space)""
            borderRadius=""var(--4-border)""
            background=""var(--primary-blue-400)""
          >
            Одна из трех колонок
          </Box>
        </Grid.Column>
        <Grid.Column borderRadius=""var(--4-border)"" background=""var(--primary-blue-400)"">
          <Box
            st={{ flex: '1' }}
            px=""var(--8-space)""
            py=""var(--16-space)""
            borderRadius=""var(--4-border)""
            background=""var(--primary-blue-400)""
          >
            Одна из трех колонок
          </Box>
        </Grid.Column>
        <Grid.Column borderRadius=""var(--4-border)"" background=""var(--primary-blue-400)"">
          <Box
            st={{ flex: '1' }}
            px=""var(--8-space)""
            py=""var(--16-space)""
            borderRadius=""var(--4-border)""
            background=""var(--primary-blue-400)""
          >
            Одна из трех колонок
          </Box>
        </Grid.Column>
      </Grid.Row>
      <Grid.Row borderRadius=""var(--4-border)"" background=""var(--error-red-100)"" alignItems=""center"">
        <Grid.Column borderRadius=""var(--4-border)"" background=""var(--primary-blue-400)"">
          <Box
            st={{ flex: '1' }}
            px=""var(--8-space)""
            py=""var(--16-space)""
            borderRadius=""var(--4-border)""
            background=""var(--primary-blue-400)""
          >
            Одна из трех колонок
          </Box>
        </Grid.Column>
        <Grid.Column borderRadius=""var(--4-border)"" background=""var(--primary-blue-400)"">
          <Box
            st={{ flex: '1' }}
            px=""var(--8-space)""
            py=""var(--16-space)""
            borderRadius=""var(--4-border)""
            background=""var(--primary-blue-400)""
          >
            Одна из трех колонок
          </Box>
        </Grid.Column>
        <Grid.Column borderRadius=""var(--4-border)"" background=""var(--primary-blue-400)"">
          <Box
            st={{ flex: '1' }}
            px=""var(--8-space)""
            py=""var(--16-space)""
            borderRadius=""var(--4-border)""
            background=""var(--primary-blue-400)""
          >
            Одна из трех колонок
          </Box>
        </Grid.Column>
      </Grid.Row>
      <Grid.Row borderRadius=""var(--4-border)"" background=""var(--error-red-100)"" alignItems=""end"">
        <Grid.Column borderRadius=""var(--4-border)"" background=""var(--primary-blue-400)"">
          <Box
            st={{ flex: '1' }}
            px=""var(--8-space)""
            py=""var(--16-space)""
            borderRadius=""var(--4-border)""
            background=""var(--primary-blue-400)""
          >
            Одна из трех колонок
          </Box>
        </Grid.Column>
        <Grid.Column borderRadius=""var(--4-border)"" background=""var(--primary-blue-400)"">
          <Box
            st={{ flex: '1' }}
            px=""var(--8-space)""
            py=""var(--16-space)""
            borderRadius=""var(--4-border)""
            background=""var(--primary-blue-400)""
          >
            Одна из трех колонок
          </Box>
        </Grid.Column>
        <Grid.Column borderRadius=""var(--4-border)"" background=""var(--primary-blue-400)"">
          <Box
            st={{ flex: '1' }}
            px=""var(--8-space)""
            py=""var(--16-space)""
            borderRadius=""var(--4-border)""
            background=""var(--primary-blue-400)""
          >
            Одна из трех колонок
          </Box>
        </Grid.Column>
      </Grid.Row>
    </Grid>
);
export default App;
`;

const horizontalAlignmentCode = `import { Grid, Box } from '@nlmk/ds-2.0';

const App = () => (
    <Grid borderRadius=""var(--4-border)"">
      <Grid.Row borderRadius=""var(--4-border)"" background=""var(--error-red-100)"" justifyContent=""center"">
        <Grid.Column borderRadius=""var(--4-border)"" background=""var(--primary-blue-400)"" width=""33.33%"">
          <Box
            st={{ flex: '1' }}
            px=""var(--8-space)""
            py=""var(--16-space)""
            borderRadius=""var(--4-border)""
            background=""var(--primary-blue-400)""
          >
            Одна из двух колонок
          </Box>
        </Grid.Column>
        <Grid.Column borderRadius=""var(--4-border)"" background=""var(--primary-blue-400)"" width=""33.33%"">
          <Box
            st={{ flex: '1' }}
            px=""var(--8-space)""
            py=""var(--16-space)""
            borderRadius=""var(--4-border)""
            background=""var(--primary-blue-400)""
          >
            Одна из двух колонок
          </Box>
        </Grid.Column>
      </Grid.Row>
      <Grid.Row borderRadius=""var(--4-border)"" background=""var(--error-red-100)"" justifyContent=""space-around"">
        <Grid.Column borderRadius=""var(--4-border)"" background=""var(--primary-blue-400)"" width=""33.33%"">
          <Box
            st={{ flex: '1' }}
            px=""var(--8-space)""
            py=""var(--16-space)""
            borderRadius=""var(--4-border)""
            background=""var(--primary-blue-400)""
          >
            Одна из двух колонок
          </Box>
        </Grid.Column>
        <Grid.Column borderRadius=""var(--4-border)"" background=""var(--primary-blue-400)"" width=""33.33%"">
          <Box
            st={{ flex: '1' }}
            px=""var(--8-space)""
            py=""var(--16-space)""
            borderRadius=""var(--4-border)""
            background=""var(--primary-blue-400)""
          >
            Одна из двух колонок
          </Box>
        </Grid.Column>
      </Grid.Row>
      <Grid.Row borderRadius=""var(--4-border)"" background=""var(--error-red-100)"" justifyContent=""space-between"">
        <Grid.Column borderRadius=""var(--4-border)"" background=""var(--primary-blue-400)"" width=""33.33%"">
          <Box
            st={{ flex: '1' }}
            px=""var(--8-space)""
            py=""var(--16-space)""
            borderRadius=""var(--4-border)""
            background=""var(--primary-blue-400)""
          >
            Одна из двух колонок
          </Box>
        </Grid.Column>
        <Grid.Column borderRadius=""var(--4-border)"" background=""var(--primary-blue-400)"" width=""33.33%"">
          <Box
            st={{ flex: '1' }}
            px=""var(--8-space)""
            py=""var(--16-space)""
            borderRadius=""var(--4-border)""
            background=""var(--primary-blue-400)""
          >
            Одна из двух колонок
          </Box>
        </Grid.Column>
      </Grid.Row>
    </Grid>
);
export default App;
`;

const columnWrappingCode = `import { Grid, Box } from '@nlmk/ds-2.0';

const App = () => (
    <Grid borderRadius=""var(--4-border)"">
      <Grid.Row borderRadius=""var(--4-border)"" background=""var(--error-red-100)"">
        <Grid.Column borderRadius=""var(--4-border)"" background=""var(--primary-blue-400)"" width=""75%"">
          <Box
            st={{ flex: '1' }}
            px=""var(--8-space)""
            py=""var(--16-space)""
            borderRadius=""var(--4-border)""
            background=""var(--primary-blue-400)""
          >
            .col-9
          </Box>
        </Grid.Column>
        <Grid.Column borderRadius=""var(--4-border)"" background=""var(--primary-blue-400)"" width=""33.33%"">
          <Box
            st={{ flex: '1' }}
            px=""var(--8-space)""
            py=""var(--16-space)""
            borderRadius=""var(--4-border)""
            background=""var(--primary-blue-400)""
          >
            .col-4
          </Box>
          <br />
          <Box
            st={{ flex: '1' }}
            px=""var(--8-space)""
            py=""var(--16-space)""
            borderRadius=""var(--4-border)""
            background=""var(--primary-blue-400)""
          >
            Поскольку 9 + 4 = 13 &gt; 12, этот div шириной 4 колонки переносится на новую строку как единое целое.
          </Box>
        </Grid.Column>
        <Grid.Column borderRadius=""var(--4-border)"" background=""var(--primary-blue-400)"" width=""50%"">
          <Box
            st={{ flex: '1' }}
            px=""var(--8-space)""
            py=""var(--16-space)""
            borderRadius=""var(--4-border)""
            background=""var(--primary-blue-400)""
          >
            .col-6
          </Box>
          <br />
          <Box
            st={{ flex: '1' }}
            px=""var(--8-space)""
            py=""var(--16-space)""
            borderRadius=""var(--4-border)""
            background=""var(--primary-blue-400)""
          >
            Последующие колонки продолжаются на новой строке.
          </Box>
        </Grid.Column>
      </Grid.Row>
    </Grid>
);
export default App;
`;

const columnBreaksCode = `import { Grid, Box } from '@nlmk/ds-2.0';

const App = () => (
    <Grid borderRadius=""var(--4-border)"">
      <Grid.Row borderRadius=""var(--4-border)"" background=""var(--error-red-100)"">
        <Grid.Column borderRadius=""var(--4-border)"" background=""var(--primary-blue-400)"" width=""50%"">
          <Box
            st={{ flex: '1' }}
            px=""var(--8-space)""
            py=""var(--16-space)""
            borderRadius=""var(--4-border)""
            background=""var(--primary-blue-400)""
          >
            .col-6
          </Box>
        </Grid.Column>
        <Grid.Column borderRadius=""var(--4-border)"" background=""var(--primary-blue-400)"" width=""50%"">
          <Box
            st={{ flex: '1' }}
            px=""var(--8-space)""
            py=""var(--16-space)""
            borderRadius=""var(--4-border)""
            background=""var(--primary-blue-400)""
          >
            .col-6
          </Box>
        </Grid.Column>
        <Grid.Row borderRadius=""var(--4-border)"" background=""var(--error-red-100)"" width=""100%"" />
        <Grid.Column borderRadius=""var(--4-border)"" background=""var(--primary-blue-400)"" width=""50%"">
          <Box
            st={{ flex: '1' }}
            px=""var(--8-space)""
            py=""var(--16-space)""
            borderRadius=""var(--4-border)""
            background=""var(--primary-blue-400)""
          >
            .col-6
          </Box>
        </Grid.Column>
        <Grid.Column borderRadius=""var(--4-border)"" background=""var(--primary-blue-400)"" width=""50%"">
          <Box
            st={{ flex: '1' }}
            px=""var(--8-space)""
            py=""var(--16-space)""
            borderRadius=""var(--4-border)""
            background=""var(--primary-blue-400)""
          >
            .col-6
          </Box>
        </Grid.Column>
      </Grid.Row>
    </Grid>
);
export default App;
`;

const Stories = (): JSX.Element => {
  const [activeTab, setActiveTab] = useState(0);

  return (
    <div className={styles.wrapper}>
      <Header
        title=""Grid""
        description=""Компонент Grid представляет собой универсальный контейнер, используемый для позиционирования внутренних компонентов/элементов: горизонтальный или вертикальный. Он обладает различными пропсами, что делает Grid инструментом для создания структурированного и адаптивного интерфейса.""
        isStable
        codeLink=""https://github.com/nlmk-group/ds-2.0/tree/main/src/components/Grid""
        figmaLink={FIGMA_LINK}
      />

      <div className={styles.tabs}>
        <Tabs>
          <Tabs.Tab label=""Разработчику"" active={0 === Number(activeTab)} onClick={() => setActiveTab(0)} />
          {/* <Tabs.Tab label=""Дизайнеру"" active={1 === Number(activeTab)} onClick={() => setActiveTab(1)} /> */}
          <Tabs.Tab label=""Тестирование"" active={2 === Number(activeTab)} onClick={() => setActiveTab(2)} />
        </Tabs>
      </div>

      {Number(activeTab) === 0 && (
        <>
          <Editor
            height={500}
            description=""Большинство свойств стилей можно настраивать через пропсы компонента. Также все свойства доступны через пропс st.""
            code={gridExampleCode}
          />
          <Editor height={500} description=""Колонки равной ширины"" code={equalWidthColumnsCode} />
          <Editor height={500} description=""Установка ширины одной колонки"" code={settingOneColumnWidthCode} />
          <Editor height={500} description=""Переменная ширина контента"" code={variableWidthContentCode} />
          <Editor
            height={500}
            description=""Колонки равной ширины с несколькими строками""
            code={equalWidthMultiRowCode}
          />
          <Editor height={500} description=""Вертикальное выравнивание"" code={verticalAlignmentCode} />
          <Editor height={500} description=""Горизонтальное выравнивание"" code={horizontalAlignmentCode} />
          <Editor height={500} description=""Перенос колонок"" code={columnWrappingCode} />
          <Editor height={500} description=""Разрывы колонок"" code={columnBreaksCode} />
          <Properties argsTypes={argsTypes} />
        </>
      )}
      {Number(activeTab) === 1 && <FigmaEmbed url={FIGMA_LINK} />}
      {Number(activeTab) === 2 && <Tests componentName=""Grid"" />}
    </div>
  );
};

export default Stories;
"
Types for component Grid _stories argsTypes.ts,"import { sizesMappingInput } from '@components/declaration';

export const argsTypes = {
  children: {
    description: 'Элементы и компоненты внутри Box',
    control: { type: 'text' }
  },
  className: {
    description: 'В компонент можно передать альтернативные стили',
    control: { type: 'string' }
  },
  background: {
    description: 'В компонент можно передать цвет заднего фона',
    control: { type: 'color' }
  },
  color: {
    description: 'В компонент можно передать цвет',
    control: { type: 'color' }
  },
  paddingSpace: {
    description: `Размер отступов - <b>${Object.values(sizesMappingInput).join(' | ')}</b>`,
    table: {
      defaultValue: {
        summary: sizesMappingInput.m
      },
      type: {
        summary: 'string'
      }
    },
    options: Object.values(sizesMappingInput),
    control: { type: 'select' }
  },
  height: {
    description: 'В компонент можно передать кастомное значение высоты в пикселях.',
    control: { type: 'text' }
  },
  width: {
    description: 'В компонент можно передать кастомное значение ширины в пикселях.',
    control: { type: 'text' }
  },
  maxWidth: {
    description: 'В компонент можно передать кастомное значение максимальной ширины контейнера.',
    control: { type: 'text' }
  },
  gap: {
    description: 'В компонент можно передать кастомное значение отступов по умолчанию <b>var(--24-size)</b>.',
    control: { type: 'text' },
    table: {
      defaultValue: {
        summary: 'var(--24-size)'
      },
      type: {
        summary: 'string'
      }
    }
  },
  border: {
    description: 'Граница.',
    control: { type: 'text' }
  },
  borderRadius: {
    description: 'Радиус границ компонента.',
    control: { type: 'range' }
  },
  display: {
    description: 'Тип display для flex контейнера.',
    table: {
      defaultValue: {
        summary: 'flex'
      },
      type: {
        summary: 'string'
      }
    },
    options: ['flex', 'block', 'inline-block', 'grid', 'none'],
    control: { type: 'select' }
  },
  flexDirection: {
    description: 'Определяет направление элементов внутри flex контейнера.',
    table: {
      type: {
        summary: 'string'
      }
    },
    options: ['row', 'column', 'row-reverse', 'column-reverse'],
    control: { type: 'select' }
  },
  justifyContent: {
    description: 'Определяет выравнивание элементов вдоль главной оси контейнера.',
    table: {
      type: {
        summary: 'string'
      }
    },
    options: ['flex-start', 'flex-end', 'center', 'space-between', 'space-around', 'space-evenly'],
    control: { type: 'select' }
  },
  alignItems: {
    description: 'Определяет выравнивание элементов вдоль поперечной оси контейнера.',
    table: {
      type: {
        summary: 'string'
      }
    },
    options: ['flex-start', 'flex-end', 'center', 'baseline', 'stretch'],
    control: { type: 'select' }
  },
  flexWrap: {
    description: 'Определяет, могут ли элементы обертываться на новую строку.',
    table: {
      type: {
        summary: 'string'
      }
    },
    options: ['nowrap', 'wrap', 'wrap-reverse'],
    control: { type: 'select' }
  }
};
"
Styles for component Header Header.module.scss,".wrapper {
  display: flex;

  @media (max-width: 650px) {
    flex-direction: column;
  }
}

.breadcrumbs-wrapper {
  margin-bottom: var(--8-space);
}

.alternative-background {
  background-color: var(--background-paper)
}

.wrapper-default {
  padding: var(--16-space) var(--48-space);
}

.wrapper-compact {
  padding: var(--8-space) var(--24-space);
}

.breadcrumbs-wrapper {
  padding: var(--8-space) 0;
}

.title-btn-wrapper {
  display: flex;
  min-height: var(--heading2-line-height);
  gap: var(--16-space);
}

.btn-wrapper {
  button {
    padding: var(--8-space) var(--12-space);

    span {
      margin: unset;
    }
  }
}

.btn-back-icon {
  path {
    fill: var(--primary-blue-600);
  }
}

.title {
  color: var(--text-grey-900);
  overflow: hidden;
  text-overflow: ellipsis;
  display: -webkit-box;
  -webkit-line-clamp: 1;
  -webkit-box-orient: vertical;
}

.right {
  margin-left: auto;
  display: flex;
  align-items: center;
  gap: var(--24-space);
  height: var(--heading2-line-height);
  line-height: var(--heading2-line-height);
}

.button-padding-unset {
  position: relative;
  button {
    padding: unset;
  }
}

.notification-amount {
  position: absolute;
  top: 0;
  right: 0;
}

.btn-icon-size {
  svg {
    height: var(--24-size);
    width: var(--24-size);
  }
}

.favorite-icon-color {
  path {
    fill: var(--ac-icon-grey);
  }
}
"
Codes for component Header _stories Stories.tsx,"import React, { useState } from 'react';

import Editor from '@components/_storybook/Stories/components/Editor';
import Header from '@components/_storybook/Stories/components/Header';
import Properties from '@components/_storybook/Stories/components/Properties';
import Tests from '@components/_storybook/Stories/components/Tests';
import '@components/_storybook/Stories/styles.css';
import { Tabs } from '@components/index';

import styles from '@components/_storybook/Stories/Stories.module.scss';

import argsTypes from './argsTypes';
import {
  DEFAULT_HEADER,
  HEADER_BACK,
  HEADER_BACKGROUND,
  HEADER_BREADCRUMBS,
  HEADER_DATE,
  HEADER_FAVORITE,
  HEADER_NOTIFICATION,
  HEADERS_DIFFERENT_SPACING
} from './text';

enum TabIds {
  dev,
  design,
  tests
}

const COMPONENT_NAME = 'Header';

const Stories = (): JSX.Element => {
  const [activeTab, setActiveTab] = useState<TabIds>(TabIds.dev);

  const isActive = (tab: TabIds) => {
    return activeTab === tab;
  };

  return (
    <div className={styles.wrapper}>
      <Header
        title={COMPONENT_NAME}
        description=""Header - это компонент, который отображает настраиваемый верхний колонтитул (шапку) веб-страницы или приложения.""
        isBeta
        codeLink={`https://github.com/nlmk-group/ds-2.0/tree/main/src/components/${COMPONENT_NAME}`}
      />

      <div className={styles.tabs}>
        <Tabs>
          <Tabs.Tab label=""Разработчику"" active={isActive(TabIds.dev)} onClick={() => setActiveTab(TabIds.dev)} />
          <Tabs.Tab label=""Тестирование"" active={isActive(TabIds.tests)} onClick={() => setActiveTab(TabIds.tests)} />
        </Tabs>
      </div>

      {activeTab == TabIds.dev && (
        <>
          <Editor
            height={180}
            description={DEFAULT_HEADER}
            code={`import { Header } from '@nlmk/ds-2.0';

export default  App = () => (
  <Header title=""${DEFAULT_HEADER}"" />
)
              `}
          />
          <Editor
            height={200}
            description={HEADER_BACK}
            code={`import { Header } from '@nlmk/ds-2.0';

export default  App = () => (
  <Header title=""${HEADER_BACK}"" back={() => {}} />
)
              `}
          />
          <Editor
            height={180}
            description={HEADER_DATE}
            code={`import { Header } from '@nlmk/ds-2.0';

export default  App = () => (
  <Header title=""${HEADER_DATE}"" date />
)
              `}
          />
          <Editor
            height={180}
            description={HEADER_FAVORITE}
            code={`import { Header } from '@nlmk/ds-2.0';

export default  App = () => (
  <Header title=""${HEADER_FAVORITE}"" favorite={() => {}}/>
)
              `}
          />
          <Editor
            height={180}
            description={HEADER_NOTIFICATION}
            code={`import { Header } from '@nlmk/ds-2.0';

export default  App = () => (
  <Header title=""${HEADER_NOTIFICATION}"" notification={() => {}} notificationAmount={9} />
)
              `}
          />
          <Editor
            height={180}
            description={HEADER_BACKGROUND}
            code={`import { Header } from '@nlmk/ds-2.0';

export default  App = () => (
  <Header title=""${HEADER_BACKGROUND}"" bg />
)
              `}
          />
          <Editor
            description={HEADERS_DIFFERENT_SPACING}
            code={`import { Header } from '@nlmk/ds-2.0';

export default  App = () => (
  <>
    <Header title=""${HEADERS_DIFFERENT_SPACING}"" type=""default"" />
    <Header title=""${HEADERS_DIFFERENT_SPACING}"" type=""compact"" />
  </>
)
              `}
          />
          <Editor
            description={HEADER_BREADCRUMBS}
            code={`import { Header, Breadcrumbs } from '@nlmk/ds-2.0';

export default  App = () => (
  <Header title=""${HEADER_BREADCRUMBS}"" breadcrumbs={(<Breadcrumbs crumbs={[
      {
        href: 'https://developer.mozilla.org/en-US/',
        label: 'MDN'
      },
      {
        href: 'https://www.lipsum.com/',
        label: 'Lorem Ipsum'
      },
      {
        href: 'https://www.w3schools.com/',
        label: 'W3 Schools'
      },
      {
        href: 'https://css-tricks.com/',
        label: 'CSS Tricks'
      },
      {
        href: 'https://www.geeksforgeeks.org/',
        label: 'Geeks For Geeks',
        active: true
      }
    ]} />)} />
)
              `}
          />
          <Properties argsTypes={argsTypes} />
        </>
      )}
      {activeTab == TabIds.tests && <Tests componentName={COMPONENT_NAME} />}
    </div>
  );
};

export default Stories;
"
Types for component Header _stories argsTypes.ts,"import { typeMapping } from '../enums';

const argsTypes = {
  title: {
    description: 'Строка, представляющая текст, отображаемый в качестве заголовка.',
    control: { type: 'string' }
  },
  type: {
    description: 'Строка, которая задает тип заголовка, ""default"" (по умолчанию) или ""compact"" (компактный).',
    table: {
      defaultValue: {
        summary: typeMapping.default
      },
      type: {
        summary: 'string'
      }
    },
    options: Object.values(typeMapping),
    control: { type: 'select' }
  },
  bg: {
    description: 'Булево значение, которое переключает цвет фона заголовка.',
    control: { type: 'boolean' },
    table: {
      defaultValue: {
        summary: 'false'
      }
    }
  },
  back: {
    description: 'Функция обратного вызова, которая выполняется при нажатии на кнопку ""Назад"".',
    control: { type: 'boolean' },
    table: {
      defaultValue: {
        summary: 'false'
      }
    }
  },
  favorite: {
    description: 'Функция обратного вызова, которая выполняется при нажатии на кнопку ""Избранное"".',
    control: { type: 'boolean' },
    table: {
      defaultValue: {
        summary: 'false'
      }
    }
  },
  date: {
    description: 'Булево значение, которое переключает отображение текущей даты и времени',
    control: { type: 'boolean' },
    table: {
      defaultValue: {
        summary: 'false'
      }
    }
  },
  notification: {
    description: 'Функция обратного вызова, которая выполняется при нажатии кнопки уведомления.',
    control: { type: 'boolean' },
    table: {
      defaultValue: {
        summary: 'false'
      }
    }
  },
  notificationAmount: {
    description: 'Число, представляющее количество уведомлений, которые будут отображаться.',
    control: { type: 'number' },
    table: {
      defaultValue: {
        summary: '0'
      }
    }
  },
  breadcrumbs: {
    description:
      'Свойство, в которое можно добавить отдельный компонент Breadcrumbs, при этом он будет отображаться как часть Header',
    control: { type: 'string' }
  }
};

export default argsTypes;
"
Codes for component Header BtnBack.tsx,"import React, { FC, MouseEventHandler } from 'react';

import { Button, IconChevronArrowLeftFilled24 } from '@components/index';

import styles from './Header.module.scss';
import clsx from 'clsx';
const BtnBack: FC<{
  back: MouseEventHandler<HTMLButtonElement>;
}> = ({ back }): JSX.Element => {
  return (
    <div className={clsx(styles['btn-wrapper'], styles['btn-back-icon'])}>
      <Button
        data-testid='HEADER_BACK'
        onClick={back}
        iconButton={
          <IconChevronArrowLeftFilled24 />
        }
        variant='primary'
        fill='outline'
      />
    </div>
  );
};

export default BtnBack;
"
Codes for component Header BtnNotification.tsx,"import React, { FC } from 'react';
import clsx from 'clsx'
import { colorsMapping, sizesMapping } from '@components/declaration';
import { Badge, Button, IconNotificationsBellOutlined24 } from '@components/index';

import { INotification } from './types';

import styles from './Header.module.scss';

const BtnNotification: FC<INotification> = ({ notification, notificationAmount = 0 }) => {
  return (
    <div
      className={clsx(
        styles['button-padding-unset'],
        styles['btn-icon-size']
      )}
    >
      <Button
        data-testid='HEADER_NOTIFICATION'
        onClick={notification}
        iconButton={
          <IconNotificationsBellOutlined24
            htmlColor={'var(--primary-blue-600)'}
          />
        }
        variant='primary'
        fill='clear'
        size='xs'
      />
      {notificationAmount > 0 && (
        <div
          data-testid='HEADER_NOTIFICATION_AMOUNT'
          className={styles['notification-amount']}
        >
          <Badge color={colorsMapping.error} size={sizesMapping.s}>
            {notificationAmount > 99 ? '..99' : notificationAmount.toString()}
          </Badge>
        </div>
      )}
    </div>
  );
};

export default BtnNotification;
"
Codes for component Header BtnFavorite.tsx,"import React, { FC, MouseEventHandler } from 'react';
import clsx from 'clsx';

import { Button, IconStarOutlined24 } from '@components/index';

import styles from './Header.module.scss';

const BtnFavorite: FC<{
  favorite: MouseEventHandler<HTMLButtonElement>;
}> = ({ favorite }): JSX.Element => {
  return (
    <div
      className={clsx(
        styles['button-padding-unset'],
        styles['btn-icon-size']
      )}
    >
      <Button
        data-testid='HEADER_FAVORITE'
        onClick={favorite}
        className={styles['favorite-icon-color']}
        iconButton={
          <IconStarOutlined24
            htmlColor={'var(--text-grey-400)'}
          />
        }
        variant='primary'
        fill='clear'
        size='xs'
      />
    </div>
  );
};

export default BtnFavorite;
"
Types for component Header types.ts,"import { MouseEventHandler, ReactNode } from 'react';

export interface IHeader {
  title: string;
  type?: string;
  bg?: boolean;
  back?: MouseEventHandler<HTMLButtonElement>;
  favorite?: MouseEventHandler<HTMLButtonElement>;
  notification?: MouseEventHandler<HTMLButtonElement>;
  date?: boolean;
  notificationAmount?: number;
  breadcrumbs?: JSX.Element | ReactNode;
  className?: string;
}

export interface INotification {
  notification: MouseEventHandler<HTMLButtonElement>;
  notificationAmount?: number;
}
"
Types for component Header enums.ts,"/**
 * @type {enum} typeMapping
 */

export enum typeMapping {
  compact = 'compact',
  default = 'default'
}
"
Types for component Header _stories text.ts,"export const DEFAULT_HEADER = 'Заголовок по умолчанию';
export const HEADER_BACK = 'Заголовок c кнопкой назад';
export const HEADER_DATE = 'Заголовок c датой';
export const HEADER_FAVORITE = 'Заголовок c кнопкой избранное';
export const HEADER_NOTIFICATION = 'Заголовок c кнопкой уведомления';
export const HEADERS_DIFFERENT_SPACING = 'Заголовоки c разными отступами';
export const HEADER_BACKGROUND = 'Заголовоки c разными задними планами';
export const HEADER_BREADCRUMBS = 'Заголовоки c компонентом Breadcrumbs';
"
Codes for component Header index.tsx,"import React, { FC } from 'react';

import { DateTime, Typography } from '@components/.';
import { clsx } from 'clsx';

import { IHeader } from './types';

import styles from './Header.module.scss';

import BtnBack from './BtnBack';
import BtnFavorite from './BtnFavorite';
import BtnNotification from './BtnNotification';
import { typeMapping } from './enums';

const Header: FC<IHeader> = ({
  title,
  bg = false,
  type = typeMapping.default,
  back = null,
  date = false,
  favorite = null,
  notification = null,
  notificationAmount = 0,
  breadcrumbs = null,
  className
}): JSX.Element => {
  return (
    <div
      data-testid='HEADER_WRAPPER'
      className={clsx(
        styles[type === typeMapping.default ? 'wrapper-default' : 'wrapper-compact'],
        bg && styles['alternative-background'],
        className
      )}
    >
      {breadcrumbs !== null && (
        <div className={styles['breadcrumbs-wrapper']}>
          {breadcrumbs}
        </div>
      )}

      <div className={styles['wrapper']}>
        <div style={{ flex: '1' }}>
          <div className={styles['title-btn-wrapper']}>
            {back !== null && <BtnBack back={back} />}
            <div
              data-testid='HEADER_TITLE'
              className={styles.title}
              title={title}
            >
              <Typography variant='Heading2'>
                {title}
              </Typography>
            </div>
          </div>
        </div>

        <div className={styles.right}>
          {Boolean(date) && <DateTime />}
          {favorite !== null && <BtnFavorite favorite={favorite} />}
          {notification !== null && (
            <BtnNotification notification={notification} notificationAmount={notificationAmount} />
          )}
        </div>
      </div>
    </div>
  );
};

export default Header;
"
Types for component Icon IconsDirectory NLMKONE index.ts,"/**
 * Этот файл сгенерирован автоматически.
 */

export { IconBirthday16, IconBirthday24 } from './Birthday';
"
Styles for component Icon Icon.module.scss,".badge-wrapper {
  position: absolute;
  top: -4px;
  right: -4px;
}
"
Styles for component Icon _stories Icon.module.scss,"@mixin flexCenter {
  display: flex;
  align-items: center;
  justify-content: center;
}

@mixin cardStyle {
  background-color: var(--background-default);
}

@mixin iconStyle {
  display: flex;
  width: 40px;
  height: 40px;
  border-radius: 4px;
  align-items: center;
  justify-content: center;
}

.wrapper-border-radius {
  border-radius: 10px;
}

.wrapper-info {
  border-radius: 4px;
  border: 1px solid var(--divider-divider);
  overflow: hidden;
}

.wrapper {
  background-color: var(--steel-20);
  margin: 0;
  padding: 24px;
  width: 98%;
}

.sized {
  @include flexCenter;
  width: 80px;
  height: 80px;
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
}

.row {
  display: flex;
  justify-content: space-around;
  flex-wrap: wrap;
  gap: var(--24-size);
  width: 96% !important;
  margin: 0em 1em;
}

.table {
  display: flex;
  flex-wrap: wrap;
  justify-content: space-evenly;
  grid-gap: 12px;
}

.noResults {
  @include flexCenter;
}

.controls {
  @include flexCenter;
  width: 98%;
  margin-bottom: 24px;
}

.input {
  width: calc(100% - 32px);
  z-index: 100;
}

.colorControlTitle {
  white-space: nowrap;
  color: var(--text-grey-900);
}

.colorControl {
  @include flexCenter;
  gap: 12px;
  margin-left: 24px;
}

.colorInput {
  cursor: pointer;
}

.card {
  margin: 6px 0;
  width: 320px;
  height: 180px;
  height: fit-content;
  @include cardStyle;
}

.cardHeader {
  @include flexCenter;
  gap: 24px;
  margin-bottom: 20px;
  span {
    height: 22px;
  }
}

.icons {
  @include flexCenter;
  gap: 16px;
}

.icon {
  @include iconStyle;
  background-color: var(--steel-20);
}

.iconFill path {
  fill: var(--icon-color, #167ffb);
}

.strokeIcon path {
  stroke: var(--icon-color, #167ffb);
}

.fillAndStrokeIcon path {
  fill: var(--icon-color, #167ffb);
  stroke: var(--icon-color, #167ffb);
}
"
Types for component Icon _stories variables.ts,"// Иконки только со stroke
export const iconsUseStroke = [
  'IconJsonOutlined24',
  'IconLightningStroke16',
  'IconLightningStroke24',
  'IconLightningStroke32',
  'IconPhoneCallContact16',
  'IconPhoneCallContact24',
  'IconPhoneCallContact32',
  'IconTemperatureStroke16',
  'IconTemperatureStroke24',
  'IconTemperatureStroke32',
  'IconWeightTypeOutlined16',
  'IconWeightTypeOutlined24',
  'IconWeightTypeOutlined32',
  'IconMesBunkerOutlined16',
  'IconMesBunkerOutlined24',
  'IconMesBunkerOutlined32',
  'IconPicInPic16',
  'IconPicInPic24',
  'IconPicInPic32'
];
// Иконки и с fill, и со stroke
export const iconsUseFillAndStroke = [
  'IconLightningFilled16',
  'IconLightningFilled24',
  'IconLightningFilled32',
  'IconBasketBuying16',
  'IconBasketBuying24',
  'IconBasketBuying32',
  'IconPlay16',
  'IconPlay24',
  'IconPlay32',
  'IconBalanceOutlined16',
  'IconBalanceOutlined24',
  'IconBalanceOutlined32',
  'IconKovsh16',
  'IconKovsh24',
  'IconKovsh32',
  'IconWeightTypeFilled16',
  'IconWeightTypeFilled24',
  'IconWeightTypeFilled32'
];
// Иконки которые задуманы для использования только в одном цвете
export const iconsAlwaysDefaultColor = ['IconBorder16', 'IconBorder24', 'IconBorder32'];

export const rowCount = 3;
"
Types for component Icon IconsDirectory Custom index.ts,"/**
 * Этот файл сгенерирован автоматически.
 */

export { IconUploadFile32 } from './UploadFile';
export { IconUploadImage32 } from './UploadImage';
export { IconUploadVideo32 } from './UploadVideo';
"
Types for component Icon IconsDirectory Filters index.ts,"/**
 * Этот файл сгенерирован автоматически.
 */

export { IconCalendarClearToday16, IconCalendarClearToday24, IconCalendarClearToday32 } from './CalendarClearToday';
export { IconEqualsSign16, IconEqualsSign24, IconEqualsSign32 } from './EqualsSign';
export { IconExceptionContains16, IconExceptionContains24, IconExceptionContains32 } from './ExceptionContains';
export { IconFinishingContains16, IconFinishingContains24, IconFinishingContains32 } from './FinishingContains';
export { IconGreater16, IconGreater24, IconGreater32 } from './Greater';
export { IconGreaterOrEqual16, IconGreaterOrEqual24, IconGreaterOrEqual32 } from './GreaterOrEqual';
export { IconLess16, IconLess24, IconLess32 } from './Less';
export { IconLessOrEqual16, IconLessOrEqual24, IconLessOrEqual32 } from './LessOrEqual';
export { IconMultipleChoice16, IconMultipleChoice24, IconMultipleChoice32 } from './MultipleChoice';
export { IconNotEqualSign16, IconNotEqualSign24, IconNotEqualSign32 } from './NotEqualSign';
export { IconSelectionContains16, IconSelectionContains24, IconSelectionContains32 } from './SelectionContains';
export { IconStartingContains16, IconStartingContains24, IconStartingContains32 } from './StartingContains';
export { IconValueLimits16, IconValueLimits24, IconValueLimits32 } from './ValueLimits';
"
Codes for component Icon subcomponent IconContainer index.tsx,"import React, { FC } from 'react';

import { TIconContainer } from '@components/Icon/subcomponent/IconContainer/types';
import clsx from 'clsx';

import styles from './IconContainer.module.scss';

const IconContainer: FC<TIconContainer> = ({ containerSize = 24, children, className, style }) => {
  const classes = clsx(styles[`container${containerSize}` as keyof typeof styles], styles.container, className);
  return (
    <div className={classes} style={style}>
      {children}
    </div>
  );
};

export default IconContainer;
"
Types for component Icon IconsDirectory MES index.ts,"/**
 * Этот файл сгенерирован автоматически.
 */

export { IconCalculator16, IconCalculator24, IconCalculator32 } from './Calculator';
export { IconChannel16, IconChannel24, IconChannel32 } from './Channel';
export { IconExternalLink16, IconExternalLink24, IconExternalLink32 } from './ExternalLink';
export { IconFactory16, IconFactory24, IconFactory32 } from './Factory';
export { IconFilterClean16, IconFilterClean24, IconFilterClean32 } from './FilterClean';
export { IconFurmaOutlined16, IconFurmaOutlined24, IconFurmaOutlined32 } from './FurmaOutlined';
export { IconHillsView16, IconHillsView24, IconHillsView32 } from './HillsView';
export { IconKovshDomen16, IconKovshDomen24, IconKovshDomen32 } from './KovshDomen';
export { IconMesBunkerOutlined16, IconMesBunkerOutlined24, IconMesBunkerOutlined32 } from './MesBunkerOutlined';
export { IconPicInPic16, IconPicInPic24, IconPicInPic32 } from './PicInPic';
export { IconPicInPicOff16, IconPicInPicOff24, IconPicInPicOff32 } from './PicInPicOff';
export { IconPicInPicOn16, IconPicInPicOn24, IconPicInPicOn32 } from './PicInPicOn';
export {
  IconPovtornayaObrabotkaPachek16,
  IconPovtornayaObrabotkaPachek24,
  IconPovtornayaObrabotkaPachek32
} from './PovtornayaObrabotkaPachek';
export { IconSignal16, IconSignal24, IconSignal32 } from './Signal';
export { IconSmenniyRaport16, IconSmenniyRaport24, IconSmenniyRaport32 } from './SmenniyRaport';
export { IconSmennoeZadanie16, IconSmennoeZadanie24, IconSmennoeZadanie32 } from './SmennoeZadanie';
export { IconStarHalf16, IconStarHalf24, IconStarHalf32 } from './StarHalf';
export { IconVagonFull16, IconVagonFull24, IconVagonFull32 } from './VagonFull';
export { IconWeightTypeFilled16, IconWeightTypeFilled24, IconWeightTypeFilled32 } from './WeightTypeFilled';
export { IconWeightTypeOutlined16, IconWeightTypeOutlined24, IconWeightTypeOutlined32 } from './WeightTypeOutlined';
"
Codes for component Icon index.tsx,"import React, { FC } from 'react';

import { TIconComponent, TIconProps } from './types';

import styles from './Icon.module.scss';

import IconContainer from '../Icon/subcomponent/IconContainer';
import icons from './IconsDirectory';

export const Icon: FC<TIconProps> = ({
  color = 'inherit',
  name,
  containerSize = 24,
  htmlColor,
  className,
  style,
  badge
}) => {
  const iconSize = Number(name.slice(-2));

  if (!icons[iconSize] || !icons[iconSize][name]) {
    throw new Error(`Icon with name ""${name}"" does not exist in the icon library.`);
  }

  const IconComponent = icons[iconSize][name] as TIconComponent;
  return (
    <IconContainer containerSize={containerSize || iconSize} className={className} style={style}>
      {badge && <div className={styles['badge-wrapper']}>{badge}</div>}
      <IconComponent htmlColor={htmlColor} color={color} />
    </IconContainer>
  );
};

export default Icon;
"
Codes for component Icon _stories argsTypes.tsx,"import React from 'react';

import { Badge } from '@components/index';

import icons from '../IconsDirectory';

const argsTypes = {
  name: {
    description: 'Имя иконки',
    table: {
      defaultValue: {
        summary: ''
      },
      type: {
        summary: 'string'
      }
    },
    options: [...Object.keys({ ...icons[16], ...icons[24], ...icons[32] })],
    control: { type: 'select' }
  },
  color: {
    description: 'Цвет иконки',
    table: {
      defaultValue: {
        summary: 'primary'
      },
      type: {
        summary: '""action"" | ""disabled"" | ""error"" | ""primary"" | ""secondary"" | ""inherit"" | ""success"" | ""warning""'
      }
    },
    options: ['action', 'disabled', 'error', 'primary', 'secondary', 'inherit', 'success', 'warning'],
    control: { type: 'select' }
  },
  htmlColor: {
    description: 'HTML цвет иконки. Чтобы его включить нужно в опциях цвета выбрать inherit.',
    table: {
      defaultValue: {
        summary: undefined
      },
      type: {
        summary: 'string'
      }
    },
    control: { type: 'color' }
  },
  containerSize: {
    description: 'Размер контейнера иконки',
    table: {
      defaultValue: {
        summary: '24'
      },
      type: {
        summary: '""16"" | ""24"" | ""32""'
      }
    },
    options: [16, 24, 32],
    control: { type: 'select' }
  },
  badge: {
    description: 'JSX код компонента Badge',
    table: {
      defaultValue: {
        summary: ""<Badge size='s' color='error'>1</Badge>""
      },
      type: {
        summary: 'ReactNode'
      }
    },
    control: { type: 'boolean' },
    mapping: {
      false: '',
      true: (
        <Badge size=""s"" color=""error"">
          1
        </Badge>
      )
    }
  }
};

export default argsTypes;
"
Types for component Icon IconsDirectory Metallurgy index.ts,"/**
 * Этот файл сгенерирован автоматически.
 */

export {
  IconACACriticalityAnalysis16,
  IconACACriticalityAnalysis24,
  IconACACriticalityAnalysis32
} from './ACACriticalityAnalysis';
export {
  IconASIImplementationOutlined16,
  IconASIImplementationOutlined24,
  IconASIImplementationOutlined32
} from './ASIImplementationOutlined';
export { IconASM16, IconASM24, IconASM32 } from './ASM';
export { IconAnalysisnpFilled16, IconAnalysisnpFilled24, IconAnalysisnpFilled32 } from './AnalysisnpFilled';
export { IconAnalysisnpOutlined16, IconAnalysisnpOutlined24, IconAnalysisnpOutlined32 } from './AnalysisnpOutlined';
export { IconAnalyticalUIFilled16, IconAnalyticalUIFilled24, IconAnalyticalUIFilled32 } from './AnalyticalUIFilled';
export {
  IconAnalyticalUIOutlined16,
  IconAnalyticalUIOutlined24,
  IconAnalyticalUIOutlined32
} from './AnalyticalUIOutlined';
export { IconArmatura16, IconArmatura24, IconArmatura32 } from './Armatura';
export { IconArmaturaFilled16, IconArmaturaFilled24, IconArmaturaFilled32 } from './ArmaturaFilled';
export { IconBalanceFilled16, IconBalanceFilled24, IconBalanceFilled32 } from './BalanceFilled';
export { IconBalanceOutlined16, IconBalanceOutlined24, IconBalanceOutlined32 } from './BalanceOutlined';
export { IconBunkerFilled16, IconBunkerFilled24, IconBunkerFilled32 } from './BunkerFilled';
export { IconBunkerOutlined16, IconBunkerOutlined24, IconBunkerOutlined32 } from './BunkerOutlined';
export { IconChemical16, IconChemical24, IconChemical32 } from './Chemical';
export { IconChemicalFilled16, IconChemicalFilled24, IconChemicalFilled32 } from './ChemicalFilled';
export { IconControlMapsFilled16, IconControlMapsFilled24, IconControlMapsFilled32 } from './ControlMapsFilled';
export { IconControlMapsOutlined16, IconControlMapsOutlined24, IconControlMapsOutlined32 } from './ControlMapsOutlined';
export { IconCraneFilled16, IconCraneFilled24, IconCraneFilled32 } from './CraneFilled';
export { IconCraneOutlined16, IconCraneOutlined24, IconCraneOutlined32 } from './CraneOutlined';
export { IconCut16, IconCut24, IconCut32 } from './Cut';
export { IconDataFilled16, IconDataFilled24, IconDataFilled32 } from './DataFilled';
export { IconDataOutlined16, IconDataOutlined24, IconDataOutlined32 } from './DataOutlined';
export { IconDirectories16, IconDirectories24, IconDirectories32 } from './Directories';
export { IconDocsFilled16, IconDocsFilled24, IconDocsFilled32 } from './DocsFilled';
export { IconDocsOutlined16, IconDocsOutlined24, IconDocsOutlined32 } from './DocsOutlined';
export {
  IconDowntimeAnalysisFilled16,
  IconDowntimeAnalysisFilled24,
  IconDowntimeAnalysisFilled32
} from './DowntimeAnalysisFilled';
export {
  IconDowntimeAnalysisOutlined16,
  IconDowntimeAnalysisOutlined24,
  IconDowntimeAnalysisOutlined32
} from './DowntimeAnalysisOutlined';
export { IconDplayersFilled16, IconDplayersFilled24, IconDplayersFilled32 } from './DplayersFilled';
export { IconDplayersOutlined16, IconDplayersOutlined24, IconDplayersOutlined32 } from './DplayersOutlined';
export { IconGaugeIzmerenie16, IconGaugeIzmerenie24, IconGaugeIzmerenie32 } from './GaugeIzmerenie';
export {
  IconGaugeIzmerenieFilled16,
  IconGaugeIzmerenieFilled24,
  IconGaugeIzmerenieFilled32
} from './GaugeIzmerenieFilled';
export { IconHelmetFilled16, IconHelmetFilled24, IconHelmetFilled32 } from './HelmetFilled';
export { IconHelmetOutlined16, IconHelmetOutlined24, IconHelmetOutlined32 } from './HelmetOutlined';
export {
  IconIdentificationOutlined16,
  IconIdentificationOutlined24,
  IconIdentificationOutlined32
} from './IdentificationOutlined';
export { IconKPEFilled16, IconKPEFilled24, IconKPEFilled32 } from './KPEFilled';
export { IconKPEOutlined16, IconKPEOutlined24, IconKPEOutlined32 } from './KPEOutlined';
export { IconKolpak16, IconKolpak24, IconKolpak32 } from './Kolpak';
export { IconKovsh16, IconKovsh24, IconKovsh32 } from './Kovsh';
export { IconKovshFilled16, IconKovshFilled24, IconKovshFilled32 } from './KovshFilled';
export { IconKovshInProgress16, IconKovshInProgress24, IconKovshInProgress32 } from './KovshInProgress';
export { IconListSheets16, IconListSheets24, IconListSheets32 } from './ListSheets';
export { IconListSheetsFilled16, IconListSheetsFilled24, IconListSheetsFilled32 } from './ListSheetsFilled';
export { IconLotok16, IconLotok24, IconLotok32 } from './Lotok';
export { IconLotokFilled16, IconLotokFilled24, IconLotokFilled32 } from './LotokFilled';
export { IconMatrixOutlined16, IconMatrixOutlined24, IconMatrixOutlined32 } from './MatrixOutlined';
export { IconMetalFilled16, IconMetalFilled24, IconMetalFilled32 } from './MetalFilled';
export { IconMetalOutlined16, IconMetalOutlined24, IconMetalOutlined32 } from './MetalOutlined';
export { IconMetallalomScrap16, IconMetallalomScrap24, IconMetallalomScrap32 } from './MetallalomScrap';
export {
  IconMetallalomScrapFilled16,
  IconMetallalomScrapFilled24,
  IconMetallalomScrapFilled32
} from './MetallalomScrapFilled';
export { IconMixer16, IconMixer24, IconMixer32 } from './Mixer';
export { IconMixerFilled16, IconMixerFilled24, IconMixerFilled32 } from './MixerFilled';
export { IconMnemoFilled16, IconMnemoFilled24, IconMnemoFilled32 } from './MnemoFilled';
export { IconMnemoOutlined16, IconMnemoOutlined24, IconMnemoOutlined32 } from './MnemoOutlined';
export { IconModelling16, IconModelling24, IconModelling32 } from './Modelling';
export { IconPechivtoFilled16, IconPechivtoFilled24, IconPechivtoFilled32 } from './PechivtoFilled';
export { IconPechivtoOutlined16, IconPechivtoOutlined24, IconPechivtoOutlined32 } from './PechivtoOutlined';
export { IconProkat16, IconProkat24, IconProkat32 } from './Prokat';
export { IconProkatFilled16, IconProkatFilled24, IconProkatFilled32 } from './ProkatFilled';
export {
  IconRMRecommendationOutlined16,
  IconRMRecommendationOutlined24,
  IconRMRecommendationOutlined32
} from './RMRecommendationOutlined';
export { IconRollFilled16, IconRollFilled24, IconRollFilled32 } from './RollFilled';
export { IconRollOutlined16, IconRollOutlined24, IconRollOutlined32 } from './RollOutlined';
export { IconSlabFilled16, IconSlabFilled24, IconSlabFilled32 } from './SlabFilled';
export { IconSlabOutlined16, IconSlabOutlined24, IconSlabOutlined32 } from './SlabOutlined';
export { IconTackleCrane16, IconTackleCrane24, IconTackleCrane32 } from './TackleCrane';
export { IconTackleCraneFilled16, IconTackleCraneFilled24, IconTackleCraneFilled32 } from './TackleCraneFilled';
export { IconTemperatureStroke16, IconTemperatureStroke24, IconTemperatureStroke32 } from './TemperatureStroke';
export { IconTrolleyFilled16, IconTrolleyFilled24, IconTrolleyFilled32 } from './TrolleyFilled';
export { IconTrolleyOutlined16, IconTrolleyOutlined24, IconTrolleyOutlined32 } from './TrolleyOutlined';
export { IconWorker16, IconWorker24, IconWorker32 } from './Worker';
export { IconWorkerFilled16, IconWorkerFilled24, IconWorkerFilled32 } from './WorkerFilled';
"
Types for component Icon IconsDirectory SPEP index.ts,"/**
 * Этот файл сгенерирован автоматически.
 */

export { IconControlMapsNew16, IconControlMapsNew24, IconControlMapsNew32 } from './ControlMapsNew';
export {
  IconHelpNewPeopleQuestion16,
  IconHelpNewPeopleQuestion24,
  IconHelpNewPeopleQuestion32
} from './HelpNewPeopleQuestion';
export {
  IconOperationalPerformanceManagement16,
  IconOperationalPerformanceManagement24,
  IconOperationalPerformanceManagement32
} from './OperationalPerformanceManagement';
export {
  IconOperationalPerformanceManagementTimeWatch16,
  IconOperationalPerformanceManagementTimeWatch24,
  IconOperationalPerformanceManagementTimeWatch32
} from './OperationalPerformanceManagementTimeWatch';
export { IconProductAnalysis16, IconProductAnalysis24, IconProductAnalysis32 } from './ProductAnalysis';
export {
  IconProductPerformanceManagement16,
  IconProductPerformanceManagement24,
  IconProductPerformanceManagement32
} from './ProductPerformanceManagement';
"
Types for component Icon IconsDirectory index.ts,"/**
 * Этот файл сгенерирован автоматически.
 */
import { TIconsObject } from '../types';
import { IconUploadFile32, IconUploadImage32, IconUploadVideo32 } from './Custom';
import {
  IconCalendarClearToday16,
  IconCalendarClearToday24,
  IconCalendarClearToday32,
  IconEqualsSign16,
  IconEqualsSign24,
  IconEqualsSign32,
  IconExceptionContains16,
  IconExceptionContains24,
  IconExceptionContains32,
  IconFinishingContains16,
  IconFinishingContains24,
  IconFinishingContains32,
  IconGreater16,
  IconGreater24,
  IconGreater32,
  IconGreaterOrEqual16,
  IconGreaterOrEqual24,
  IconGreaterOrEqual32,
  IconLess16,
  IconLess24,
  IconLess32,
  IconLessOrEqual16,
  IconLessOrEqual24,
  IconLessOrEqual32,
  IconMultipleChoice16,
  IconMultipleChoice24,
  IconMultipleChoice32,
  IconNotEqualSign16,
  IconNotEqualSign24,
  IconNotEqualSign32,
  IconSelectionContains16,
  IconSelectionContains24,
  IconSelectionContains32,
  IconStartingContains16,
  IconStartingContains24,
  IconStartingContains32,
  IconValueLimits16,
  IconValueLimits24,
  IconValueLimits32
} from './Filters';
import {
  IconCalculator16,
  IconCalculator24,
  IconCalculator32,
  IconChannel16,
  IconChannel24,
  IconChannel32,
  IconExternalLink16,
  IconExternalLink24,
  IconExternalLink32,
  IconFactory16,
  IconFactory24,
  IconFactory32,
  IconFilterClean16,
  IconFilterClean24,
  IconFilterClean32,
  IconFurmaOutlined16,
  IconFurmaOutlined24,
  IconFurmaOutlined32,
  IconHillsView16,
  IconHillsView24,
  IconHillsView32,
  IconKovshDomen16,
  IconKovshDomen24,
  IconKovshDomen32,
  IconMesBunkerOutlined16,
  IconMesBunkerOutlined24,
  IconMesBunkerOutlined32,
  IconPicInPic16,
  IconPicInPic24,
  IconPicInPic32,
  IconPicInPicOff16,
  IconPicInPicOff24,
  IconPicInPicOff32,
  IconPicInPicOn16,
  IconPicInPicOn24,
  IconPicInPicOn32,
  IconPovtornayaObrabotkaPachek16,
  IconPovtornayaObrabotkaPachek24,
  IconPovtornayaObrabotkaPachek32,
  IconSignal16,
  IconSignal24,
  IconSignal32,
  IconSmenniyRaport16,
  IconSmenniyRaport24,
  IconSmenniyRaport32,
  IconSmennoeZadanie16,
  IconSmennoeZadanie24,
  IconSmennoeZadanie32,
  IconStarHalf16,
  IconStarHalf24,
  IconStarHalf32,
  IconVagonFull16,
  IconVagonFull24,
  IconVagonFull32,
  IconWeightTypeFilled16,
  IconWeightTypeFilled24,
  IconWeightTypeFilled32,
  IconWeightTypeOutlined16,
  IconWeightTypeOutlined24,
  IconWeightTypeOutlined32
} from './MES';
import {
  IconACACriticalityAnalysis16,
  IconACACriticalityAnalysis24,
  IconACACriticalityAnalysis32,
  IconAnalysisnpFilled16,
  IconAnalysisnpFilled24,
  IconAnalysisnpFilled32,
  IconAnalysisnpOutlined16,
  IconAnalysisnpOutlined24,
  IconAnalysisnpOutlined32,
  IconAnalyticalUIFilled16,
  IconAnalyticalUIFilled24,
  IconAnalyticalUIFilled32,
  IconAnalyticalUIOutlined16,
  IconAnalyticalUIOutlined24,
  IconAnalyticalUIOutlined32,
  IconArmatura16,
  IconArmatura24,
  IconArmatura32,
  IconArmaturaFilled16,
  IconArmaturaFilled24,
  IconArmaturaFilled32,
  IconASIImplementationOutlined16,
  IconASIImplementationOutlined24,
  IconASIImplementationOutlined32,
  IconASM16,
  IconASM24,
  IconASM32,
  IconBalanceFilled16,
  IconBalanceFilled24,
  IconBalanceFilled32,
  IconBalanceOutlined16,
  IconBalanceOutlined24,
  IconBalanceOutlined32,
  IconBunkerFilled16,
  IconBunkerFilled24,
  IconBunkerFilled32,
  IconBunkerOutlined16,
  IconBunkerOutlined24,
  IconBunkerOutlined32,
  IconChemical16,
  IconChemical24,
  IconChemical32,
  IconChemicalFilled16,
  IconChemicalFilled24,
  IconChemicalFilled32,
  IconControlMapsFilled16,
  IconControlMapsFilled24,
  IconControlMapsFilled32,
  IconControlMapsOutlined16,
  IconControlMapsOutlined24,
  IconControlMapsOutlined32,
  IconCraneFilled16,
  IconCraneFilled24,
  IconCraneFilled32,
  IconCraneOutlined16,
  IconCraneOutlined24,
  IconCraneOutlined32,
  IconCut16,
  IconCut24,
  IconCut32,
  IconDataFilled16,
  IconDataFilled24,
  IconDataFilled32,
  IconDataOutlined16,
  IconDataOutlined24,
  IconDataOutlined32,
  IconDirectories16,
  IconDirectories24,
  IconDirectories32,
  IconDocsFilled16,
  IconDocsFilled24,
  IconDocsFilled32,
  IconDocsOutlined16,
  IconDocsOutlined24,
  IconDocsOutlined32,
  IconDowntimeAnalysisFilled16,
  IconDowntimeAnalysisFilled24,
  IconDowntimeAnalysisFilled32,
  IconDowntimeAnalysisOutlined16,
  IconDowntimeAnalysisOutlined24,
  IconDowntimeAnalysisOutlined32,
  IconDplayersFilled16,
  IconDplayersFilled24,
  IconDplayersFilled32,
  IconDplayersOutlined16,
  IconDplayersOutlined24,
  IconDplayersOutlined32,
  IconGaugeIzmerenie16,
  IconGaugeIzmerenie24,
  IconGaugeIzmerenie32,
  IconGaugeIzmerenieFilled16,
  IconGaugeIzmerenieFilled24,
  IconGaugeIzmerenieFilled32,
  IconHelmetFilled16,
  IconHelmetFilled24,
  IconHelmetFilled32,
  IconHelmetOutlined16,
  IconHelmetOutlined24,
  IconHelmetOutlined32,
  IconIdentificationOutlined16,
  IconIdentificationOutlined24,
  IconIdentificationOutlined32,
  IconKolpak16,
  IconKolpak24,
  IconKolpak32,
  IconKovsh16,
  IconKovsh24,
  IconKovsh32,
  IconKovshFilled16,
  IconKovshFilled24,
  IconKovshFilled32,
  IconKovshInProgress16,
  IconKovshInProgress24,
  IconKovshInProgress32,
  IconKPEFilled16,
  IconKPEFilled24,
  IconKPEFilled32,
  IconKPEOutlined16,
  IconKPEOutlined24,
  IconKPEOutlined32,
  IconListSheets16,
  IconListSheets24,
  IconListSheets32,
  IconListSheetsFilled16,
  IconListSheetsFilled24,
  IconListSheetsFilled32,
  IconLotok16,
  IconLotok24,
  IconLotok32,
  IconLotokFilled16,
  IconLotokFilled24,
  IconLotokFilled32,
  IconMatrixOutlined16,
  IconMatrixOutlined24,
  IconMatrixOutlined32,
  IconMetalFilled16,
  IconMetalFilled24,
  IconMetalFilled32,
  IconMetallalomScrap16,
  IconMetallalomScrap24,
  IconMetallalomScrap32,
  IconMetallalomScrapFilled16,
  IconMetallalomScrapFilled24,
  IconMetallalomScrapFilled32,
  IconMetalOutlined16,
  IconMetalOutlined24,
  IconMetalOutlined32,
  IconMixer16,
  IconMixer24,
  IconMixer32,
  IconMixerFilled16,
  IconMixerFilled24,
  IconMixerFilled32,
  IconMnemoFilled16,
  IconMnemoFilled24,
  IconMnemoFilled32,
  IconMnemoOutlined16,
  IconMnemoOutlined24,
  IconMnemoOutlined32,
  IconModelling16,
  IconModelling24,
  IconModelling32,
  IconPechivtoFilled16,
  IconPechivtoFilled24,
  IconPechivtoFilled32,
  IconPechivtoOutlined16,
  IconPechivtoOutlined24,
  IconPechivtoOutlined32,
  IconProkat16,
  IconProkat24,
  IconProkat32,
  IconProkatFilled16,
  IconProkatFilled24,
  IconProkatFilled32,
  IconRMRecommendationOutlined16,
  IconRMRecommendationOutlined24,
  IconRMRecommendationOutlined32,
  IconRollFilled16,
  IconRollFilled24,
  IconRollFilled32,
  IconRollOutlined16,
  IconRollOutlined24,
  IconRollOutlined32,
  IconSlabFilled16,
  IconSlabFilled24,
  IconSlabFilled32,
  IconSlabOutlined16,
  IconSlabOutlined24,
  IconSlabOutlined32,
  IconTackleCrane16,
  IconTackleCrane24,
  IconTackleCrane32,
  IconTackleCraneFilled16,
  IconTackleCraneFilled24,
  IconTackleCraneFilled32,
  IconTemperatureStroke16,
  IconTemperatureStroke24,
  IconTemperatureStroke32,
  IconTrolleyFilled16,
  IconTrolleyFilled24,
  IconTrolleyFilled32,
  IconTrolleyOutlined16,
  IconTrolleyOutlined24,
  IconTrolleyOutlined32,
  IconWorker16,
  IconWorker24,
  IconWorker32,
  IconWorkerFilled16,
  IconWorkerFilled24,
  IconWorkerFilled32
} from './Metallurgy';
import { IconBirthday16, IconBirthday24 } from './NLMKONE';
import {
  IconControlMapsNew16,
  IconControlMapsNew24,
  IconControlMapsNew32,
  IconHelpNewPeopleQuestion16,
  IconHelpNewPeopleQuestion24,
  IconHelpNewPeopleQuestion32,
  IconOperationalPerformanceManagement16,
  IconOperationalPerformanceManagement24,
  IconOperationalPerformanceManagement32,
  IconOperationalPerformanceManagementTimeWatch16,
  IconOperationalPerformanceManagementTimeWatch24,
  IconOperationalPerformanceManagementTimeWatch32,
  IconProductAnalysis16,
  IconProductAnalysis24,
  IconProductAnalysis32,
  IconProductPerformanceManagement16,
  IconProductPerformanceManagement24,
  IconProductPerformanceManagement32
} from './SPEP';
import {
  IconAddCommentFilled16,
  IconAddCommentFilled24,
  IconAddCommentFilled32,
  IconAddCommentOutlined16,
  IconAddCommentOutlined24,
  IconAddCommentOutlined32,
  IconAddPlusCircleFilled16,
  IconAddPlusCircleFilled24,
  IconAddPlusCircleFilled32,
  IconAddPlusCircleOutlined16,
  IconAddPlusCircleOutlined24,
  IconAddPlusCircleOutlined32,
  IconAddPlusFilled16,
  IconAddPlusFilled24,
  IconAddPlusFilled32,
  IconAddPlusOutlined16,
  IconAddPlusOutlined24,
  IconAddPlusOutlined32,
  IconAllDoneDoubleCheckFilled16,
  IconAllDoneDoubleCheckFilled24,
  IconAllDoneDoubleCheckFilled32,
  IconAllDoneDoubleCheckOutlined16,
  IconAllDoneDoubleCheckOutlined24,
  IconAllDoneDoubleCheckOutlined32,
  IconAnalyticsFilled16,
  IconAnalyticsFilled24,
  IconAnalyticsFilled32,
  IconAnalyticsOutlined16,
  IconAnalyticsOutlined24,
  IconAnalyticsOutlined32,
  IconArrowBottom16,
  IconArrowBottom24,
  IconArrowBottom32,
  IconArrowDownFilled16,
  IconArrowDownFilled24,
  IconArrowDownFilled32,
  IconArrowDownOutlined16,
  IconArrowDownOutlined24,
  IconArrowDownOutlined32,
  IconArrowLeftDownFilled16,
  IconArrowLeftDownFilled24,
  IconArrowLeftDownFilled32,
  IconArrowLeftDownOutlined16,
  IconArrowLeftDownOutlined24,
  IconArrowLeftDownOutlined32,
  IconArrowLeftFilled16,
  IconArrowLeftFilled24,
  IconArrowLeftFilled32,
  IconArrowLeftOutlined16,
  IconArrowLeftOutlined24,
  IconArrowLeftOutlined32,
  IconArrowLeftUpFilled16,
  IconArrowLeftUpFilled24,
  IconArrowLeftUpFilled32,
  IconArrowRightDownFilled16,
  IconArrowRightDownFilled24,
  IconArrowRightDownFilled32,
  IconArrowRightDownOutlined16,
  IconArrowRightDownOutlined24,
  IconArrowRightDownOutlined32,
  IconArrowRightFilled16,
  IconArrowRightFilled24,
  IconArrowRightFilled32,
  IconArrowRightOutlined16,
  IconArrowRightOutlined24,
  IconArrowRightOutlined32,
  IconArrowsMultipleStopDotsFilled16,
  IconArrowsMultipleStopDotsFilled24,
  IconArrowsMultipleStopDotsFilled32,
  IconArrowsMultipleStopDotsOutlined16,
  IconArrowsMultipleStopDotsOutlined24,
  IconArrowsMultipleStopDotsOutlined32,
  IconArrowsSwapVertFilled16,
  IconArrowsSwapVertFilled24,
  IconArrowsSwapVertFilled32,
  IconArrowsSwapVertOutlined16,
  IconArrowsSwapVertOutlined24,
  IconArrowsSwapVertOutlined32,
  IconArrowTop16,
  IconArrowTop24,
  IconArrowTop32,
  IconArrowUpFilled16,
  IconArrowUpFilled24,
  IconArrowUpFilled32,
  IconArrowUpOutlined16,
  IconArrowUpOutlined24,
  IconArrowUpOutlined32,
  IconArrowUpRightFilled16,
  IconArrowUpRightFilled24,
  IconArrowUpRightFilled32,
  IconArrowUpRightOutlined16,
  IconArrowUpRightOutlined24,
  IconArrowUpRightOutlined32,
  IconArticleFilled16,
  IconArticleFilled24,
  IconArticleFilled32,
  IconArticleOutlined16,
  IconArticleOutlined24,
  IconArticleOutlined32,
  IconAttentionMarkWarningAlertFilled16,
  IconAttentionMarkWarningAlertFilled24,
  IconAttentionMarkWarningAlertFilled32,
  IconAttentionMarkWarningAlertOutlined16,
  IconAttentionMarkWarningAlertOutlined24,
  IconAttentionMarkWarningAlertOutlined32,
  IconAttentionWarningAlertErrorFilled16,
  IconAttentionWarningAlertErrorFilled24,
  IconAttentionWarningAlertErrorFilled32,
  IconAttentionWarningAlertErrorOutlined16,
  IconAttentionWarningAlertErrorOutlined24,
  IconAttentionWarningAlertErrorOutlined32,
  IconAttentionWarningAlertFilled16,
  IconAttentionWarningAlertFilled24,
  IconAttentionWarningAlertFilled32,
  IconAttentionWarningAlertOutlined16,
  IconAttentionWarningAlertOutlined24,
  IconAttentionWarningAlertOutlined32,
  IconAutoRenewReloadFilled16,
  IconAutoRenewReloadFilled24,
  IconAutoRenewReloadFilled32,
  IconAutoRenewReloadOutlined16,
  IconAutoRenewReloadOutlined24,
  IconAutoRenewReloadOutlined32,
  IconAutoRenewSystemOutlined16,
  IconAutoRenewSystemOutlined24,
  IconAutoRenewSystemOutlined32,
  IconBackSpaceFilled16,
  IconBackSpaceFilled24,
  IconBackSpaceFilled32,
  IconBackSpaceOutlined16,
  IconBackSpaceOutlined24,
  IconBackSpaceOutlined32,
  IconBarChartFilled16,
  IconBarChartFilled24,
  IconBarChartFilled32,
  IconBarChartOutlined16,
  IconBarChartOutlined24,
  IconBarChartOutlined32,
  IconBasketBuying16,
  IconBasketBuying24,
  IconBasketBuying32,
  IconBlockCloseFilled16,
  IconBlockCloseFilled24,
  IconBlockCloseFilled32,
  IconBlockCloseOutlined16,
  IconBlockCloseOutlined24,
  IconBlockCloseOutlined32,
  IconBorder16,
  IconBorder24,
  IconBorder32,
  IconBroom16,
  IconBroom24,
  IconBroom32,
  IconBugReportFilled16,
  IconBugReportFilled24,
  IconBugReportFilled32,
  IconBusinessOutlined16,
  IconBusinessOutlined24,
  IconBusinessOutlined32,
  IconCalendar2Filled16,
  IconCalendar2Filled24,
  IconCalendar2Filled32,
  IconCalendar2Outlined16,
  IconCalendar2Outlined24,
  IconCalendar2Outlined32,
  IconCalendarCheckFilled16,
  IconCalendarCheckFilled24,
  IconCalendarCheckFilled32,
  IconCalendarCheckOutlined16,
  IconCalendarCheckOutlined24,
  IconCalendarCheckOutlined32,
  IconCalendarDateFilled16,
  IconCalendarDateFilled24,
  IconCalendarDateFilled32,
  IconCalendarDateOutlined16,
  IconCalendarDateOutlined24,
  IconCalendarDateOutlined32,
  IconCalendarFilled16,
  IconCalendarFilled24,
  IconCalendarFilled32,
  IconCalendarOutlined16,
  IconCalendarOutlined24,
  IconCalendarOutlined32,
  IconCancelFilled16,
  IconCancelFilled24,
  IconCancelFilled32,
  IconCancelOutlined16,
  IconCancelOutlined24,
  IconCancelOutlined32,
  IconChevronArrowDownFilled16,
  IconChevronArrowDownFilled24,
  IconChevronArrowDownFilled32,
  IconChevronArrowDownOutlined16,
  IconChevronArrowDownOutlined24,
  IconChevronArrowDownOutlined32,
  IconChevronArrowLeftFilled16,
  IconChevronArrowLeftFilled24,
  IconChevronArrowLeftFilled32,
  IconChevronArrowLeftOutlined16,
  IconChevronArrowLeftOutlined24,
  IconChevronArrowLeftOutlined32,
  IconChevronArrowRightFilled16,
  IconChevronArrowRightFilled24,
  IconChevronArrowRightFilled32,
  IconChevronArrowRightOutlined16,
  IconChevronArrowRightOutlined24,
  IconChevronArrowRightOutlined32,
  IconChevronArrowUpFilled16,
  IconChevronArrowUpFilled24,
  IconChevronArrowUpFilled32,
  IconChevronArrowUpOutlined16,
  IconChevronArrowUpOutlined24,
  IconChevronArrowUpOutlined32,
  IconChevronFirstPageOutlined16,
  IconChevronFirstPageOutlined24,
  IconChevronFirstPageOutlined32,
  IconChevronLastPageOutlined16,
  IconChevronLastPageOutlined24,
  IconChevronLastPageOutlined32,
  IconCircleFilled16,
  IconCircleFilled24,
  IconCircleFilled32,
  IconCircleOutlined16,
  IconCircleOutlined24,
  IconCircleOutlined32,
  IconCloseFilled16,
  IconCloseFilled24,
  IconCloseFilled32,
  IconCloseOutlined16,
  IconCloseOutlined24,
  IconCloseOutlined32,
  IconCloudDoneFilled16,
  IconCloudDoneFilled24,
  IconCloudDoneFilled32,
  IconCloudDoneOutlined16,
  IconCloudDoneOutlined24,
  IconCloudDoneOutlined32,
  IconColumnFilter16,
  IconColumnFilter24,
  IconColumnFilter32,
  IconCommentChatBubbleClearFilled16,
  IconCommentChatBubbleClearFilled24,
  IconCommentChatBubbleClearFilled32,
  IconCommentChatBubbleClearOutlined16,
  IconCommentChatBubbleClearOutlined24,
  IconCommentChatBubbleClearOutlined32,
  IconCommentChatBubbleFullFilled16,
  IconCommentChatBubbleFullFilled24,
  IconCommentChatBubbleFullFilled32,
  IconCommentChatBubbleFullOutlined16,
  IconCommentChatBubbleFullOutlined24,
  IconCommentChatBubbleFullOutlined32,
  IconCommunityFilled16,
  IconCommunityFilled24,
  IconCommunityFilled32,
  IconCommunityOutlined16,
  IconCommunityOutlined24,
  IconCommunityOutlined32,
  IconContentCopyFilled16,
  IconContentCopyFilled24,
  IconContentCopyFilled32,
  IconContentCopyOutlined16,
  IconContentCopyOutlined24,
  IconContentCopyOutlined32,
  IconCornerArrowDownLeftFilled16,
  IconCornerArrowDownLeftFilled24,
  IconCornerArrowDownLeftFilled32,
  IconCornerArrowDownLeftOutlined16,
  IconCornerArrowDownLeftOutlined24,
  IconCornerArrowDownLeftOutlined32,
  IconCornerArrowDownRightFilled16,
  IconCornerArrowDownRightFilled24,
  IconCornerArrowDownRightFilled32,
  IconCornerArrowDownRightOutlined16,
  IconCornerArrowDownRightOutlined24,
  IconCornerArrowDownRightOutlined32,
  IconCornerArrowLeftDownFilled16,
  IconCornerArrowLeftDownFilled24,
  IconCornerArrowLeftDownFilled32,
  IconCornerArrowLeftDownOutlined16,
  IconCornerArrowLeftDownOutlined24,
  IconCornerArrowLeftDownOutlined32,
  IconCornerArrowLeftUpFilled16,
  IconCornerArrowLeftUpFilled24,
  IconCornerArrowLeftUpFilled32,
  IconCornerArrowLeftUpOutlined16,
  IconCornerArrowLeftUpOutlined24,
  IconCornerArrowLeftUpOutlined32,
  IconCornerArrowRightDownFilled16,
  IconCornerArrowRightDownFilled24,
  IconCornerArrowRightDownFilled32,
  IconCornerArrowRightDownOutlined16,
  IconCornerArrowRightDownOutlined24,
  IconCornerArrowRightDownOutlined32,
  IconCornerArrowRightUpFilled16,
  IconCornerArrowRightUpFilled24,
  IconCornerArrowRightUpFilled32,
  IconCornerArrowRightUpOutlined16,
  IconCornerArrowRightUpOutlined24,
  IconCornerArrowRightUpOutlined32,
  IconCornerArrowUpLeftFilled16,
  IconCornerArrowUpLeftFilled24,
  IconCornerArrowUpLeftFilled32,
  IconCornerArrowUpLeftOutlined16,
  IconCornerArrowUpLeftOutlined24,
  IconCornerArrowUpLeftOutlined32,
  IconCornerArrowUpRightFilled16,
  IconCornerArrowUpRightFilled24,
  IconCornerArrowUpRightFilled32,
  IconCornerArrowUpRightOutlined16,
  IconCornerArrowUpRightOutlined24,
  IconCornerArrowUpRightOutlined32,
  IconDarkModeFilled16,
  IconDarkModeFilled24,
  IconDarkModeFilled32,
  IconDarkModeOutlined16,
  IconDarkModeOutlined24,
  IconDarkModeOutlined32,
  IconDeleteBinFilled16,
  IconDeleteBinFilled24,
  IconDeleteBinFilled32,
  IconDeleteBinOutlined16,
  IconDeleteBinOutlined24,
  IconDeleteBinOutlined32,
  IconDeleteMinusFilled16,
  IconDeleteMinusFilled24,
  IconDeleteMinusFilled32,
  IconDeleteMinusOutlined16,
  IconDeleteMinusOutlined24,
  IconDeleteMinusOutlined32,
  IconDirectionsTransitTrainTransportFilled16,
  IconDirectionsTransitTrainTransportFilled24,
  IconDirectionsTransitTrainTransportFilled32,
  IconDirectionsTransitTrainTransportOutlined16,
  IconDirectionsTransitTrainTransportOutlined24,
  IconDirectionsTransitTrainTransportOutlined32,
  IconDirectoriesFilled16,
  IconDirectoriesFilled24,
  IconDirectoriesFilled32,
  IconDirectoriesOutlined16,
  IconDirectoriesOutlined24,
  IconDirectoriesOutlined32,
  IconDNSFilled16,
  IconDNSFilled24,
  IconDNSFilled32,
  IconDNSOutlined16,
  IconDNSOutlined24,
  IconDNSOutlined32,
  IconDoneCheckFilled16,
  IconDoneCheckFilled24,
  IconDoneCheckFilled32,
  IconDoneCheckOutlined16,
  IconDoneCheckOutlined24,
  IconDoneCheckOutlined32,
  IconDownloadFilled16,
  IconDownloadFilled24,
  IconDownloadFilled32,
  IconDownloadOutlined16,
  IconDownloadOutlined24,
  IconDownloadOutlined32,
  IconDragIndicatorDotsFilled16,
  IconDragIndicatorDotsFilled24,
  IconDragIndicatorDotsFilled32,
  IconDragIndicatorDotsOutlined16,
  IconDragIndicatorDotsOutlined24,
  IconDragIndicatorDotsOutlined32,
  IconDvrFilled16,
  IconDvrFilled24,
  IconDvrFilled32,
  IconDvrOutlined16,
  IconDvrOutlined24,
  IconDvrOutlined32,
  IconEditPenFilled16,
  IconEditPenFilled24,
  IconEditPenFilled32,
  IconEditPenOutlined16,
  IconEditPenOutlined24,
  IconEditPenOutlined32,
  IconEducationFilled16,
  IconEducationFilled24,
  IconEducationFilled32,
  IconEducationOutlined16,
  IconEducationOutlined24,
  IconEducationOutlined32,
  IconEnterFilled16,
  IconEnterFilled24,
  IconEnterFilled32,
  IconEnterOutlined16,
  IconEnterOutlined24,
  IconEnterOutlined32,
  IconExitFilled16,
  IconExitFilled24,
  IconExitFilled32,
  IconExitOutlined16,
  IconExitOutlined24,
  IconExitOutlined32,
  IconEyeFilled16,
  IconEyeFilled24,
  IconEyeFilled32,
  IconEyeglassesFill16,
  IconEyeglassesFill24,
  IconEyeglassesFill32,
  IconEyeglassesOutlined16,
  IconEyeglassesOutlined24,
  IconEyeglassesOutlined32,
  IconEyeOffFilled16,
  IconEyeOffFilled24,
  IconEyeOffFilled32,
  IconEyeOffOutlined16,
  IconEyeOffOutlined24,
  IconEyeOffOutlined32,
  IconEyeOutlined16,
  IconEyeOutlined24,
  IconEyeOutlined32,
  IconFilterListFilled16,
  IconFilterListFilled24,
  IconFilterListFilled32,
  IconFilterListOutlined16,
  IconFilterListOutlined24,
  IconFilterListOutlined32,
  IconFilterSortAscendedFilled16,
  IconFilterSortAscendedFilled24,
  IconFilterSortAscendedFilled32,
  IconFilterSortAscendedOutlined16,
  IconFilterSortAscendedOutlined24,
  IconFilterSortAscendedOutlined32,
  IconFilterSortFilled16,
  IconFilterSortFilled24,
  IconFilterSortFilled32,
  IconFilterSortOutlined16,
  IconFilterSortOutlined24,
  IconFilterSortOutlined32,
  IconFolderFilled16,
  IconFolderFilled24,
  IconFolderFilled32,
  IconFolderHumanFilled16,
  IconFolderHumanFilled24,
  IconFolderHumanFilled32,
  IconFolderHumanOutlined16,
  IconFolderHumanOutlined24,
  IconFolderHumanOutlined32,
  IconFolderOutlined16,
  IconFolderOutlined24,
  IconFolderOutlined32,
  IconFormatLineSpacingOutlined16,
  IconFormatLineSpacingOutlined24,
  IconFormatLineSpacingOutlined32,
  IconFormatListFilled16,
  IconFormatListFilled24,
  IconFormatListFilled32,
  IconFormatListNumberedFilled16,
  IconFormatListNumberedFilled24,
  IconFormatListNumberedFilled32,
  IconFormatListNumberedOutlined16,
  IconFormatListNumberedOutlined24,
  IconFormatListNumberedOutlined32,
  IconFormatListOutlined16,
  IconFormatListOutlined24,
  IconFormatListOutlined32,
  IconFormula16,
  IconFormula24,
  IconFormula32,
  IconFormula44,
  IconFullScreenExitCloseFilled16,
  IconFullScreenExitCloseFilled24,
  IconFullScreenExitCloseFilled32,
  IconFullScreenExitCloseOutlined16,
  IconFullScreenExitCloseOutlined24,
  IconFullScreenExitCloseOutlined32,
  IconFullScreenOpenFilled16,
  IconFullScreenOpenFilled24,
  IconFullScreenOpenFilled32,
  IconFullScreenOpenOutlined16,
  IconFullScreenOpenOutlined24,
  IconFullScreenOpenOutlined32,
  IconGraphChartTimeline16,
  IconGraphChartTimeline24,
  IconGraphChartTimeline32,
  IconHandPanToolPalmsFilled16,
  IconHandPanToolPalmsFilled24,
  IconHandPanToolPalmsFilled32,
  IconHandPanToolPalmsOutlined16,
  IconHandPanToolPalmsOutlined24,
  IconHandPanToolPalmsOutlined32,
  IconHeartFilled16,
  IconHeartFilled24,
  IconHeartFilled32,
  IconHeartOutlined16,
  IconHeartOutlined24,
  IconHeartOutlined32,
  IconHelperMailOutlined16,
  IconHelperMailOutlined24,
  IconHelperMailOutlined32,
  IconHelpFilled16,
  IconHelpFilled24,
  IconHelpFilled32,
  IconHelpOutlined16,
  IconHelpOutlined24,
  IconHelpOutlined32,
  IconHomeOutlined16,
  IconHomeOutlined24,
  IconHomeOutlined32,
  IconHourglassEmptyOutlined16,
  IconHourglassEmptyOutlined24,
  IconHourglassEmptyOutlined32,
  IconInfoFilled16,
  IconInfoFilled24,
  IconInfoFilled32,
  IconInfoOutlined16,
  IconInfoOutlined24,
  IconInfoOutlined32,
  IconInputFilled16,
  IconInputFilled24,
  IconInputFilled32,
  IconInputOutlined16,
  IconInputOutlined24,
  IconInputOutlined32,
  IconInsertChartFilled16,
  IconInsertChartFilled24,
  IconInsertChartFilled32,
  IconInsertChartOutlined16,
  IconInsertChartOutlined24,
  IconInsertChartOutlined32,
  IconInsertDriveFileFilled16,
  IconInsertDriveFileFilled24,
  IconInsertDriveFileFilled32,
  IconInsertDriveFileOutlined16,
  IconInsertDriveFileOutlined24,
  IconInsertDriveFileOutlined32,
  IconInteractionFilled16,
  IconInteractionFilled24,
  IconInteractionFilled32,
  IconInteractionOutlined16,
  IconInteractionOutlined24,
  IconInteractionOutlined32,
  IconJsonOutlined16,
  IconJsonOutlined24,
  IconJsonOutlined32,
  IconKeyboardDoubleArrowLeftChevronFilled16,
  IconKeyboardDoubleArrowLeftChevronFilled24,
  IconKeyboardDoubleArrowLeftChevronFilled32,
  IconKeyboardDoubleArrowLeftChevronOutlined16,
  IconKeyboardDoubleArrowLeftChevronOutlined24,
  IconKeyboardDoubleArrowLeftChevronOutlined32,
  IconKeyboardDoubleArrowRightChevronFilled16,
  IconKeyboardDoubleArrowRightChevronFilled24,
  IconKeyboardDoubleArrowRightChevronFilled32,
  IconKeyboardDoubleArrowRightChevronOutlined16,
  IconKeyboardDoubleArrowRightChevronOutlined24,
  IconKeyboardDoubleArrowRightChevronOutlined32,
  IconLightModeFilled16,
  IconLightModeFilled24,
  IconLightModeFilled32,
  IconLightModeOutlined16,
  IconLightModeOutlined24,
  IconLightModeOutlined32,
  IconLightningFilled16,
  IconLightningFilled24,
  IconLightningFilled32,
  IconLightningStroke16,
  IconLightningStroke24,
  IconLightningStroke32,
  IconListAltFilled16,
  IconListAltFilled24,
  IconListAltFilled32,
  IconListAltOutlined16,
  IconListAltOutlined24,
  IconListAltOutlined32,
  IconListDelete16,
  IconListDelete24,
  IconListDelete32,
  IconLocationPinaltFilled16,
  IconLocationPinaltFilled24,
  IconLocationPinaltFilled32,
  IconLocationPinaltOutlined16,
  IconLocationPinaltOutlined24,
  IconLocationPinaltOutlined32,
  IconLockCloseFilled16,
  IconLockCloseFilled24,
  IconLockCloseFilled32,
  IconLockCloseOutlined16,
  IconLockCloseOutlined24,
  IconLockCloseOutlined32,
  IconLockOpenFilled16,
  IconLockOpenFilled24,
  IconLockOpenFilled32,
  IconLockOpenOutlined16,
  IconLockOpenOutlined24,
  IconLockOpenOutlined32,
  IconLogoBrandJiraFilled16,
  IconLogoBrandJiraFilled24,
  IconLogoBrandJiraFilled32,
  IconLogoBrandJiraOutlined16,
  IconLogoBrandJiraOutlined24,
  IconLogoBrandJiraOutlined32,
  IconMapFilled16,
  IconMapFilled24,
  IconMapFilled32,
  IconMapOutlined16,
  IconMapOutlined24,
  IconMapOutlined32,
  IconMapPinaltFilled16,
  IconMapPinaltFilled24,
  IconMapPinaltFilled32,
  IconMapPinaltOutlined16,
  IconMapPinaltOutlined24,
  IconMapPinaltOutlined32,
  IconMarkUnreadMailboxOutlined16,
  IconMarkUnreadMailboxOutlined24,
  IconMarkUnreadMailboxOutlined32,
  IconMenuBurgerFilled16,
  IconMenuBurgerFilled24,
  IconMenuBurgerFilled32,
  IconMenuBurgerOutlined16,
  IconMenuBurgerOutlined24,
  IconMenuBurgerOutlined32,
  IconMoreHorizDotsFilled16,
  IconMoreHorizDotsFilled24,
  IconMoreHorizDotsFilled32,
  IconMoreHorizDotsOutlined16,
  IconMoreHorizDotsOutlined24,
  IconMoreHorizDotsOutlined32,
  IconMoreVertDotsFilled16,
  IconMoreVertDotsFilled24,
  IconMoreVertDotsFilled32,
  IconMoreVertDotsOutlined16,
  IconMoreVertDotsOutlined24,
  IconMoreVertDotsOutlined32,
  IconNotificationsBellFilled16,
  IconNotificationsBellFilled24,
  IconNotificationsBellFilled32,
  IconNotificationsBellOffFilled16,
  IconNotificationsBellOffFilled24,
  IconNotificationsBellOffFilled32,
  IconNotificationsBellOutlined16,
  IconNotificationsBellOutlined24,
  IconNotificationsBellOutlined32,
  IconParentalLeaveFilled16,
  IconParentalLeaveFilled24,
  IconParentalLeaveFilled32,
  IconPauseFilled16,
  IconPauseFilled24,
  IconPauseFilled32,
  IconPeopleCancelFilled16,
  IconPeopleCancelFilled24,
  IconPeopleCancelFilled32,
  IconPeopleCancelOutlined16,
  IconPeopleCancelOutlined24,
  IconPeopleCancelOutlined32,
  IconPeopleCheckDoneFilled16,
  IconPeopleCheckDoneFilled24,
  IconPeopleCheckDoneFilled32,
  IconPeopleCheckDoneOutlined16,
  IconPeopleCheckDoneOutlined24,
  IconPeopleCheckDoneOutlined32,
  IconPersonFilled16,
  IconPersonFilled24,
  IconPersonFilled32,
  IconPersonOutlined16,
  IconPersonOutlined24,
  IconPersonOutlined32,
  IconPhoneCallContact16,
  IconPhoneCallContact24,
  IconPhoneCallContact32,
  IconPhotoCameraOutlined16,
  IconPhotoCameraOutlined24,
  IconPhotoCameraOutlined32,
  IconPictureInPictureOff16,
  IconPictureInPictureOff24,
  IconPictureInPictureOff32,
  IconPictureInPictureOn16,
  IconPictureInPictureOn24,
  IconPictureInPictureOn32,
  IconPlay16,
  IconPlay24,
  IconPlay32,
  IconPlayerStop16,
  IconPlayerStop24,
  IconPlayerStop32,
  IconPlaylistAddMenuFilled16,
  IconPlaylistAddMenuFilled24,
  IconPlaylistAddMenuFilled32,
  IconPlaylistAddMenuOutlined16,
  IconPlaylistAddMenuOutlined24,
  IconPlaylistAddMenuOutlined32,
  IconPlaylistMenuSettingFilled16,
  IconPlaylistMenuSettingFilled24,
  IconPlaylistMenuSettingFilled32,
  IconPlaylistMenuSettingOutlined16,
  IconPlaylistMenuSettingOutlined24,
  IconPlaylistMenuSettingOutlined32,
  IconPlayOutlined16,
  IconPlayOutlined24,
  IconPlayOutlined32,
  IconPrintFilled16,
  IconPrintFilled24,
  IconPrintFilled32,
  IconPrintOutlined16,
  IconPrintOutlined24,
  IconPrintOutlined32,
  IconPushPinFilled16,
  IconPushPinFilled24,
  IconPushPinFilled32,
  IconPushPinOutlined16,
  IconPushPinOutlined24,
  IconPushPinOutlined32,
  IconQualityFilled16,
  IconQualityFilled24,
  IconQualityFilled32,
  IconQualityOutlined16,
  IconQualityOutlined24,
  IconQualityOutlined32,
  IconQuestionMarkFilled16,
  IconQuestionMarkFilled24,
  IconQuestionMarkFilled32,
  IconQuestionMarkOutlined16,
  IconQuestionMarkOutlined24,
  IconQuestionMarkOutlined32,
  IconRedoArrowFilled16,
  IconRedoArrowFilled24,
  IconRedoArrowFilled32,
  IconRedoArrowOutlined16,
  IconRedoArrowOutlined24,
  IconRedoArrowOutlined32,
  IconRepairWrenchFrom16,
  IconRepairWrenchFrom24,
  IconRepairWrenchFrom32,
  IconRepairWrenchTo16,
  IconRepairWrenchTo24,
  IconRepairWrenchTo32,
  IconReplayOutlined16,
  IconReplayOutlined24,
  IconReplayOutlined32,
  IconReservedFrom16,
  IconReservedFrom24,
  IconReservedFrom32,
  IconReservedTo16,
  IconReservedTo24,
  IconReservedTo32,
  IconResizingOutlined16,
  IconRightColumnArrowFilled16,
  IconRightColumnArrowFilled24,
  IconRightColumnArrowFilled32,
  IconRightColumnArrowOutlined16,
  IconRightColumnArrowOutlined24,
  IconRightColumnArrowOutlined32,
  IconRoundedArrowBackFilled16,
  IconRoundedArrowBackFilled24,
  IconRoundedArrowBackFilled32,
  IconRoundedArrowBackOutlined16,
  IconRoundedArrowBackOutlined24,
  IconRoundedArrowBackOutlined32,
  IconRoundedArrowForwardFilled16,
  IconRoundedArrowForwardFilled24,
  IconRoundedArrowForwardFilled32,
  IconRoundedArrowForwardOutlined16,
  IconRoundedArrowForwardOutlined24,
  IconRoundedArrowForwardOutlined32,
  IconSaveFilled16,
  IconSaveFilled24,
  IconSaveFilled32,
  IconSaveOutlined16,
  IconSaveOutlined24,
  IconSaveOutlined32,
  IconScheduleTimeWatchFilled16,
  IconScheduleTimeWatchFilled24,
  IconScheduleTimeWatchFilled32,
  IconScheduleTimeWatchOutlined16,
  IconScheduleTimeWatchOutlined24,
  IconScheduleTimeWatchOutlined32,
  IconSearchFilled16,
  IconSearchFilled24,
  IconSearchFilled32,
  IconSearchOutlined16,
  IconSearchOutlined24,
  IconSearchOutlined32,
  IconSendFilled16,
  IconSendFilled24,
  IconSendFilled32,
  IconSendOutlined16,
  IconSendOutlined24,
  IconSendOutlined32,
  IconSettingFilled16,
  IconSettingFilled24,
  IconSettingFilled32,
  IconSettingOutlined16,
  IconSettingOutlined24,
  IconSettingOutlined32,
  IconSettingsAltFilled16,
  IconSettingsAltFilled24,
  IconSettingsAltFilled32,
  IconSettingsAltOutlined16,
  IconSettingsAltOutlined24,
  IconSettingsAltOutlined32,
  IconSourceDataFilled16,
  IconSourceDataFilled24,
  IconSourceDataFilled32,
  IconSourceDataOutlined16,
  IconSourceDataOutlined24,
  IconSourceDataOutlined32,
  IconSourceDocCopyOutlined16,
  IconSourceDocCopyOutlined24,
  IconSourceDocCopyOutlined32,
  IconSourceDocFilled16,
  IconSourceDocFilled24,
  IconSourceDocFilled32,
  IconStackCollapsed16,
  IconStackCollapsed24,
  IconStackCollapsed32,
  IconStackExpandedTriangleDown16,
  IconStackExpandedTriangleDown24,
  IconStackExpandedTriangleDown32,
  IconStackExpandedTriangleUp16,
  IconStackExpandedTriangleUp24,
  IconStackExpandedTriangleUp32,
  IconStaffUnitFilled16,
  IconStaffUnitFilled24,
  IconStaffUnitFilled32,
  IconStaffUnitOutlined16,
  IconStaffUnitOutlined24,
  IconStaffUnitOutlined32,
  IconStarFilled16,
  IconStarFilled24,
  IconStarFilled32,
  IconStarOutlined16,
  IconStarOutlined24,
  IconStarOutlined32,
  IconSuccessFilled16,
  IconSuccessFilled24,
  IconSuccessFilled32,
  IconSuccessOutlined16,
  IconSuccessOutlined24,
  IconSuccessOutlined32,
  IconTaskFilled16,
  IconTaskFilled24,
  IconTaskFilled32,
  IconTaskOutlined16,
  IconTaskOutlined24,
  IconTaskOutlined32,
  IconTelegramFilled16,
  IconTelegramFilled24,
  IconTelegramFilled32,
  IconThumbsUpLike16,
  IconThumbsUpLike24,
  IconThumbsUpLike32,
  IconTopicFilled16,
  IconTopicFilled24,
  IconTopicFilled32,
  IconTopicOutlined16,
  IconTopicOutlined24,
  IconTopicOutlined32,
  IconTransportCarTaxiFilled16,
  IconTransportCarTaxiFilled24,
  IconTransportCarTaxiFilled32,
  IconTransportCarTaxiOutlined16,
  IconTransportCarTaxiOutlined24,
  IconTransportCarTaxiOutlined32,
  IconTransportCarTruckLorryFilled16,
  IconTransportCarTruckLorryFilled24,
  IconTransportCarTruckLorryFilled32,
  IconTransportCarTruckLorryOutlined16,
  IconTransportCarTruckLorryOutlined24,
  IconTransportCarTruckLorryOutlined32,
  IconTuneControlFilled16,
  IconTuneControlFilled24,
  IconTuneControlFilled32,
  IconTuneControlOutlined16,
  IconTuneControlOutlined24,
  IconTuneControlOutlined32,
  IconUndoArrowFilled16,
  IconUndoArrowFilled24,
  IconUndoArrowFilled32,
  IconUndoArrowOutlined16,
  IconUndoArrowOutlined24,
  IconUndoArrowOutlined32,
  IconUploadFilled16,
  IconUploadFilled24,
  IconUploadFilled32,
  IconUploadOutlined16,
  IconUploadOutlined24,
  IconUploadOutlined32,
  IconVacancyFilled16,
  IconVacancyFilled24,
  IconVacancyFilled32,
  IconVacancyOutlined16,
  IconVacancyOutlined24,
  IconVacancyOutlined32,
  IconVagon16,
  IconVagon24,
  IconVagon32,
  IconVerticalAlignTopFilled16,
  IconVerticalAlignTopFilled24,
  IconVerticalAlignTopFilled32,
  IconVerticalAlignTopOutlined16,
  IconVerticalAlignTopOutlined24,
  IconVerticalAlignTopOutlined32,
  IconVideoCameraOffOutlined16,
  IconVideoCameraOffOutlined24,
  IconVideoCameraOffOutlined32,
  IconVideoCameraOnOutlined16,
  IconVideoCameraOnOutlined24,
  IconVideoCameraOnOutlined32,
  IconWarningFilled16,
  IconWarningFilled24,
  IconWarningFilled32,
  IconWhatShotFireFilled16,
  IconWhatShotFireFilled24,
  IconWhatShotFireFilled32,
  IconWhatShotFireOutlined16,
  IconWhatShotFireOutlined24,
  IconWhatShotFireOutlined32,
  IconWiFiFilled16,
  IconWiFiFilled24,
  IconWiFiFilled32,
  IconWiFiOutlined16,
  IconWiFiOutlined24,
  IconWiFiOutlined32,
  IconZoomInFilled16,
  IconZoomInFilled24,
  IconZoomInFilled32,
  IconZoomInOutlined16,
  IconZoomInOutlined24,
  IconZoomInOutlined32,
  IconZoomOutFilled16,
  IconZoomOutFilled24,
  IconZoomOutFilled32,
  IconZoomOutOutlined16,
  IconZoomOutOutlined24,
  IconZoomOutOutlined32
} from './System';

export {
  IconAddCommentFilled16,
  IconAddCommentFilled24,
  IconAddCommentFilled32,
  IconAddCommentOutlined16,
  IconAddCommentOutlined24,
  IconAddCommentOutlined32,
  IconAddPlusCircleFilled16,
  IconAddPlusCircleFilled24,
  IconAddPlusCircleFilled32,
  IconAddPlusCircleOutlined16,
  IconAddPlusCircleOutlined24,
  IconAddPlusCircleOutlined32,
  IconAddPlusFilled16,
  IconAddPlusFilled24,
  IconAddPlusFilled32,
  IconAddPlusOutlined16,
  IconAddPlusOutlined24,
  IconAddPlusOutlined32,
  IconAllDoneDoubleCheckFilled16,
  IconAllDoneDoubleCheckFilled24,
  IconAllDoneDoubleCheckFilled32,
  IconAllDoneDoubleCheckOutlined16,
  IconAllDoneDoubleCheckOutlined24,
  IconAllDoneDoubleCheckOutlined32,
  IconAnalyticsFilled16,
  IconAnalyticsFilled24,
  IconAnalyticsFilled32,
  IconAnalyticsOutlined16,
  IconAnalyticsOutlined24,
  IconAnalyticsOutlined32,
  IconArrowBottom16,
  IconArrowBottom24,
  IconArrowBottom32,
  IconArrowDownFilled16,
  IconArrowDownFilled24,
  IconArrowDownFilled32,
  IconArrowDownOutlined16,
  IconArrowDownOutlined24,
  IconArrowDownOutlined32,
  IconArrowLeftDownFilled16,
  IconArrowLeftDownFilled24,
  IconArrowLeftDownFilled32,
  IconArrowLeftDownOutlined16,
  IconArrowLeftDownOutlined24,
  IconArrowLeftDownOutlined32,
  IconArrowLeftFilled16,
  IconArrowLeftFilled24,
  IconArrowLeftFilled32,
  IconArrowLeftOutlined16,
  IconArrowLeftOutlined24,
  IconArrowLeftOutlined32,
  IconArrowLeftUpFilled16,
  IconArrowLeftUpFilled24,
  IconArrowLeftUpFilled32,
  IconArrowRightDownFilled16,
  IconArrowRightDownFilled24,
  IconArrowRightDownFilled32,
  IconArrowRightDownOutlined16,
  IconArrowRightDownOutlined24,
  IconArrowRightDownOutlined32,
  IconArrowRightFilled16,
  IconArrowRightFilled24,
  IconArrowRightFilled32,
  IconArrowRightOutlined16,
  IconArrowRightOutlined24,
  IconArrowRightOutlined32,
  IconArrowTop16,
  IconArrowTop24,
  IconArrowTop32,
  IconArrowUpFilled16,
  IconArrowUpFilled24,
  IconArrowUpFilled32,
  IconArrowUpOutlined16,
  IconArrowUpOutlined24,
  IconArrowUpOutlined32,
  IconArrowUpRightFilled16,
  IconArrowUpRightFilled24,
  IconArrowUpRightFilled32,
  IconArrowUpRightOutlined16,
  IconArrowUpRightOutlined24,
  IconArrowUpRightOutlined32,
  IconArrowsMultipleStopDotsFilled16,
  IconArrowsMultipleStopDotsFilled24,
  IconArrowsMultipleStopDotsFilled32,
  IconArrowsMultipleStopDotsOutlined16,
  IconArrowsMultipleStopDotsOutlined24,
  IconArrowsMultipleStopDotsOutlined32,
  IconArrowsSwapVertFilled16,
  IconArrowsSwapVertFilled24,
  IconArrowsSwapVertFilled32,
  IconArrowsSwapVertOutlined16,
  IconArrowsSwapVertOutlined24,
  IconArrowsSwapVertOutlined32,
  IconArticleFilled16,
  IconArticleFilled24,
  IconArticleFilled32,
  IconArticleOutlined16,
  IconArticleOutlined24,
  IconArticleOutlined32,
  IconAttentionMarkWarningAlertFilled16,
  IconAttentionMarkWarningAlertFilled24,
  IconAttentionMarkWarningAlertFilled32,
  IconAttentionMarkWarningAlertOutlined16,
  IconAttentionMarkWarningAlertOutlined24,
  IconAttentionMarkWarningAlertOutlined32,
  IconAttentionWarningAlertErrorFilled16,
  IconAttentionWarningAlertErrorFilled24,
  IconAttentionWarningAlertErrorFilled32,
  IconAttentionWarningAlertErrorOutlined16,
  IconAttentionWarningAlertErrorOutlined24,
  IconAttentionWarningAlertErrorOutlined32,
  IconAttentionWarningAlertFilled16,
  IconAttentionWarningAlertFilled24,
  IconAttentionWarningAlertFilled32,
  IconAttentionWarningAlertOutlined16,
  IconAttentionWarningAlertOutlined24,
  IconAttentionWarningAlertOutlined32,
  IconAutoRenewReloadFilled16,
  IconAutoRenewReloadFilled24,
  IconAutoRenewReloadFilled32,
  IconAutoRenewReloadOutlined16,
  IconAutoRenewReloadOutlined24,
  IconAutoRenewReloadOutlined32,
  IconAutoRenewSystemOutlined16,
  IconAutoRenewSystemOutlined24,
  IconAutoRenewSystemOutlined32,
  IconBackSpaceFilled16,
  IconBackSpaceFilled24,
  IconBackSpaceFilled32,
  IconBackSpaceOutlined16,
  IconBackSpaceOutlined24,
  IconBackSpaceOutlined32,
  IconBarChartFilled16,
  IconBarChartFilled24,
  IconBarChartFilled32,
  IconBarChartOutlined16,
  IconBarChartOutlined24,
  IconBarChartOutlined32,
  IconBasketBuying16,
  IconBasketBuying24,
  IconBasketBuying32,
  IconBlockCloseFilled16,
  IconBlockCloseFilled24,
  IconBlockCloseFilled32,
  IconBlockCloseOutlined16,
  IconBlockCloseOutlined24,
  IconBlockCloseOutlined32,
  IconBorder16,
  IconBorder24,
  IconBorder32,
  IconBroom16,
  IconBroom24,
  IconBroom32,
  IconBugReportFilled16,
  IconBugReportFilled24,
  IconBugReportFilled32,
  IconBusinessOutlined16,
  IconBusinessOutlined24,
  IconBusinessOutlined32,
  IconCalendar2Filled16,
  IconCalendar2Filled24,
  IconCalendar2Filled32,
  IconCalendar2Outlined16,
  IconCalendar2Outlined24,
  IconCalendar2Outlined32,
  IconCalendarCheckFilled16,
  IconCalendarCheckFilled24,
  IconCalendarCheckFilled32,
  IconCalendarCheckOutlined16,
  IconCalendarCheckOutlined24,
  IconCalendarCheckOutlined32,
  IconCalendarDateFilled16,
  IconCalendarDateFilled24,
  IconCalendarDateFilled32,
  IconCalendarDateOutlined16,
  IconCalendarDateOutlined24,
  IconCalendarDateOutlined32,
  IconCalendarFilled16,
  IconCalendarFilled24,
  IconCalendarFilled32,
  IconCalendarOutlined16,
  IconCalendarOutlined24,
  IconCalendarOutlined32,
  IconCancelFilled16,
  IconCancelFilled24,
  IconCancelFilled32,
  IconCancelOutlined16,
  IconCancelOutlined24,
  IconCancelOutlined32,
  IconChevronArrowDownFilled16,
  IconChevronArrowDownFilled24,
  IconChevronArrowDownFilled32,
  IconChevronArrowDownOutlined16,
  IconChevronArrowDownOutlined24,
  IconChevronArrowDownOutlined32,
  IconChevronArrowLeftFilled16,
  IconChevronArrowLeftFilled24,
  IconChevronArrowLeftFilled32,
  IconChevronArrowLeftOutlined16,
  IconChevronArrowLeftOutlined24,
  IconChevronArrowLeftOutlined32,
  IconChevronArrowRightFilled16,
  IconChevronArrowRightFilled24,
  IconChevronArrowRightFilled32,
  IconChevronArrowRightOutlined16,
  IconChevronArrowRightOutlined24,
  IconChevronArrowRightOutlined32,
  IconChevronArrowUpFilled16,
  IconChevronArrowUpFilled24,
  IconChevronArrowUpFilled32,
  IconChevronArrowUpOutlined16,
  IconChevronArrowUpOutlined24,
  IconChevronArrowUpOutlined32,
  IconChevronFirstPageOutlined16,
  IconChevronFirstPageOutlined24,
  IconChevronFirstPageOutlined32,
  IconChevronLastPageOutlined16,
  IconChevronLastPageOutlined24,
  IconChevronLastPageOutlined32,
  IconCircleFilled16,
  IconCircleFilled24,
  IconCircleFilled32,
  IconCircleOutlined16,
  IconCircleOutlined24,
  IconCircleOutlined32,
  IconCloseFilled16,
  IconCloseFilled24,
  IconCloseFilled32,
  IconCloseOutlined16,
  IconCloseOutlined24,
  IconCloseOutlined32,
  IconCloudDoneFilled16,
  IconCloudDoneFilled24,
  IconCloudDoneFilled32,
  IconCloudDoneOutlined16,
  IconCloudDoneOutlined24,
  IconCloudDoneOutlined32,
  IconColumnFilter16,
  IconColumnFilter24,
  IconColumnFilter32,
  IconCommentChatBubbleClearFilled16,
  IconCommentChatBubbleClearFilled24,
  IconCommentChatBubbleClearFilled32,
  IconCommentChatBubbleClearOutlined16,
  IconCommentChatBubbleClearOutlined24,
  IconCommentChatBubbleClearOutlined32,
  IconCommentChatBubbleFullFilled16,
  IconCommentChatBubbleFullFilled24,
  IconCommentChatBubbleFullFilled32,
  IconCommentChatBubbleFullOutlined16,
  IconCommentChatBubbleFullOutlined24,
  IconCommentChatBubbleFullOutlined32,
  IconCommunityFilled16,
  IconCommunityFilled24,
  IconCommunityFilled32,
  IconCommunityOutlined16,
  IconCommunityOutlined24,
  IconCommunityOutlined32,
  IconContentCopyFilled16,
  IconContentCopyFilled24,
  IconContentCopyFilled32,
  IconContentCopyOutlined16,
  IconContentCopyOutlined24,
  IconContentCopyOutlined32,
  IconCornerArrowDownLeftFilled16,
  IconCornerArrowDownLeftFilled24,
  IconCornerArrowDownLeftFilled32,
  IconCornerArrowDownLeftOutlined16,
  IconCornerArrowDownLeftOutlined24,
  IconCornerArrowDownLeftOutlined32,
  IconCornerArrowDownRightFilled16,
  IconCornerArrowDownRightFilled24,
  IconCornerArrowDownRightFilled32,
  IconCornerArrowDownRightOutlined16,
  IconCornerArrowDownRightOutlined24,
  IconCornerArrowDownRightOutlined32,
  IconCornerArrowLeftDownFilled16,
  IconCornerArrowLeftDownFilled24,
  IconCornerArrowLeftDownFilled32,
  IconCornerArrowLeftDownOutlined16,
  IconCornerArrowLeftDownOutlined24,
  IconCornerArrowLeftDownOutlined32,
  IconCornerArrowLeftUpFilled16,
  IconCornerArrowLeftUpFilled24,
  IconCornerArrowLeftUpFilled32,
  IconCornerArrowLeftUpOutlined16,
  IconCornerArrowLeftUpOutlined24,
  IconCornerArrowLeftUpOutlined32,
  IconCornerArrowRightDownFilled16,
  IconCornerArrowRightDownFilled24,
  IconCornerArrowRightDownFilled32,
  IconCornerArrowRightDownOutlined16,
  IconCornerArrowRightDownOutlined24,
  IconCornerArrowRightDownOutlined32,
  IconCornerArrowRightUpFilled16,
  IconCornerArrowRightUpFilled24,
  IconCornerArrowRightUpFilled32,
  IconCornerArrowRightUpOutlined16,
  IconCornerArrowRightUpOutlined24,
  IconCornerArrowRightUpOutlined32,
  IconCornerArrowUpLeftFilled16,
  IconCornerArrowUpLeftFilled24,
  IconCornerArrowUpLeftFilled32,
  IconCornerArrowUpLeftOutlined16,
  IconCornerArrowUpLeftOutlined24,
  IconCornerArrowUpLeftOutlined32,
  IconCornerArrowUpRightFilled16,
  IconCornerArrowUpRightFilled24,
  IconCornerArrowUpRightFilled32,
  IconCornerArrowUpRightOutlined16,
  IconCornerArrowUpRightOutlined24,
  IconCornerArrowUpRightOutlined32,
  IconDNSFilled16,
  IconDNSFilled24,
  IconDNSFilled32,
  IconDNSOutlined16,
  IconDNSOutlined24,
  IconDNSOutlined32,
  IconDarkModeFilled16,
  IconDarkModeFilled24,
  IconDarkModeFilled32,
  IconDarkModeOutlined16,
  IconDarkModeOutlined24,
  IconDarkModeOutlined32,
  IconDeleteBinFilled16,
  IconDeleteBinFilled24,
  IconDeleteBinFilled32,
  IconDeleteBinOutlined16,
  IconDeleteBinOutlined24,
  IconDeleteBinOutlined32,
  IconDeleteMinusFilled16,
  IconDeleteMinusFilled24,
  IconDeleteMinusFilled32,
  IconDeleteMinusOutlined16,
  IconDeleteMinusOutlined24,
  IconDeleteMinusOutlined32,
  IconDirectionsTransitTrainTransportFilled16,
  IconDirectionsTransitTrainTransportFilled24,
  IconDirectionsTransitTrainTransportFilled32,
  IconDirectionsTransitTrainTransportOutlined16,
  IconDirectionsTransitTrainTransportOutlined24,
  IconDirectionsTransitTrainTransportOutlined32,
  IconDirectoriesFilled16,
  IconDirectoriesFilled24,
  IconDirectoriesFilled32,
  IconDirectoriesOutlined16,
  IconDirectoriesOutlined24,
  IconDirectoriesOutlined32,
  IconDoneCheckFilled16,
  IconDoneCheckFilled24,
  IconDoneCheckFilled32,
  IconDoneCheckOutlined16,
  IconDoneCheckOutlined24,
  IconDoneCheckOutlined32,
  IconDownloadFilled16,
  IconDownloadFilled24,
  IconDownloadFilled32,
  IconDownloadOutlined16,
  IconDownloadOutlined24,
  IconDownloadOutlined32,
  IconDragIndicatorDotsFilled16,
  IconDragIndicatorDotsFilled24,
  IconDragIndicatorDotsFilled32,
  IconDragIndicatorDotsOutlined16,
  IconDragIndicatorDotsOutlined24,
  IconDragIndicatorDotsOutlined32,
  IconDvrFilled16,
  IconDvrFilled24,
  IconDvrFilled32,
  IconDvrOutlined16,
  IconDvrOutlined24,
  IconDvrOutlined32,
  IconEditPenFilled16,
  IconEditPenFilled24,
  IconEditPenFilled32,
  IconEditPenOutlined16,
  IconEditPenOutlined24,
  IconEditPenOutlined32,
  IconEducationFilled16,
  IconEducationFilled24,
  IconEducationFilled32,
  IconEducationOutlined16,
  IconEducationOutlined24,
  IconEducationOutlined32,
  IconEnterFilled16,
  IconEnterFilled24,
  IconEnterFilled32,
  IconEnterOutlined16,
  IconEnterOutlined24,
  IconEnterOutlined32,
  IconExitFilled16,
  IconExitFilled24,
  IconExitFilled32,
  IconExitOutlined16,
  IconExitOutlined24,
  IconExitOutlined32,
  IconEyeFilled16,
  IconEyeFilled24,
  IconEyeFilled32,
  IconEyeOffFilled16,
  IconEyeOffFilled24,
  IconEyeOffFilled32,
  IconEyeOffOutlined16,
  IconEyeOffOutlined24,
  IconEyeOffOutlined32,
  IconEyeOutlined16,
  IconEyeOutlined24,
  IconEyeOutlined32,
  IconEyeglassesFill16,
  IconEyeglassesFill24,
  IconEyeglassesFill32,
  IconEyeglassesOutlined16,
  IconEyeglassesOutlined24,
  IconEyeglassesOutlined32,
  IconFilterListFilled16,
  IconFilterListFilled24,
  IconFilterListFilled32,
  IconFilterListOutlined16,
  IconFilterListOutlined24,
  IconFilterListOutlined32,
  IconFilterSortAscendedFilled16,
  IconFilterSortAscendedFilled24,
  IconFilterSortAscendedFilled32,
  IconFilterSortAscendedOutlined16,
  IconFilterSortAscendedOutlined24,
  IconFilterSortAscendedOutlined32,
  IconFilterSortFilled16,
  IconFilterSortFilled24,
  IconFilterSortFilled32,
  IconFilterSortOutlined16,
  IconFilterSortOutlined24,
  IconFilterSortOutlined32,
  IconFolderFilled16,
  IconFolderFilled24,
  IconFolderFilled32,
  IconFolderHumanFilled16,
  IconFolderHumanFilled24,
  IconFolderHumanFilled32,
  IconFolderHumanOutlined16,
  IconFolderHumanOutlined24,
  IconFolderHumanOutlined32,
  IconFolderOutlined16,
  IconFolderOutlined24,
  IconFolderOutlined32,
  IconFormatLineSpacingOutlined16,
  IconFormatLineSpacingOutlined24,
  IconFormatLineSpacingOutlined32,
  IconFormatListFilled16,
  IconFormatListFilled24,
  IconFormatListFilled32,
  IconFormatListNumberedFilled16,
  IconFormatListNumberedFilled24,
  IconFormatListNumberedFilled32,
  IconFormatListNumberedOutlined16,
  IconFormatListNumberedOutlined24,
  IconFormatListNumberedOutlined32,
  IconFormatListOutlined16,
  IconFormatListOutlined24,
  IconFormatListOutlined32,
  IconFormula16,
  IconFormula24,
  IconFormula32,
  IconFormula44,
  IconFullScreenExitCloseFilled16,
  IconFullScreenExitCloseFilled24,
  IconFullScreenExitCloseFilled32,
  IconFullScreenExitCloseOutlined16,
  IconFullScreenExitCloseOutlined24,
  IconFullScreenExitCloseOutlined32,
  IconFullScreenOpenFilled16,
  IconFullScreenOpenFilled24,
  IconFullScreenOpenFilled32,
  IconFullScreenOpenOutlined16,
  IconFullScreenOpenOutlined24,
  IconFullScreenOpenOutlined32,
  IconGraphChartTimeline16,
  IconGraphChartTimeline24,
  IconGraphChartTimeline32,
  IconHandPanToolPalmsFilled16,
  IconHandPanToolPalmsFilled24,
  IconHandPanToolPalmsFilled32,
  IconHandPanToolPalmsOutlined16,
  IconHandPanToolPalmsOutlined24,
  IconHandPanToolPalmsOutlined32,
  IconHeartFilled16,
  IconHeartFilled24,
  IconHeartFilled32,
  IconHeartOutlined16,
  IconHeartOutlined24,
  IconHeartOutlined32,
  IconHelpFilled16,
  IconHelpFilled24,
  IconHelpFilled32,
  IconHelpOutlined16,
  IconHelpOutlined24,
  IconHelpOutlined32,
  IconHelperMailOutlined16,
  IconHelperMailOutlined24,
  IconHelperMailOutlined32,
  IconHomeOutlined16,
  IconHomeOutlined24,
  IconHomeOutlined32,
  IconHourglassEmptyOutlined16,
  IconHourglassEmptyOutlined24,
  IconHourglassEmptyOutlined32,
  IconInfoFilled16,
  IconInfoFilled24,
  IconInfoFilled32,
  IconInfoOutlined16,
  IconInfoOutlined24,
  IconInfoOutlined32,
  IconInputFilled16,
  IconInputFilled24,
  IconInputFilled32,
  IconInputOutlined16,
  IconInputOutlined24,
  IconInputOutlined32,
  IconInsertChartFilled16,
  IconInsertChartFilled24,
  IconInsertChartFilled32,
  IconInsertChartOutlined16,
  IconInsertChartOutlined24,
  IconInsertChartOutlined32,
  IconInsertDriveFileFilled16,
  IconInsertDriveFileFilled24,
  IconInsertDriveFileFilled32,
  IconInsertDriveFileOutlined16,
  IconInsertDriveFileOutlined24,
  IconInsertDriveFileOutlined32,
  IconInteractionFilled16,
  IconInteractionFilled24,
  IconInteractionFilled32,
  IconInteractionOutlined16,
  IconInteractionOutlined24,
  IconInteractionOutlined32,
  IconJsonOutlined16,
  IconJsonOutlined24,
  IconJsonOutlined32,
  IconKeyboardDoubleArrowLeftChevronFilled16,
  IconKeyboardDoubleArrowLeftChevronFilled24,
  IconKeyboardDoubleArrowLeftChevronFilled32,
  IconKeyboardDoubleArrowLeftChevronOutlined16,
  IconKeyboardDoubleArrowLeftChevronOutlined24,
  IconKeyboardDoubleArrowLeftChevronOutlined32,
  IconKeyboardDoubleArrowRightChevronFilled16,
  IconKeyboardDoubleArrowRightChevronFilled24,
  IconKeyboardDoubleArrowRightChevronFilled32,
  IconKeyboardDoubleArrowRightChevronOutlined16,
  IconKeyboardDoubleArrowRightChevronOutlined24,
  IconKeyboardDoubleArrowRightChevronOutlined32,
  IconLightModeFilled16,
  IconLightModeFilled24,
  IconLightModeFilled32,
  IconLightModeOutlined16,
  IconLightModeOutlined24,
  IconLightModeOutlined32,
  IconLightningFilled16,
  IconLightningFilled24,
  IconLightningFilled32,
  IconLightningStroke16,
  IconLightningStroke24,
  IconLightningStroke32,
  IconListAltFilled16,
  IconListAltFilled24,
  IconListAltFilled32,
  IconListAltOutlined16,
  IconListAltOutlined24,
  IconListAltOutlined32,
  IconListDelete16,
  IconListDelete24,
  IconListDelete32,
  IconLocationPinaltFilled16,
  IconLocationPinaltFilled24,
  IconLocationPinaltFilled32,
  IconLocationPinaltOutlined16,
  IconLocationPinaltOutlined24,
  IconLocationPinaltOutlined32,
  IconLockCloseFilled16,
  IconLockCloseFilled24,
  IconLockCloseFilled32,
  IconLockCloseOutlined16,
  IconLockCloseOutlined24,
  IconLockCloseOutlined32,
  IconLockOpenFilled16,
  IconLockOpenFilled24,
  IconLockOpenFilled32,
  IconLockOpenOutlined16,
  IconLockOpenOutlined24,
  IconLockOpenOutlined32,
  IconLogoBrandJiraFilled16,
  IconLogoBrandJiraFilled24,
  IconLogoBrandJiraFilled32,
  IconLogoBrandJiraOutlined16,
  IconLogoBrandJiraOutlined24,
  IconLogoBrandJiraOutlined32,
  IconMapFilled16,
  IconMapFilled24,
  IconMapFilled32,
  IconMapOutlined16,
  IconMapOutlined24,
  IconMapOutlined32,
  IconMapPinaltFilled16,
  IconMapPinaltFilled24,
  IconMapPinaltFilled32,
  IconMapPinaltOutlined16,
  IconMapPinaltOutlined24,
  IconMapPinaltOutlined32,
  IconMarkUnreadMailboxOutlined16,
  IconMarkUnreadMailboxOutlined24,
  IconMarkUnreadMailboxOutlined32,
  IconMenuBurgerFilled16,
  IconMenuBurgerFilled24,
  IconMenuBurgerFilled32,
  IconMenuBurgerOutlined16,
  IconMenuBurgerOutlined24,
  IconMenuBurgerOutlined32,
  IconMoreHorizDotsFilled16,
  IconMoreHorizDotsFilled24,
  IconMoreHorizDotsFilled32,
  IconMoreHorizDotsOutlined16,
  IconMoreHorizDotsOutlined24,
  IconMoreHorizDotsOutlined32,
  IconMoreVertDotsFilled16,
  IconMoreVertDotsFilled24,
  IconMoreVertDotsFilled32,
  IconMoreVertDotsOutlined16,
  IconMoreVertDotsOutlined24,
  IconMoreVertDotsOutlined32,
  IconNotificationsBellFilled16,
  IconNotificationsBellFilled24,
  IconNotificationsBellFilled32,
  IconNotificationsBellOffFilled16,
  IconNotificationsBellOffFilled24,
  IconNotificationsBellOffFilled32,
  IconNotificationsBellOutlined16,
  IconNotificationsBellOutlined24,
  IconNotificationsBellOutlined32,
  IconParentalLeaveFilled16,
  IconParentalLeaveFilled24,
  IconParentalLeaveFilled32,
  IconPauseFilled16,
  IconPauseFilled24,
  IconPauseFilled32,
  IconPeopleCancelFilled16,
  IconPeopleCancelFilled24,
  IconPeopleCancelFilled32,
  IconPeopleCancelOutlined16,
  IconPeopleCancelOutlined24,
  IconPeopleCancelOutlined32,
  IconPeopleCheckDoneFilled16,
  IconPeopleCheckDoneFilled24,
  IconPeopleCheckDoneFilled32,
  IconPeopleCheckDoneOutlined16,
  IconPeopleCheckDoneOutlined24,
  IconPeopleCheckDoneOutlined32,
  IconPersonFilled16,
  IconPersonFilled24,
  IconPersonFilled32,
  IconPersonOutlined16,
  IconPersonOutlined24,
  IconPersonOutlined32,
  IconPhoneCallContact16,
  IconPhoneCallContact24,
  IconPhoneCallContact32,
  IconPhotoCameraOutlined16,
  IconPhotoCameraOutlined24,
  IconPhotoCameraOutlined32,
  IconPictureInPictureOff16,
  IconPictureInPictureOff24,
  IconPictureInPictureOff32,
  IconPictureInPictureOn16,
  IconPictureInPictureOn24,
  IconPictureInPictureOn32,
  IconPlay16,
  IconPlay24,
  IconPlay32,
  IconPlayOutlined16,
  IconPlayOutlined24,
  IconPlayOutlined32,
  IconPlayerStop16,
  IconPlayerStop24,
  IconPlayerStop32,
  IconPlaylistAddMenuFilled16,
  IconPlaylistAddMenuFilled24,
  IconPlaylistAddMenuFilled32,
  IconPlaylistAddMenuOutlined16,
  IconPlaylistAddMenuOutlined24,
  IconPlaylistAddMenuOutlined32,
  IconPlaylistMenuSettingFilled16,
  IconPlaylistMenuSettingFilled24,
  IconPlaylistMenuSettingFilled32,
  IconPlaylistMenuSettingOutlined16,
  IconPlaylistMenuSettingOutlined24,
  IconPlaylistMenuSettingOutlined32,
  IconPrintFilled16,
  IconPrintFilled24,
  IconPrintFilled32,
  IconPrintOutlined16,
  IconPrintOutlined24,
  IconPrintOutlined32,
  IconPushPinFilled16,
  IconPushPinFilled24,
  IconPushPinFilled32,
  IconPushPinOutlined16,
  IconPushPinOutlined24,
  IconPushPinOutlined32,
  IconQualityFilled16,
  IconQualityFilled24,
  IconQualityFilled32,
  IconQualityOutlined16,
  IconQualityOutlined24,
  IconQualityOutlined32,
  IconQuestionMarkFilled16,
  IconQuestionMarkFilled24,
  IconQuestionMarkFilled32,
  IconQuestionMarkOutlined16,
  IconQuestionMarkOutlined24,
  IconQuestionMarkOutlined32,
  IconRedoArrowFilled16,
  IconRedoArrowFilled24,
  IconRedoArrowFilled32,
  IconRedoArrowOutlined16,
  IconRedoArrowOutlined24,
  IconRedoArrowOutlined32,
  IconRepairWrenchFrom16,
  IconRepairWrenchFrom24,
  IconRepairWrenchFrom32,
  IconRepairWrenchTo16,
  IconRepairWrenchTo24,
  IconRepairWrenchTo32,
  IconReplayOutlined16,
  IconReplayOutlined24,
  IconReplayOutlined32,
  IconReservedFrom16,
  IconReservedFrom24,
  IconReservedFrom32,
  IconReservedTo16,
  IconReservedTo24,
  IconReservedTo32,
  IconResizingOutlined16,
  IconRightColumnArrowFilled16,
  IconRightColumnArrowFilled24,
  IconRightColumnArrowFilled32,
  IconRightColumnArrowOutlined16,
  IconRightColumnArrowOutlined24,
  IconRightColumnArrowOutlined32,
  IconRoundedArrowBackFilled16,
  IconRoundedArrowBackFilled24,
  IconRoundedArrowBackFilled32,
  IconRoundedArrowBackOutlined16,
  IconRoundedArrowBackOutlined24,
  IconRoundedArrowBackOutlined32,
  IconRoundedArrowForwardFilled16,
  IconRoundedArrowForwardFilled24,
  IconRoundedArrowForwardFilled32,
  IconRoundedArrowForwardOutlined16,
  IconRoundedArrowForwardOutlined24,
  IconRoundedArrowForwardOutlined32,
  IconSaveFilled16,
  IconSaveFilled24,
  IconSaveFilled32,
  IconSaveOutlined16,
  IconSaveOutlined24,
  IconSaveOutlined32,
  IconScheduleTimeWatchFilled16,
  IconScheduleTimeWatchFilled24,
  IconScheduleTimeWatchFilled32,
  IconScheduleTimeWatchOutlined16,
  IconScheduleTimeWatchOutlined24,
  IconScheduleTimeWatchOutlined32,
  IconSearchFilled16,
  IconSearchFilled24,
  IconSearchFilled32,
  IconSearchOutlined16,
  IconSearchOutlined24,
  IconSearchOutlined32,
  IconSendFilled16,
  IconSendFilled24,
  IconSendFilled32,
  IconSendOutlined16,
  IconSendOutlined24,
  IconSendOutlined32,
  IconSettingFilled16,
  IconSettingFilled24,
  IconSettingFilled32,
  IconSettingOutlined16,
  IconSettingOutlined24,
  IconSettingOutlined32,
  IconSettingsAltFilled16,
  IconSettingsAltFilled24,
  IconSettingsAltFilled32,
  IconSettingsAltOutlined16,
  IconSettingsAltOutlined24,
  IconSettingsAltOutlined32,
  IconSourceDataFilled16,
  IconSourceDataFilled24,
  IconSourceDataFilled32,
  IconSourceDataOutlined16,
  IconSourceDataOutlined24,
  IconSourceDataOutlined32,
  IconSourceDocCopyOutlined16,
  IconSourceDocCopyOutlined24,
  IconSourceDocCopyOutlined32,
  IconSourceDocFilled16,
  IconSourceDocFilled24,
  IconSourceDocFilled32,
  IconStackCollapsed16,
  IconStackCollapsed24,
  IconStackCollapsed32,
  IconStackExpandedTriangleDown16,
  IconStackExpandedTriangleDown24,
  IconStackExpandedTriangleDown32,
  IconStackExpandedTriangleUp16,
  IconStackExpandedTriangleUp24,
  IconStackExpandedTriangleUp32,
  IconStaffUnitFilled16,
  IconStaffUnitFilled24,
  IconStaffUnitFilled32,
  IconStaffUnitOutlined16,
  IconStaffUnitOutlined24,
  IconStaffUnitOutlined32,
  IconStarFilled16,
  IconStarFilled24,
  IconStarFilled32,
  IconStarOutlined16,
  IconStarOutlined24,
  IconStarOutlined32,
  IconSuccessFilled16,
  IconSuccessFilled24,
  IconSuccessFilled32,
  IconSuccessOutlined16,
  IconSuccessOutlined24,
  IconSuccessOutlined32,
  IconTaskFilled16,
  IconTaskFilled24,
  IconTaskFilled32,
  IconTaskOutlined16,
  IconTaskOutlined24,
  IconTaskOutlined32,
  IconTelegramFilled16,
  IconTelegramFilled24,
  IconTelegramFilled32,
  IconThumbsUpLike16,
  IconThumbsUpLike24,
  IconThumbsUpLike32,
  IconTopicFilled16,
  IconTopicFilled24,
  IconTopicFilled32,
  IconTopicOutlined16,
  IconTopicOutlined24,
  IconTopicOutlined32,
  IconTransportCarTaxiFilled16,
  IconTransportCarTaxiFilled24,
  IconTransportCarTaxiFilled32,
  IconTransportCarTaxiOutlined16,
  IconTransportCarTaxiOutlined24,
  IconTransportCarTaxiOutlined32,
  IconTransportCarTruckLorryFilled16,
  IconTransportCarTruckLorryFilled24,
  IconTransportCarTruckLorryFilled32,
  IconTransportCarTruckLorryOutlined16,
  IconTransportCarTruckLorryOutlined24,
  IconTransportCarTruckLorryOutlined32,
  IconTuneControlFilled16,
  IconTuneControlFilled24,
  IconTuneControlFilled32,
  IconTuneControlOutlined16,
  IconTuneControlOutlined24,
  IconTuneControlOutlined32,
  IconUndoArrowFilled16,
  IconUndoArrowFilled24,
  IconUndoArrowFilled32,
  IconUndoArrowOutlined16,
  IconUndoArrowOutlined24,
  IconUndoArrowOutlined32,
  IconUploadFilled16,
  IconUploadFilled24,
  IconUploadFilled32,
  IconUploadOutlined16,
  IconUploadOutlined24,
  IconUploadOutlined32,
  IconVacancyFilled16,
  IconVacancyFilled24,
  IconVacancyFilled32,
  IconVacancyOutlined16,
  IconVacancyOutlined24,
  IconVacancyOutlined32,
  IconVagon16,
  IconVagon24,
  IconVagon32,
  IconVerticalAlignTopFilled16,
  IconVerticalAlignTopFilled24,
  IconVerticalAlignTopFilled32,
  IconVerticalAlignTopOutlined16,
  IconVerticalAlignTopOutlined24,
  IconVerticalAlignTopOutlined32,
  IconVideoCameraOffOutlined16,
  IconVideoCameraOffOutlined24,
  IconVideoCameraOffOutlined32,
  IconVideoCameraOnOutlined16,
  IconVideoCameraOnOutlined24,
  IconVideoCameraOnOutlined32,
  IconWarningFilled16,
  IconWarningFilled24,
  IconWarningFilled32,
  IconWhatShotFireFilled16,
  IconWhatShotFireFilled24,
  IconWhatShotFireFilled32,
  IconWhatShotFireOutlined16,
  IconWhatShotFireOutlined24,
  IconWhatShotFireOutlined32,
  IconWiFiFilled16,
  IconWiFiFilled24,
  IconWiFiFilled32,
  IconWiFiOutlined16,
  IconWiFiOutlined24,
  IconWiFiOutlined32,
  IconZoomInFilled16,
  IconZoomInFilled24,
  IconZoomInFilled32,
  IconZoomInOutlined16,
  IconZoomInOutlined24,
  IconZoomInOutlined32,
  IconZoomOutFilled16,
  IconZoomOutFilled24,
  IconZoomOutFilled32,
  IconZoomOutOutlined16,
  IconZoomOutOutlined24,
  IconZoomOutOutlined32
};

export {
  IconACACriticalityAnalysis16,
  IconACACriticalityAnalysis24,
  IconACACriticalityAnalysis32,
  IconASIImplementationOutlined16,
  IconASIImplementationOutlined24,
  IconASIImplementationOutlined32,
  IconASM16,
  IconASM24,
  IconASM32,
  IconAnalysisnpFilled16,
  IconAnalysisnpFilled24,
  IconAnalysisnpFilled32,
  IconAnalysisnpOutlined16,
  IconAnalysisnpOutlined24,
  IconAnalysisnpOutlined32,
  IconAnalyticalUIFilled16,
  IconAnalyticalUIFilled24,
  IconAnalyticalUIFilled32,
  IconAnalyticalUIOutlined16,
  IconAnalyticalUIOutlined24,
  IconAnalyticalUIOutlined32,
  IconArmatura16,
  IconArmatura24,
  IconArmatura32,
  IconArmaturaFilled16,
  IconArmaturaFilled24,
  IconArmaturaFilled32,
  IconBalanceFilled16,
  IconBalanceFilled24,
  IconBalanceFilled32,
  IconBalanceOutlined16,
  IconBalanceOutlined24,
  IconBalanceOutlined32,
  IconBunkerFilled16,
  IconBunkerFilled24,
  IconBunkerFilled32,
  IconBunkerOutlined16,
  IconBunkerOutlined24,
  IconBunkerOutlined32,
  IconChemical16,
  IconChemical24,
  IconChemical32,
  IconChemicalFilled16,
  IconChemicalFilled24,
  IconChemicalFilled32,
  IconControlMapsFilled16,
  IconControlMapsFilled24,
  IconControlMapsFilled32,
  IconControlMapsOutlined16,
  IconControlMapsOutlined24,
  IconControlMapsOutlined32,
  IconCraneFilled16,
  IconCraneFilled24,
  IconCraneFilled32,
  IconCraneOutlined16,
  IconCraneOutlined24,
  IconCraneOutlined32,
  IconCut16,
  IconCut24,
  IconCut32,
  IconDataFilled16,
  IconDataFilled24,
  IconDataFilled32,
  IconDataOutlined16,
  IconDataOutlined24,
  IconDataOutlined32,
  IconDirectories16,
  IconDirectories24,
  IconDirectories32,
  IconDocsFilled16,
  IconDocsFilled24,
  IconDocsFilled32,
  IconDocsOutlined16,
  IconDocsOutlined24,
  IconDocsOutlined32,
  IconDowntimeAnalysisFilled16,
  IconDowntimeAnalysisFilled24,
  IconDowntimeAnalysisFilled32,
  IconDowntimeAnalysisOutlined16,
  IconDowntimeAnalysisOutlined24,
  IconDowntimeAnalysisOutlined32,
  IconDplayersFilled16,
  IconDplayersFilled24,
  IconDplayersFilled32,
  IconDplayersOutlined16,
  IconDplayersOutlined24,
  IconDplayersOutlined32,
  IconGaugeIzmerenie16,
  IconGaugeIzmerenie24,
  IconGaugeIzmerenie32,
  IconGaugeIzmerenieFilled16,
  IconGaugeIzmerenieFilled24,
  IconGaugeIzmerenieFilled32,
  IconHelmetFilled16,
  IconHelmetFilled24,
  IconHelmetFilled32,
  IconHelmetOutlined16,
  IconHelmetOutlined24,
  IconHelmetOutlined32,
  IconIdentificationOutlined16,
  IconIdentificationOutlined24,
  IconIdentificationOutlined32,
  IconKPEFilled16,
  IconKPEFilled24,
  IconKPEFilled32,
  IconKPEOutlined16,
  IconKPEOutlined24,
  IconKPEOutlined32,
  IconKolpak16,
  IconKolpak24,
  IconKolpak32,
  IconKovsh16,
  IconKovsh24,
  IconKovsh32,
  IconKovshFilled16,
  IconKovshFilled24,
  IconKovshFilled32,
  IconKovshInProgress16,
  IconKovshInProgress24,
  IconKovshInProgress32,
  IconListSheets16,
  IconListSheets24,
  IconListSheets32,
  IconListSheetsFilled16,
  IconListSheetsFilled24,
  IconListSheetsFilled32,
  IconLotok16,
  IconLotok24,
  IconLotok32,
  IconLotokFilled16,
  IconLotokFilled24,
  IconLotokFilled32,
  IconMatrixOutlined16,
  IconMatrixOutlined24,
  IconMatrixOutlined32,
  IconMetalFilled16,
  IconMetalFilled24,
  IconMetalFilled32,
  IconMetalOutlined16,
  IconMetalOutlined24,
  IconMetalOutlined32,
  IconMetallalomScrap16,
  IconMetallalomScrap24,
  IconMetallalomScrap32,
  IconMetallalomScrapFilled16,
  IconMetallalomScrapFilled24,
  IconMetallalomScrapFilled32,
  IconMixer16,
  IconMixer24,
  IconMixer32,
  IconMixerFilled16,
  IconMixerFilled24,
  IconMixerFilled32,
  IconMnemoFilled16,
  IconMnemoFilled24,
  IconMnemoFilled32,
  IconMnemoOutlined16,
  IconMnemoOutlined24,
  IconMnemoOutlined32,
  IconModelling16,
  IconModelling24,
  IconModelling32,
  IconPechivtoFilled16,
  IconPechivtoFilled24,
  IconPechivtoFilled32,
  IconPechivtoOutlined16,
  IconPechivtoOutlined24,
  IconPechivtoOutlined32,
  IconProkat16,
  IconProkat24,
  IconProkat32,
  IconProkatFilled16,
  IconProkatFilled24,
  IconProkatFilled32,
  IconRMRecommendationOutlined16,
  IconRMRecommendationOutlined24,
  IconRMRecommendationOutlined32,
  IconRollFilled16,
  IconRollFilled24,
  IconRollFilled32,
  IconRollOutlined16,
  IconRollOutlined24,
  IconRollOutlined32,
  IconSlabFilled16,
  IconSlabFilled24,
  IconSlabFilled32,
  IconSlabOutlined16,
  IconSlabOutlined24,
  IconSlabOutlined32,
  IconTackleCrane16,
  IconTackleCrane24,
  IconTackleCrane32,
  IconTackleCraneFilled16,
  IconTackleCraneFilled24,
  IconTackleCraneFilled32,
  IconTemperatureStroke16,
  IconTemperatureStroke24,
  IconTemperatureStroke32,
  IconTrolleyFilled16,
  IconTrolleyFilled24,
  IconTrolleyFilled32,
  IconTrolleyOutlined16,
  IconTrolleyOutlined24,
  IconTrolleyOutlined32,
  IconWorker16,
  IconWorker24,
  IconWorker32,
  IconWorkerFilled16,
  IconWorkerFilled24,
  IconWorkerFilled32
};

export { IconUploadFile32, IconUploadImage32, IconUploadVideo32 };

export {
  IconCalculator16,
  IconCalculator24,
  IconCalculator32,
  IconChannel16,
  IconChannel24,
  IconChannel32,
  IconExternalLink16,
  IconExternalLink24,
  IconExternalLink32,
  IconFactory16,
  IconFactory24,
  IconFactory32,
  IconFilterClean16,
  IconFilterClean24,
  IconFilterClean32,
  IconFurmaOutlined16,
  IconFurmaOutlined24,
  IconFurmaOutlined32,
  IconHillsView16,
  IconHillsView24,
  IconHillsView32,
  IconKovshDomen16,
  IconKovshDomen24,
  IconKovshDomen32,
  IconMesBunkerOutlined16,
  IconMesBunkerOutlined24,
  IconMesBunkerOutlined32,
  IconPicInPic16,
  IconPicInPic24,
  IconPicInPic32,
  IconPicInPicOff16,
  IconPicInPicOff24,
  IconPicInPicOff32,
  IconPicInPicOn16,
  IconPicInPicOn24,
  IconPicInPicOn32,
  IconPovtornayaObrabotkaPachek16,
  IconPovtornayaObrabotkaPachek24,
  IconPovtornayaObrabotkaPachek32,
  IconSignal16,
  IconSignal24,
  IconSignal32,
  IconSmenniyRaport16,
  IconSmenniyRaport24,
  IconSmenniyRaport32,
  IconSmennoeZadanie16,
  IconSmennoeZadanie24,
  IconSmennoeZadanie32,
  IconStarHalf16,
  IconStarHalf24,
  IconStarHalf32,
  IconVagonFull16,
  IconVagonFull24,
  IconVagonFull32,
  IconWeightTypeFilled16,
  IconWeightTypeFilled24,
  IconWeightTypeFilled32,
  IconWeightTypeOutlined16,
  IconWeightTypeOutlined24,
  IconWeightTypeOutlined32
};

export { IconBirthday16, IconBirthday24 };

export {
  IconCalendarClearToday16,
  IconCalendarClearToday24,
  IconCalendarClearToday32,
  IconEqualsSign16,
  IconEqualsSign24,
  IconEqualsSign32,
  IconExceptionContains16,
  IconExceptionContains24,
  IconExceptionContains32,
  IconFinishingContains16,
  IconFinishingContains24,
  IconFinishingContains32,
  IconGreater16,
  IconGreater24,
  IconGreater32,
  IconGreaterOrEqual16,
  IconGreaterOrEqual24,
  IconGreaterOrEqual32,
  IconLess16,
  IconLess24,
  IconLess32,
  IconLessOrEqual16,
  IconLessOrEqual24,
  IconLessOrEqual32,
  IconMultipleChoice16,
  IconMultipleChoice24,
  IconMultipleChoice32,
  IconNotEqualSign16,
  IconNotEqualSign24,
  IconNotEqualSign32,
  IconSelectionContains16,
  IconSelectionContains24,
  IconSelectionContains32,
  IconStartingContains16,
  IconStartingContains24,
  IconStartingContains32,
  IconValueLimits16,
  IconValueLimits24,
  IconValueLimits32
};

export {
  IconControlMapsNew16,
  IconControlMapsNew24,
  IconControlMapsNew32,
  IconHelpNewPeopleQuestion16,
  IconHelpNewPeopleQuestion24,
  IconHelpNewPeopleQuestion32,
  IconOperationalPerformanceManagement16,
  IconOperationalPerformanceManagement24,
  IconOperationalPerformanceManagement32,
  IconOperationalPerformanceManagementTimeWatch16,
  IconOperationalPerformanceManagementTimeWatch24,
  IconOperationalPerformanceManagementTimeWatch32,
  IconProductAnalysis16,
  IconProductAnalysis24,
  IconProductAnalysis32,
  IconProductPerformanceManagement16,
  IconProductPerformanceManagement24,
  IconProductPerformanceManagement32
};

const icons: TIconsObject = {
  16: {
    IconAddCommentFilled16,
    IconAddCommentOutlined16,
    IconAddPlusCircleFilled16,
    IconAddPlusCircleOutlined16,
    IconAddPlusFilled16,
    IconAddPlusOutlined16,
    IconAllDoneDoubleCheckFilled16,
    IconAllDoneDoubleCheckOutlined16,
    IconAnalyticsFilled16,
    IconAnalyticsOutlined16,
    IconArrowBottom16,
    IconArrowDownFilled16,
    IconArrowDownOutlined16,
    IconArrowLeftDownFilled16,
    IconArrowLeftDownOutlined16,
    IconArrowLeftFilled16,
    IconArrowLeftOutlined16,
    IconArrowLeftUpFilled16,
    IconArrowRightDownFilled16,
    IconArrowRightDownOutlined16,
    IconArrowRightFilled16,
    IconArrowRightOutlined16,
    IconArrowTop16,
    IconArrowUpFilled16,
    IconArrowUpOutlined16,
    IconArrowUpRightFilled16,
    IconArrowUpRightOutlined16,
    IconArrowsMultipleStopDotsFilled16,
    IconArrowsMultipleStopDotsOutlined16,
    IconArrowsSwapVertFilled16,
    IconArrowsSwapVertOutlined16,
    IconArticleFilled16,
    IconArticleOutlined16,
    IconAttentionMarkWarningAlertFilled16,
    IconAttentionMarkWarningAlertOutlined16,
    IconAttentionWarningAlertErrorFilled16,
    IconAttentionWarningAlertErrorOutlined16,
    IconAttentionWarningAlertFilled16,
    IconAttentionWarningAlertOutlined16,
    IconAutoRenewReloadFilled16,
    IconAutoRenewReloadOutlined16,
    IconAutoRenewSystemOutlined16,
    IconBackSpaceFilled16,
    IconBackSpaceOutlined16,
    IconBarChartFilled16,
    IconBarChartOutlined16,
    IconBasketBuying16,
    IconBlockCloseFilled16,
    IconBlockCloseOutlined16,
    IconBorder16,
    IconBroom16,
    IconBugReportFilled16,
    IconBusinessOutlined16,
    IconCalendar2Filled16,
    IconCalendar2Outlined16,
    IconCalendarCheckFilled16,
    IconCalendarCheckOutlined16,
    IconCalendarDateFilled16,
    IconCalendarDateOutlined16,
    IconCalendarFilled16,
    IconCalendarOutlined16,
    IconCancelFilled16,
    IconCancelOutlined16,
    IconChevronArrowDownFilled16,
    IconChevronArrowDownOutlined16,
    IconChevronArrowLeftFilled16,
    IconChevronArrowLeftOutlined16,
    IconChevronArrowRightFilled16,
    IconChevronArrowRightOutlined16,
    IconChevronArrowUpFilled16,
    IconChevronArrowUpOutlined16,
    IconChevronFirstPageOutlined16,
    IconChevronLastPageOutlined16,
    IconCircleFilled16,
    IconCircleOutlined16,
    IconCloseFilled16,
    IconCloseOutlined16,
    IconCloudDoneFilled16,
    IconCloudDoneOutlined16,
    IconColumnFilter16,
    IconCommentChatBubbleClearFilled16,
    IconCommentChatBubbleClearOutlined16,
    IconCommentChatBubbleFullFilled16,
    IconCommentChatBubbleFullOutlined16,
    IconCommunityFilled16,
    IconCommunityOutlined16,
    IconContentCopyFilled16,
    IconContentCopyOutlined16,
    IconCornerArrowDownLeftFilled16,
    IconCornerArrowDownLeftOutlined16,
    IconCornerArrowDownRightFilled16,
    IconCornerArrowDownRightOutlined16,
    IconCornerArrowLeftDownFilled16,
    IconCornerArrowLeftDownOutlined16,
    IconCornerArrowLeftUpFilled16,
    IconCornerArrowLeftUpOutlined16,
    IconCornerArrowRightDownFilled16,
    IconCornerArrowRightDownOutlined16,
    IconCornerArrowRightUpFilled16,
    IconCornerArrowRightUpOutlined16,
    IconCornerArrowUpLeftFilled16,
    IconCornerArrowUpLeftOutlined16,
    IconCornerArrowUpRightFilled16,
    IconCornerArrowUpRightOutlined16,
    IconDNSFilled16,
    IconDNSOutlined16,
    IconDarkModeFilled16,
    IconDarkModeOutlined16,
    IconDeleteBinFilled16,
    IconDeleteBinOutlined16,
    IconDeleteMinusFilled16,
    IconDeleteMinusOutlined16,
    IconDirectionsTransitTrainTransportFilled16,
    IconDirectionsTransitTrainTransportOutlined16,
    IconDirectoriesFilled16,
    IconDirectoriesOutlined16,
    IconDoneCheckFilled16,
    IconDoneCheckOutlined16,
    IconDownloadFilled16,
    IconDownloadOutlined16,
    IconDragIndicatorDotsFilled16,
    IconDragIndicatorDotsOutlined16,
    IconDvrFilled16,
    IconDvrOutlined16,
    IconEditPenFilled16,
    IconEditPenOutlined16,
    IconEducationFilled16,
    IconEducationOutlined16,
    IconEnterFilled16,
    IconEnterOutlined16,
    IconExitFilled16,
    IconExitOutlined16,
    IconEyeFilled16,
    IconEyeOffFilled16,
    IconEyeOffOutlined16,
    IconEyeOutlined16,
    IconEyeglassesFill16,
    IconEyeglassesOutlined16,
    IconFilterListFilled16,
    IconFilterListOutlined16,
    IconFilterSortAscendedFilled16,
    IconFilterSortAscendedOutlined16,
    IconFilterSortFilled16,
    IconFilterSortOutlined16,
    IconFolderFilled16,
    IconFolderHumanFilled16,
    IconFolderHumanOutlined16,
    IconFolderOutlined16,
    IconFormatLineSpacingOutlined16,
    IconFormatListFilled16,
    IconFormatListNumberedFilled16,
    IconFormatListNumberedOutlined16,
    IconFormatListOutlined16,
    IconFormula16,
    IconFullScreenExitCloseFilled16,
    IconFullScreenExitCloseOutlined16,
    IconFullScreenOpenFilled16,
    IconFullScreenOpenOutlined16,
    IconGraphChartTimeline16,
    IconHandPanToolPalmsFilled16,
    IconHandPanToolPalmsOutlined16,
    IconHeartFilled16,
    IconHeartOutlined16,
    IconHelpFilled16,
    IconHelpOutlined16,
    IconHelperMailOutlined16,
    IconHomeOutlined16,
    IconHourglassEmptyOutlined16,
    IconInfoFilled16,
    IconInfoOutlined16,
    IconInputFilled16,
    IconInputOutlined16,
    IconInsertChartFilled16,
    IconInsertChartOutlined16,
    IconInsertDriveFileFilled16,
    IconInsertDriveFileOutlined16,
    IconInteractionFilled16,
    IconInteractionOutlined16,
    IconJsonOutlined16,
    IconKeyboardDoubleArrowLeftChevronFilled16,
    IconKeyboardDoubleArrowLeftChevronOutlined16,
    IconKeyboardDoubleArrowRightChevronFilled16,
    IconKeyboardDoubleArrowRightChevronOutlined16,
    IconLightModeFilled16,
    IconLightModeOutlined16,
    IconLightningFilled16,
    IconLightningStroke16,
    IconListAltFilled16,
    IconListAltOutlined16,
    IconListDelete16,
    IconLocationPinaltFilled16,
    IconLocationPinaltOutlined16,
    IconLockCloseFilled16,
    IconLockCloseOutlined16,
    IconLockOpenFilled16,
    IconLockOpenOutlined16,
    IconLogoBrandJiraFilled16,
    IconLogoBrandJiraOutlined16,
    IconMapFilled16,
    IconMapOutlined16,
    IconMapPinaltFilled16,
    IconMapPinaltOutlined16,
    IconMarkUnreadMailboxOutlined16,
    IconMenuBurgerFilled16,
    IconMenuBurgerOutlined16,
    IconMoreHorizDotsFilled16,
    IconMoreHorizDotsOutlined16,
    IconMoreVertDotsFilled16,
    IconMoreVertDotsOutlined16,
    IconNotificationsBellFilled16,
    IconNotificationsBellOffFilled16,
    IconNotificationsBellOutlined16,
    IconParentalLeaveFilled16,
    IconPauseFilled16,
    IconPeopleCancelFilled16,
    IconPeopleCancelOutlined16,
    IconPeopleCheckDoneFilled16,
    IconPeopleCheckDoneOutlined16,
    IconPersonFilled16,
    IconPersonOutlined16,
    IconPhoneCallContact16,
    IconPhotoCameraOutlined16,
    IconPictureInPictureOff16,
    IconPictureInPictureOn16,
    IconPlay16,
    IconPlayOutlined16,
    IconPlayerStop16,
    IconPlaylistAddMenuFilled16,
    IconPlaylistAddMenuOutlined16,
    IconPlaylistMenuSettingFilled16,
    IconPlaylistMenuSettingOutlined16,
    IconPrintFilled16,
    IconPrintOutlined16,
    IconPushPinFilled16,
    IconPushPinOutlined16,
    IconQualityFilled16,
    IconQualityOutlined16,
    IconQuestionMarkFilled16,
    IconQuestionMarkOutlined16,
    IconRedoArrowFilled16,
    IconRedoArrowOutlined16,
    IconRepairWrenchFrom16,
    IconRepairWrenchTo16,
    IconReplayOutlined16,
    IconReservedFrom16,
    IconReservedTo16,
    IconResizingOutlined16,
    IconRightColumnArrowFilled16,
    IconRightColumnArrowOutlined16,
    IconRoundedArrowBackFilled16,
    IconRoundedArrowBackOutlined16,
    IconRoundedArrowForwardFilled16,
    IconRoundedArrowForwardOutlined16,
    IconSaveFilled16,
    IconSaveOutlined16,
    IconScheduleTimeWatchFilled16,
    IconScheduleTimeWatchOutlined16,
    IconSearchFilled16,
    IconSearchOutlined16,
    IconSendFilled16,
    IconSendOutlined16,
    IconSettingFilled16,
    IconSettingOutlined16,
    IconSettingsAltFilled16,
    IconSettingsAltOutlined16,
    IconSourceDataFilled16,
    IconSourceDataOutlined16,
    IconSourceDocCopyOutlined16,
    IconSourceDocFilled16,
    IconStackCollapsed16,
    IconStackExpandedTriangleDown16,
    IconStackExpandedTriangleUp16,
    IconStaffUnitFilled16,
    IconStaffUnitOutlined16,
    IconStarFilled16,
    IconStarOutlined16,
    IconSuccessFilled16,
    IconSuccessOutlined16,
    IconTaskFilled16,
    IconTaskOutlined16,
    IconTelegramFilled16,
    IconThumbsUpLike16,
    IconTopicFilled16,
    IconTopicOutlined16,
    IconTransportCarTaxiFilled16,
    IconTransportCarTaxiOutlined16,
    IconTransportCarTruckLorryFilled16,
    IconTransportCarTruckLorryOutlined16,
    IconTuneControlFilled16,
    IconTuneControlOutlined16,
    IconUndoArrowFilled16,
    IconUndoArrowOutlined16,
    IconUploadFilled16,
    IconUploadOutlined16,
    IconVacancyFilled16,
    IconVacancyOutlined16,
    IconVagon16,
    IconVerticalAlignTopFilled16,
    IconVerticalAlignTopOutlined16,
    IconVideoCameraOffOutlined16,
    IconVideoCameraOnOutlined16,
    IconWarningFilled16,
    IconWhatShotFireFilled16,
    IconWhatShotFireOutlined16,
    IconWiFiFilled16,
    IconWiFiOutlined16,
    IconZoomInFilled16,
    IconZoomInOutlined16,
    IconZoomOutFilled16,
    IconZoomOutOutlined16,
    IconACACriticalityAnalysis16,
    IconASIImplementationOutlined16,
    IconASM16,
    IconAnalysisnpFilled16,
    IconAnalysisnpOutlined16,
    IconAnalyticalUIFilled16,
    IconAnalyticalUIOutlined16,
    IconArmatura16,
    IconArmaturaFilled16,
    IconBalanceFilled16,
    IconBalanceOutlined16,
    IconBunkerFilled16,
    IconBunkerOutlined16,
    IconChemical16,
    IconChemicalFilled16,
    IconControlMapsFilled16,
    IconControlMapsOutlined16,
    IconCraneFilled16,
    IconCraneOutlined16,
    IconCut16,
    IconDataFilled16,
    IconDataOutlined16,
    IconDirectories16,
    IconDocsFilled16,
    IconDocsOutlined16,
    IconDowntimeAnalysisFilled16,
    IconDowntimeAnalysisOutlined16,
    IconDplayersFilled16,
    IconDplayersOutlined16,
    IconGaugeIzmerenie16,
    IconGaugeIzmerenieFilled16,
    IconHelmetFilled16,
    IconHelmetOutlined16,
    IconIdentificationOutlined16,
    IconKPEFilled16,
    IconKPEOutlined16,
    IconKolpak16,
    IconKovsh16,
    IconKovshFilled16,
    IconKovshInProgress16,
    IconListSheets16,
    IconListSheetsFilled16,
    IconLotok16,
    IconLotokFilled16,
    IconMatrixOutlined16,
    IconMetalFilled16,
    IconMetalOutlined16,
    IconMetallalomScrap16,
    IconMetallalomScrapFilled16,
    IconMixer16,
    IconMixerFilled16,
    IconMnemoFilled16,
    IconMnemoOutlined16,
    IconModelling16,
    IconPechivtoFilled16,
    IconPechivtoOutlined16,
    IconProkat16,
    IconProkatFilled16,
    IconRMRecommendationOutlined16,
    IconRollFilled16,
    IconRollOutlined16,
    IconSlabFilled16,
    IconSlabOutlined16,
    IconTackleCrane16,
    IconTackleCraneFilled16,
    IconTemperatureStroke16,
    IconTrolleyFilled16,
    IconTrolleyOutlined16,
    IconWorker16,
    IconWorkerFilled16,
    IconCalculator16,
    IconChannel16,
    IconExternalLink16,
    IconFactory16,
    IconFilterClean16,
    IconFurmaOutlined16,
    IconHillsView16,
    IconKovshDomen16,
    IconMesBunkerOutlined16,
    IconPicInPic16,
    IconPicInPicOff16,
    IconPicInPicOn16,
    IconPovtornayaObrabotkaPachek16,
    IconSignal16,
    IconSmenniyRaport16,
    IconSmennoeZadanie16,
    IconStarHalf16,
    IconVagonFull16,
    IconWeightTypeFilled16,
    IconWeightTypeOutlined16,
    IconBirthday16,
    IconCalendarClearToday16,
    IconEqualsSign16,
    IconExceptionContains16,
    IconFinishingContains16,
    IconGreater16,
    IconGreaterOrEqual16,
    IconLess16,
    IconLessOrEqual16,
    IconMultipleChoice16,
    IconNotEqualSign16,
    IconSelectionContains16,
    IconStartingContains16,
    IconValueLimits16,
    IconControlMapsNew16,
    IconHelpNewPeopleQuestion16,
    IconOperationalPerformanceManagement16,
    IconOperationalPerformanceManagementTimeWatch16,
    IconProductAnalysis16,
    IconProductPerformanceManagement16
  },
  24: {
    IconAddCommentFilled24,
    IconAddCommentOutlined24,
    IconAddPlusCircleFilled24,
    IconAddPlusCircleOutlined24,
    IconAddPlusFilled24,
    IconAddPlusOutlined24,
    IconAllDoneDoubleCheckFilled24,
    IconAllDoneDoubleCheckOutlined24,
    IconAnalyticsFilled24,
    IconAnalyticsOutlined24,
    IconArrowBottom24,
    IconArrowDownFilled24,
    IconArrowDownOutlined24,
    IconArrowLeftDownFilled24,
    IconArrowLeftDownOutlined24,
    IconArrowLeftFilled24,
    IconArrowLeftOutlined24,
    IconArrowLeftUpFilled24,
    IconArrowRightDownFilled24,
    IconArrowRightDownOutlined24,
    IconArrowRightFilled24,
    IconArrowRightOutlined24,
    IconArrowTop24,
    IconArrowUpFilled24,
    IconArrowUpOutlined24,
    IconArrowUpRightFilled24,
    IconArrowUpRightOutlined24,
    IconArrowsMultipleStopDotsFilled24,
    IconArrowsMultipleStopDotsOutlined24,
    IconArrowsSwapVertFilled24,
    IconArrowsSwapVertOutlined24,
    IconArticleFilled24,
    IconArticleOutlined24,
    IconAttentionMarkWarningAlertFilled24,
    IconAttentionMarkWarningAlertOutlined24,
    IconAttentionWarningAlertErrorFilled24,
    IconAttentionWarningAlertErrorOutlined24,
    IconAttentionWarningAlertFilled24,
    IconAttentionWarningAlertOutlined24,
    IconAutoRenewReloadFilled24,
    IconAutoRenewReloadOutlined24,
    IconAutoRenewSystemOutlined24,
    IconBackSpaceFilled24,
    IconBackSpaceOutlined24,
    IconBarChartFilled24,
    IconBarChartOutlined24,
    IconBasketBuying24,
    IconBlockCloseFilled24,
    IconBlockCloseOutlined24,
    IconBorder24,
    IconBroom24,
    IconBugReportFilled24,
    IconBusinessOutlined24,
    IconCalendar2Filled24,
    IconCalendar2Outlined24,
    IconCalendarCheckFilled24,
    IconCalendarCheckOutlined24,
    IconCalendarDateFilled24,
    IconCalendarDateOutlined24,
    IconCalendarFilled24,
    IconCalendarOutlined24,
    IconCancelFilled24,
    IconCancelOutlined24,
    IconChevronArrowDownFilled24,
    IconChevronArrowDownOutlined24,
    IconChevronArrowLeftFilled24,
    IconChevronArrowLeftOutlined24,
    IconChevronArrowRightFilled24,
    IconChevronArrowRightOutlined24,
    IconChevronArrowUpFilled24,
    IconChevronArrowUpOutlined24,
    IconChevronFirstPageOutlined24,
    IconChevronLastPageOutlined24,
    IconCircleFilled24,
    IconCircleOutlined24,
    IconCloseFilled24,
    IconCloseOutlined24,
    IconCloudDoneFilled24,
    IconCloudDoneOutlined24,
    IconColumnFilter24,
    IconCommentChatBubbleClearFilled24,
    IconCommentChatBubbleClearOutlined24,
    IconCommentChatBubbleFullFilled24,
    IconCommentChatBubbleFullOutlined24,
    IconCommunityFilled24,
    IconCommunityOutlined24,
    IconContentCopyFilled24,
    IconContentCopyOutlined24,
    IconCornerArrowDownLeftFilled24,
    IconCornerArrowDownLeftOutlined24,
    IconCornerArrowDownRightFilled24,
    IconCornerArrowDownRightOutlined24,
    IconCornerArrowLeftDownFilled24,
    IconCornerArrowLeftDownOutlined24,
    IconCornerArrowLeftUpFilled24,
    IconCornerArrowLeftUpOutlined24,
    IconCornerArrowRightDownFilled24,
    IconCornerArrowRightDownOutlined24,
    IconCornerArrowRightUpFilled24,
    IconCornerArrowRightUpOutlined24,
    IconCornerArrowUpLeftFilled24,
    IconCornerArrowUpLeftOutlined24,
    IconCornerArrowUpRightFilled24,
    IconCornerArrowUpRightOutlined24,
    IconDNSFilled24,
    IconDNSOutlined24,
    IconDarkModeFilled24,
    IconDarkModeOutlined24,
    IconDeleteBinFilled24,
    IconDeleteBinOutlined24,
    IconDeleteMinusFilled24,
    IconDeleteMinusOutlined24,
    IconDirectionsTransitTrainTransportFilled24,
    IconDirectionsTransitTrainTransportOutlined24,
    IconDirectoriesFilled24,
    IconDirectoriesOutlined24,
    IconDoneCheckFilled24,
    IconDoneCheckOutlined24,
    IconDownloadFilled24,
    IconDownloadOutlined24,
    IconDragIndicatorDotsFilled24,
    IconDragIndicatorDotsOutlined24,
    IconDvrFilled24,
    IconDvrOutlined24,
    IconEditPenFilled24,
    IconEditPenOutlined24,
    IconEducationFilled24,
    IconEducationOutlined24,
    IconEnterFilled24,
    IconEnterOutlined24,
    IconExitFilled24,
    IconExitOutlined24,
    IconEyeFilled24,
    IconEyeOffFilled24,
    IconEyeOffOutlined24,
    IconEyeOutlined24,
    IconEyeglassesFill24,
    IconEyeglassesOutlined24,
    IconFilterListFilled24,
    IconFilterListOutlined24,
    IconFilterSortAscendedFilled24,
    IconFilterSortAscendedOutlined24,
    IconFilterSortFilled24,
    IconFilterSortOutlined24,
    IconFolderFilled24,
    IconFolderHumanFilled24,
    IconFolderHumanOutlined24,
    IconFolderOutlined24,
    IconFormatLineSpacingOutlined24,
    IconFormatListFilled24,
    IconFormatListNumberedFilled24,
    IconFormatListNumberedOutlined24,
    IconFormatListOutlined24,
    IconFormula24,
    IconFullScreenExitCloseFilled24,
    IconFullScreenExitCloseOutlined24,
    IconFullScreenOpenFilled24,
    IconFullScreenOpenOutlined24,
    IconGraphChartTimeline24,
    IconHandPanToolPalmsFilled24,
    IconHandPanToolPalmsOutlined24,
    IconHeartFilled24,
    IconHeartOutlined24,
    IconHelpFilled24,
    IconHelpOutlined24,
    IconHelperMailOutlined24,
    IconHomeOutlined24,
    IconHourglassEmptyOutlined24,
    IconInfoFilled24,
    IconInfoOutlined24,
    IconInputFilled24,
    IconInputOutlined24,
    IconInsertChartFilled24,
    IconInsertChartOutlined24,
    IconInsertDriveFileFilled24,
    IconInsertDriveFileOutlined24,
    IconInteractionFilled24,
    IconInteractionOutlined24,
    IconJsonOutlined24,
    IconKeyboardDoubleArrowLeftChevronFilled24,
    IconKeyboardDoubleArrowLeftChevronOutlined24,
    IconKeyboardDoubleArrowRightChevronFilled24,
    IconKeyboardDoubleArrowRightChevronOutlined24,
    IconLightModeFilled24,
    IconLightModeOutlined24,
    IconLightningFilled24,
    IconLightningStroke24,
    IconListAltFilled24,
    IconListAltOutlined24,
    IconListDelete24,
    IconLocationPinaltFilled24,
    IconLocationPinaltOutlined24,
    IconLockCloseFilled24,
    IconLockCloseOutlined24,
    IconLockOpenFilled24,
    IconLockOpenOutlined24,
    IconLogoBrandJiraFilled24,
    IconLogoBrandJiraOutlined24,
    IconMapFilled24,
    IconMapOutlined24,
    IconMapPinaltFilled24,
    IconMapPinaltOutlined24,
    IconMarkUnreadMailboxOutlined24,
    IconMenuBurgerFilled24,
    IconMenuBurgerOutlined24,
    IconMoreHorizDotsFilled24,
    IconMoreHorizDotsOutlined24,
    IconMoreVertDotsFilled24,
    IconMoreVertDotsOutlined24,
    IconNotificationsBellFilled24,
    IconNotificationsBellOffFilled24,
    IconNotificationsBellOutlined24,
    IconParentalLeaveFilled24,
    IconPauseFilled24,
    IconPeopleCancelFilled24,
    IconPeopleCancelOutlined24,
    IconPeopleCheckDoneFilled24,
    IconPeopleCheckDoneOutlined24,
    IconPersonFilled24,
    IconPersonOutlined24,
    IconPhoneCallContact24,
    IconPhotoCameraOutlined24,
    IconPictureInPictureOff24,
    IconPictureInPictureOn24,
    IconPlay24,
    IconPlayOutlined24,
    IconPlayerStop24,
    IconPlaylistAddMenuFilled24,
    IconPlaylistAddMenuOutlined24,
    IconPlaylistMenuSettingFilled24,
    IconPlaylistMenuSettingOutlined24,
    IconPrintFilled24,
    IconPrintOutlined24,
    IconPushPinFilled24,
    IconPushPinOutlined24,
    IconQualityFilled24,
    IconQualityOutlined24,
    IconQuestionMarkFilled24,
    IconQuestionMarkOutlined24,
    IconRedoArrowFilled24,
    IconRedoArrowOutlined24,
    IconRepairWrenchFrom24,
    IconRepairWrenchTo24,
    IconReplayOutlined24,
    IconReservedFrom24,
    IconReservedTo24,
    IconRightColumnArrowFilled24,
    IconRightColumnArrowOutlined24,
    IconRoundedArrowBackFilled24,
    IconRoundedArrowBackOutlined24,
    IconRoundedArrowForwardFilled24,
    IconRoundedArrowForwardOutlined24,
    IconSaveFilled24,
    IconSaveOutlined24,
    IconScheduleTimeWatchFilled24,
    IconScheduleTimeWatchOutlined24,
    IconSearchFilled24,
    IconSearchOutlined24,
    IconSendFilled24,
    IconSendOutlined24,
    IconSettingFilled24,
    IconSettingOutlined24,
    IconSettingsAltFilled24,
    IconSettingsAltOutlined24,
    IconSourceDataFilled24,
    IconSourceDataOutlined24,
    IconSourceDocCopyOutlined24,
    IconSourceDocFilled24,
    IconStackCollapsed24,
    IconStackExpandedTriangleDown24,
    IconStackExpandedTriangleUp24,
    IconStaffUnitFilled24,
    IconStaffUnitOutlined24,
    IconStarFilled24,
    IconStarOutlined24,
    IconSuccessFilled24,
    IconSuccessOutlined24,
    IconTaskFilled24,
    IconTaskOutlined24,
    IconTelegramFilled24,
    IconThumbsUpLike24,
    IconTopicFilled24,
    IconTopicOutlined24,
    IconTransportCarTaxiFilled24,
    IconTransportCarTaxiOutlined24,
    IconTransportCarTruckLorryFilled24,
    IconTransportCarTruckLorryOutlined24,
    IconTuneControlFilled24,
    IconTuneControlOutlined24,
    IconUndoArrowFilled24,
    IconUndoArrowOutlined24,
    IconUploadFilled24,
    IconUploadOutlined24,
    IconVacancyFilled24,
    IconVacancyOutlined24,
    IconVagon24,
    IconVerticalAlignTopFilled24,
    IconVerticalAlignTopOutlined24,
    IconVideoCameraOffOutlined24,
    IconVideoCameraOnOutlined24,
    IconWarningFilled24,
    IconWhatShotFireFilled24,
    IconWhatShotFireOutlined24,
    IconWiFiFilled24,
    IconWiFiOutlined24,
    IconZoomInFilled24,
    IconZoomInOutlined24,
    IconZoomOutFilled24,
    IconZoomOutOutlined24,
    IconACACriticalityAnalysis24,
    IconASIImplementationOutlined24,
    IconASM24,
    IconAnalysisnpFilled24,
    IconAnalysisnpOutlined24,
    IconAnalyticalUIFilled24,
    IconAnalyticalUIOutlined24,
    IconArmatura24,
    IconArmaturaFilled24,
    IconBalanceFilled24,
    IconBalanceOutlined24,
    IconBunkerFilled24,
    IconBunkerOutlined24,
    IconChemical24,
    IconChemicalFilled24,
    IconControlMapsFilled24,
    IconControlMapsOutlined24,
    IconCraneFilled24,
    IconCraneOutlined24,
    IconCut24,
    IconDataFilled24,
    IconDataOutlined24,
    IconDirectories24,
    IconDocsFilled24,
    IconDocsOutlined24,
    IconDowntimeAnalysisFilled24,
    IconDowntimeAnalysisOutlined24,
    IconDplayersFilled24,
    IconDplayersOutlined24,
    IconGaugeIzmerenie24,
    IconGaugeIzmerenieFilled24,
    IconHelmetFilled24,
    IconHelmetOutlined24,
    IconIdentificationOutlined24,
    IconKPEFilled24,
    IconKPEOutlined24,
    IconKolpak24,
    IconKovsh24,
    IconKovshFilled24,
    IconKovshInProgress24,
    IconListSheets24,
    IconListSheetsFilled24,
    IconLotok24,
    IconLotokFilled24,
    IconMatrixOutlined24,
    IconMetalFilled24,
    IconMetalOutlined24,
    IconMetallalomScrap24,
    IconMetallalomScrapFilled24,
    IconMixer24,
    IconMixerFilled24,
    IconMnemoFilled24,
    IconMnemoOutlined24,
    IconModelling24,
    IconPechivtoFilled24,
    IconPechivtoOutlined24,
    IconProkat24,
    IconProkatFilled24,
    IconRMRecommendationOutlined24,
    IconRollFilled24,
    IconRollOutlined24,
    IconSlabFilled24,
    IconSlabOutlined24,
    IconTackleCrane24,
    IconTackleCraneFilled24,
    IconTemperatureStroke24,
    IconTrolleyFilled24,
    IconTrolleyOutlined24,
    IconWorker24,
    IconWorkerFilled24,
    IconCalculator24,
    IconChannel24,
    IconExternalLink24,
    IconFactory24,
    IconFilterClean24,
    IconFurmaOutlined24,
    IconHillsView24,
    IconKovshDomen24,
    IconMesBunkerOutlined24,
    IconPicInPic24,
    IconPicInPicOff24,
    IconPicInPicOn24,
    IconPovtornayaObrabotkaPachek24,
    IconSignal24,
    IconSmenniyRaport24,
    IconSmennoeZadanie24,
    IconStarHalf24,
    IconVagonFull24,
    IconWeightTypeFilled24,
    IconWeightTypeOutlined24,
    IconBirthday24,
    IconCalendarClearToday24,
    IconEqualsSign24,
    IconExceptionContains24,
    IconFinishingContains24,
    IconGreater24,
    IconGreaterOrEqual24,
    IconLess24,
    IconLessOrEqual24,
    IconMultipleChoice24,
    IconNotEqualSign24,
    IconSelectionContains24,
    IconStartingContains24,
    IconValueLimits24,
    IconControlMapsNew24,
    IconHelpNewPeopleQuestion24,
    IconOperationalPerformanceManagement24,
    IconOperationalPerformanceManagementTimeWatch24,
    IconProductAnalysis24,
    IconProductPerformanceManagement24
  },
  32: {
    IconAddCommentFilled32,
    IconAddCommentOutlined32,
    IconAddPlusCircleFilled32,
    IconAddPlusCircleOutlined32,
    IconAddPlusFilled32,
    IconAddPlusOutlined32,
    IconAllDoneDoubleCheckFilled32,
    IconAllDoneDoubleCheckOutlined32,
    IconAnalyticsFilled32,
    IconAnalyticsOutlined32,
    IconArrowBottom32,
    IconArrowDownFilled32,
    IconArrowDownOutlined32,
    IconArrowLeftDownFilled32,
    IconArrowLeftDownOutlined32,
    IconArrowLeftFilled32,
    IconArrowLeftOutlined32,
    IconArrowLeftUpFilled32,
    IconArrowRightDownFilled32,
    IconArrowRightDownOutlined32,
    IconArrowRightFilled32,
    IconArrowRightOutlined32,
    IconArrowTop32,
    IconArrowUpFilled32,
    IconArrowUpOutlined32,
    IconArrowUpRightFilled32,
    IconArrowUpRightOutlined32,
    IconArrowsMultipleStopDotsFilled32,
    IconArrowsMultipleStopDotsOutlined32,
    IconArrowsSwapVertFilled32,
    IconArrowsSwapVertOutlined32,
    IconArticleFilled32,
    IconArticleOutlined32,
    IconAttentionMarkWarningAlertFilled32,
    IconAttentionMarkWarningAlertOutlined32,
    IconAttentionWarningAlertErrorFilled32,
    IconAttentionWarningAlertErrorOutlined32,
    IconAttentionWarningAlertFilled32,
    IconAttentionWarningAlertOutlined32,
    IconAutoRenewReloadFilled32,
    IconAutoRenewReloadOutlined32,
    IconAutoRenewSystemOutlined32,
    IconBackSpaceFilled32,
    IconBackSpaceOutlined32,
    IconBarChartFilled32,
    IconBarChartOutlined32,
    IconBasketBuying32,
    IconBlockCloseFilled32,
    IconBlockCloseOutlined32,
    IconBorder32,
    IconBroom32,
    IconBugReportFilled32,
    IconBusinessOutlined32,
    IconCalendar2Filled32,
    IconCalendar2Outlined32,
    IconCalendarCheckFilled32,
    IconCalendarCheckOutlined32,
    IconCalendarDateFilled32,
    IconCalendarDateOutlined32,
    IconCalendarFilled32,
    IconCalendarOutlined32,
    IconCancelFilled32,
    IconCancelOutlined32,
    IconChevronArrowDownFilled32,
    IconChevronArrowDownOutlined32,
    IconChevronArrowLeftFilled32,
    IconChevronArrowLeftOutlined32,
    IconChevronArrowRightFilled32,
    IconChevronArrowRightOutlined32,
    IconChevronArrowUpFilled32,
    IconChevronArrowUpOutlined32,
    IconChevronFirstPageOutlined32,
    IconChevronLastPageOutlined32,
    IconCircleFilled32,
    IconCircleOutlined32,
    IconCloseFilled32,
    IconCloseOutlined32,
    IconCloudDoneFilled32,
    IconCloudDoneOutlined32,
    IconColumnFilter32,
    IconCommentChatBubbleClearFilled32,
    IconCommentChatBubbleClearOutlined32,
    IconCommentChatBubbleFullFilled32,
    IconCommentChatBubbleFullOutlined32,
    IconCommunityFilled32,
    IconCommunityOutlined32,
    IconContentCopyFilled32,
    IconContentCopyOutlined32,
    IconCornerArrowDownLeftFilled32,
    IconCornerArrowDownLeftOutlined32,
    IconCornerArrowDownRightFilled32,
    IconCornerArrowDownRightOutlined32,
    IconCornerArrowLeftDownFilled32,
    IconCornerArrowLeftDownOutlined32,
    IconCornerArrowLeftUpFilled32,
    IconCornerArrowLeftUpOutlined32,
    IconCornerArrowRightDownFilled32,
    IconCornerArrowRightDownOutlined32,
    IconCornerArrowRightUpFilled32,
    IconCornerArrowRightUpOutlined32,
    IconCornerArrowUpLeftFilled32,
    IconCornerArrowUpLeftOutlined32,
    IconCornerArrowUpRightFilled32,
    IconCornerArrowUpRightOutlined32,
    IconDNSFilled32,
    IconDNSOutlined32,
    IconDarkModeFilled32,
    IconDarkModeOutlined32,
    IconDeleteBinFilled32,
    IconDeleteBinOutlined32,
    IconDeleteMinusFilled32,
    IconDeleteMinusOutlined32,
    IconDirectionsTransitTrainTransportFilled32,
    IconDirectionsTransitTrainTransportOutlined32,
    IconDirectoriesFilled32,
    IconDirectoriesOutlined32,
    IconDoneCheckFilled32,
    IconDoneCheckOutlined32,
    IconDownloadFilled32,
    IconDownloadOutlined32,
    IconDragIndicatorDotsFilled32,
    IconDragIndicatorDotsOutlined32,
    IconDvrFilled32,
    IconDvrOutlined32,
    IconEditPenFilled32,
    IconEditPenOutlined32,
    IconEducationFilled32,
    IconEducationOutlined32,
    IconEnterFilled32,
    IconEnterOutlined32,
    IconExitFilled32,
    IconExitOutlined32,
    IconEyeFilled32,
    IconEyeOffFilled32,
    IconEyeOffOutlined32,
    IconEyeOutlined32,
    IconEyeglassesFill32,
    IconEyeglassesOutlined32,
    IconFilterListFilled32,
    IconFilterListOutlined32,
    IconFilterSortAscendedFilled32,
    IconFilterSortAscendedOutlined32,
    IconFilterSortFilled32,
    IconFilterSortOutlined32,
    IconFolderFilled32,
    IconFolderHumanFilled32,
    IconFolderHumanOutlined32,
    IconFolderOutlined32,
    IconFormatLineSpacingOutlined32,
    IconFormatListFilled32,
    IconFormatListNumberedFilled32,
    IconFormatListNumberedOutlined32,
    IconFormatListOutlined32,
    IconFormula32,
    IconFullScreenExitCloseFilled32,
    IconFullScreenExitCloseOutlined32,
    IconFullScreenOpenFilled32,
    IconFullScreenOpenOutlined32,
    IconGraphChartTimeline32,
    IconHandPanToolPalmsFilled32,
    IconHandPanToolPalmsOutlined32,
    IconHeartFilled32,
    IconHeartOutlined32,
    IconHelpFilled32,
    IconHelpOutlined32,
    IconHelperMailOutlined32,
    IconHomeOutlined32,
    IconHourglassEmptyOutlined32,
    IconInfoFilled32,
    IconInfoOutlined32,
    IconInputFilled32,
    IconInputOutlined32,
    IconInsertChartFilled32,
    IconInsertChartOutlined32,
    IconInsertDriveFileFilled32,
    IconInsertDriveFileOutlined32,
    IconInteractionFilled32,
    IconInteractionOutlined32,
    IconJsonOutlined32,
    IconKeyboardDoubleArrowLeftChevronFilled32,
    IconKeyboardDoubleArrowLeftChevronOutlined32,
    IconKeyboardDoubleArrowRightChevronFilled32,
    IconKeyboardDoubleArrowRightChevronOutlined32,
    IconLightModeFilled32,
    IconLightModeOutlined32,
    IconLightningFilled32,
    IconLightningStroke32,
    IconListAltFilled32,
    IconListAltOutlined32,
    IconListDelete32,
    IconLocationPinaltFilled32,
    IconLocationPinaltOutlined32,
    IconLockCloseFilled32,
    IconLockCloseOutlined32,
    IconLockOpenFilled32,
    IconLockOpenOutlined32,
    IconLogoBrandJiraFilled32,
    IconLogoBrandJiraOutlined32,
    IconMapFilled32,
    IconMapOutlined32,
    IconMapPinaltFilled32,
    IconMapPinaltOutlined32,
    IconMarkUnreadMailboxOutlined32,
    IconMenuBurgerFilled32,
    IconMenuBurgerOutlined32,
    IconMoreHorizDotsFilled32,
    IconMoreHorizDotsOutlined32,
    IconMoreVertDotsFilled32,
    IconMoreVertDotsOutlined32,
    IconNotificationsBellFilled32,
    IconNotificationsBellOffFilled32,
    IconNotificationsBellOutlined32,
    IconParentalLeaveFilled32,
    IconPauseFilled32,
    IconPeopleCancelFilled32,
    IconPeopleCancelOutlined32,
    IconPeopleCheckDoneFilled32,
    IconPeopleCheckDoneOutlined32,
    IconPersonFilled32,
    IconPersonOutlined32,
    IconPhoneCallContact32,
    IconPhotoCameraOutlined32,
    IconPictureInPictureOff32,
    IconPictureInPictureOn32,
    IconPlay32,
    IconPlayOutlined32,
    IconPlayerStop32,
    IconPlaylistAddMenuFilled32,
    IconPlaylistAddMenuOutlined32,
    IconPlaylistMenuSettingFilled32,
    IconPlaylistMenuSettingOutlined32,
    IconPrintFilled32,
    IconPrintOutlined32,
    IconPushPinFilled32,
    IconPushPinOutlined32,
    IconQualityFilled32,
    IconQualityOutlined32,
    IconQuestionMarkFilled32,
    IconQuestionMarkOutlined32,
    IconRedoArrowFilled32,
    IconRedoArrowOutlined32,
    IconRepairWrenchFrom32,
    IconRepairWrenchTo32,
    IconReplayOutlined32,
    IconReservedFrom32,
    IconReservedTo32,
    IconRightColumnArrowFilled32,
    IconRightColumnArrowOutlined32,
    IconRoundedArrowBackFilled32,
    IconRoundedArrowBackOutlined32,
    IconRoundedArrowForwardFilled32,
    IconRoundedArrowForwardOutlined32,
    IconSaveFilled32,
    IconSaveOutlined32,
    IconScheduleTimeWatchFilled32,
    IconScheduleTimeWatchOutlined32,
    IconSearchFilled32,
    IconSearchOutlined32,
    IconSendFilled32,
    IconSendOutlined32,
    IconSettingFilled32,
    IconSettingOutlined32,
    IconSettingsAltFilled32,
    IconSettingsAltOutlined32,
    IconSourceDataFilled32,
    IconSourceDataOutlined32,
    IconSourceDocCopyOutlined32,
    IconSourceDocFilled32,
    IconStackCollapsed32,
    IconStackExpandedTriangleDown32,
    IconStackExpandedTriangleUp32,
    IconStaffUnitFilled32,
    IconStaffUnitOutlined32,
    IconStarFilled32,
    IconStarOutlined32,
    IconSuccessFilled32,
    IconSuccessOutlined32,
    IconTaskFilled32,
    IconTaskOutlined32,
    IconTelegramFilled32,
    IconThumbsUpLike32,
    IconTopicFilled32,
    IconTopicOutlined32,
    IconTransportCarTaxiFilled32,
    IconTransportCarTaxiOutlined32,
    IconTransportCarTruckLorryFilled32,
    IconTransportCarTruckLorryOutlined32,
    IconTuneControlFilled32,
    IconTuneControlOutlined32,
    IconUndoArrowFilled32,
    IconUndoArrowOutlined32,
    IconUploadFilled32,
    IconUploadOutlined32,
    IconVacancyFilled32,
    IconVacancyOutlined32,
    IconVagon32,
    IconVerticalAlignTopFilled32,
    IconVerticalAlignTopOutlined32,
    IconVideoCameraOffOutlined32,
    IconVideoCameraOnOutlined32,
    IconWarningFilled32,
    IconWhatShotFireFilled32,
    IconWhatShotFireOutlined32,
    IconWiFiFilled32,
    IconWiFiOutlined32,
    IconZoomInFilled32,
    IconZoomInOutlined32,
    IconZoomOutFilled32,
    IconZoomOutOutlined32,
    IconACACriticalityAnalysis32,
    IconASIImplementationOutlined32,
    IconASM32,
    IconAnalysisnpFilled32,
    IconAnalysisnpOutlined32,
    IconAnalyticalUIFilled32,
    IconAnalyticalUIOutlined32,
    IconArmatura32,
    IconArmaturaFilled32,
    IconBalanceFilled32,
    IconBalanceOutlined32,
    IconBunkerFilled32,
    IconBunkerOutlined32,
    IconChemical32,
    IconChemicalFilled32,
    IconControlMapsFilled32,
    IconControlMapsOutlined32,
    IconCraneFilled32,
    IconCraneOutlined32,
    IconCut32,
    IconDataFilled32,
    IconDataOutlined32,
    IconDirectories32,
    IconDocsFilled32,
    IconDocsOutlined32,
    IconDowntimeAnalysisFilled32,
    IconDowntimeAnalysisOutlined32,
    IconDplayersFilled32,
    IconDplayersOutlined32,
    IconGaugeIzmerenie32,
    IconGaugeIzmerenieFilled32,
    IconHelmetFilled32,
    IconHelmetOutlined32,
    IconIdentificationOutlined32,
    IconKPEFilled32,
    IconKPEOutlined32,
    IconKolpak32,
    IconKovsh32,
    IconKovshFilled32,
    IconKovshInProgress32,
    IconListSheets32,
    IconListSheetsFilled32,
    IconLotok32,
    IconLotokFilled32,
    IconMatrixOutlined32,
    IconMetalFilled32,
    IconMetalOutlined32,
    IconMetallalomScrap32,
    IconMetallalomScrapFilled32,
    IconMixer32,
    IconMixerFilled32,
    IconMnemoFilled32,
    IconMnemoOutlined32,
    IconModelling32,
    IconPechivtoFilled32,
    IconPechivtoOutlined32,
    IconProkat32,
    IconProkatFilled32,
    IconRMRecommendationOutlined32,
    IconRollFilled32,
    IconRollOutlined32,
    IconSlabFilled32,
    IconSlabOutlined32,
    IconTackleCrane32,
    IconTackleCraneFilled32,
    IconTemperatureStroke32,
    IconTrolleyFilled32,
    IconTrolleyOutlined32,
    IconWorker32,
    IconWorkerFilled32,
    IconUploadFile32,
    IconUploadImage32,
    IconUploadVideo32,
    IconCalculator32,
    IconChannel32,
    IconExternalLink32,
    IconFactory32,
    IconFilterClean32,
    IconFurmaOutlined32,
    IconHillsView32,
    IconKovshDomen32,
    IconMesBunkerOutlined32,
    IconPicInPic32,
    IconPicInPicOff32,
    IconPicInPicOn32,
    IconPovtornayaObrabotkaPachek32,
    IconSignal32,
    IconSmenniyRaport32,
    IconSmennoeZadanie32,
    IconStarHalf32,
    IconVagonFull32,
    IconWeightTypeFilled32,
    IconWeightTypeOutlined32,
    IconCalendarClearToday32,
    IconEqualsSign32,
    IconExceptionContains32,
    IconFinishingContains32,
    IconGreater32,
    IconGreaterOrEqual32,
    IconLess32,
    IconLessOrEqual32,
    IconMultipleChoice32,
    IconNotEqualSign32,
    IconSelectionContains32,
    IconStartingContains32,
    IconValueLimits32,
    IconControlMapsNew32,
    IconHelpNewPeopleQuestion32,
    IconOperationalPerformanceManagement32,
    IconOperationalPerformanceManagementTimeWatch32,
    IconProductAnalysis32,
    IconProductPerformanceManagement32
  },
  44: {
    IconFormula44
  }
} as const;

export default icons;
"
Styles for component Icon subcomponent IconContainer IconContainer.module.scss,".container {
  display: flex;
  align-items: center;
  justify-content: center;
  position: relative;
}

.container16 {
  width: 16px;
  height: 16px;
}

.container24 {
  width: 24px;
  height: 24px;
}

.container32 {
  width: 32px;
  height: 32px;
}
"
Codes for component Icon _stories Stories.tsx,"import React, { useState } from 'react';

import Editor from '@components/_storybook/Stories/components/Editor';
import Header from '@components/_storybook/Stories/components/Header';
import Properties from '@components/_storybook/Stories/components/Properties';
import Tests from '@components/_storybook/Stories/components/Tests';
import '@components/_storybook/Stories/styles.css';
import { Tabs, Typography } from '@components/index';

import localStyles from './Icon.module.scss';
import styles from '@components/_storybook/Stories/Stories.module.scss';

import argsTypes from './argsTypes';
import { AllIcons } from './Icon.stories';

enum TabIds {
  dev,
  design,
  tests
}

const COMPONENT_NAME = 'Icon';

const Stories = (): JSX.Element => {
  const [activeTab, setActiveTab] = useState<TabIds>(TabIds.dev);

  const isActive = (tab: TabIds) => {
    return activeTab === tab;
  };

  return (
    <div className={styles.wrapper}>
      <Header
        title={COMPONENT_NAME}
        description=""Компонент иконок, который можно использовать как самостоятельно, так и внутри других компонентов""
        isStable
        codeLink={`https://github.com/nlmk-group/ds-2.0/tree/main/src/components/${COMPONENT_NAME}`}
      />
      <div className={styles['header-wrapper']}>
        <Typography variant=""Heading2"" color=""var(--steel-90)"">
          Иконки
        </Typography>
        <p>Существует 2 разных способа добавить иконку в проект:</p>

        <ol>
          <li>Использовать компонент Icon</li>
          <li>Использовать каждую кастомизированную иконку, как отдельный компонент</li>
        </ol>

        <Typography variant=""Heading2"" color=""var(--steel-90)"">
          Примеры
        </Typography>
        <p>
          Компонент Icon - каждая иконка данного компонента имеет контейнер (размер контейнера по умолчанию равен
          размеру иконки). Важно: загрузка иконки осуществляется по её имени в соответствии с макетом figma.
          <br />
          Для кастомизированных иконок доступны свойства:
        </p>

        <ul>
          <li>name - название иконки, соответствующее макету Figma;</li>
          <li>color - цвет иконки, согласно макету;</li>
          <li>htmlColor - цвет иконки, задаваемый пользователем;</li>
          <li>containerSize - размер контейнера иконки (по умолчанию равен размеру иконки)</li>
        </ul>
      </div>

      <div className={styles.tabs}>
        <Tabs>
          <Tabs.Tab label=""Разработчику"" active={isActive(TabIds.dev)} onClick={() => setActiveTab(TabIds.dev)} />
          <Tabs.Tab label=""Тестирование"" active={isActive(TabIds.tests)} onClick={() => setActiveTab(TabIds.tests)} />
        </Tabs>
      </div>

      {activeTab == TabIds.dev && (
        <>
          <Editor
            description=""Компонент Icon по умолчанию""
            code={`import { Icon } from '@nlmk/ds-2.0';

const App = () => (
  <Icon
    name={'IconTackleCrane24'}
    color=""primary""
    containerSize={32}
  />
)

export default App;
`}
          />
          <br />
          <Typography color=""var(--steel-90)"" variant=""Heading3"">
            Все доступные иконки
          </Typography>
          <br />
          <div className={localStyles['wrapper-info']}>
            <AllIcons />
          </div>

          <Properties argsTypes={argsTypes} />
        </>
      )}
      {activeTab == TabIds.tests && <Tests componentName={COMPONENT_NAME} />}
    </div>
  );
};

export default Stories;
"
Codes for component Icon _stories Icon.stories.tsx,"import React, {
  ChangeEvent,
  ChangeEventHandler,
  createElement,
  CSSProperties,
  ReactNode,
  useCallback,
  useEffect,
  useMemo,
  useRef,
  useState
} from 'react';
import { FixedSizeList as List } from 'react-window';

import { CopyWrapper } from '@components/Colors/subcomponents/CopyWrapper';
import argsTypes from '@components/Icon/_stories/argsTypes';
import { TIconName } from '@components/Icon/IconsDirectory/unionType';
import { TIconProps, TIconsObject } from '@components/Icon/types';
import { Card, Icon, Input, Typography } from '@components/index';
import { Meta, StoryFn } from '@storybook/react';
import { clsx } from 'clsx';
import { startCase } from 'lodash';

import styles from './Icon.module.scss';

import icons from '../IconsDirectory';
import { iconsAlwaysDefaultColor, iconsUseFillAndStroke, iconsUseStroke, rowCount } from './variables';

export default {
  title: 'Components/Icon/Stories',
  component: Icon,
  argTypes: argsTypes,
  parameters: {
    layout: 'fullscreen'
  }
} as Meta<typeof Icon>;

interface IconsWithSizesAndColors {
  [iconName: string]: {
    [size: string]: ReactNode;
  };
}

export const IconComponent = (argsTypes: TIconProps): JSX.Element => {
  return (
    <div className={clsx(styles.wrapper, styles.sized, styles['wrapper-border-radius'])}>
      <Icon {...argsTypes} />
    </div>
  );
};

IconComponent.storyName = 'Компонент Icon по умолчанию';
IconComponent.args = {
  name: 'IconTuneControlOutlined32',
  color: 'primary',
  containerSize: 24
};
IconComponent.decorators = [
  (Story: StoryFn) => (
    <div style={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height: '200px' }}>
      <Story />
    </div>
  )
];

export const AllIcons = (): JSX.Element => {
  const [searchText, setSearchText] = useState('');

  const formatIconName = useCallback((name: string) => {
    return name.replace('Icon', '');
  }, []);

  const iconsByNames: IconsWithSizesAndColors = useMemo(() => {
    const result: IconsWithSizesAndColors = {};
    Object.keys(icons).forEach((size: keyof TIconsObject) => {
      Object.keys(icons[size] || {}).forEach((iconName: string) => {
        const formattedIconName = formatIconName(iconName as TIconName).replace(size.toString(), '');
        if (!result[formattedIconName]) {
          result[formattedIconName] = {};
        }
        const useStroke = iconName.includes('Kovsh');
        const iconComponent = icons[size][iconName as TIconName];
        if (iconComponent) {
          const iconProps: Record<string, any> = {
            style: {
              ...(useStroke && { stroke: 'var(--icon-color)' })
            }
          };
          result[formattedIconName][size.toString()] = createElement(iconComponent, iconProps);
        }
      });
    });
    return result;
  }, [formatIconName]);

  const handleChangeColor = useCallback((e: ChangeEvent<HTMLInputElement>) => {
    const newColor = e.target.value;
    document.documentElement.style.setProperty('--icon-color', newColor);
  }, []);

  const handleSearchChange: ChangeEventHandler<HTMLInputElement | HTMLTextAreaElement> = useCallback(e => {
    const value = e.target.value;
    setSearchText(value);
  }, []);

  const resetSearch = () => {
    setSearchText('');
  };

  const colorInputRef = useRef<HTMLInputElement>(null);

  useEffect(() => {
    const initialColor =
      getComputedStyle(document.documentElement).getPropertyValue('--icon-color').trim() || '#167ffb';
    if (colorInputRef.current) {
      colorInputRef.current.value = initialColor;
    }
  }, []);

  const filteredIconsMemo = useMemo(() => {
    return Object.keys(iconsByNames)
      .filter(iconName => iconName.toLowerCase().includes(searchText.toLowerCase()))
      .map(iconName => ({
        title: iconName,
        sizes: iconsByNames[iconName]
      }));
  }, [iconsByNames, searchText]);

  const Row = ({ index, style }: { index: number; style: CSSProperties }) => {
    const icon = filteredIconsMemo[index];
    return (
      <div style={style} className={styles.row}>
        {new Array(rowCount).fill(null).map((_, colIndex) => {
          const iconIndex = index * rowCount + colIndex;
          if (iconIndex >= filteredIconsMemo.length) return null;

          const icon = filteredIconsMemo[iconIndex];

          return (
            <Card key={iconIndex} className={styles.card} indicatorStatus=""default"">
              <div className={styles.cardHeader}>
                <Typography variant=""Body1"" color=""var(--steel-90)"">
                  {startCase(formatIconName(icon.title))}
                </Typography>
              </div>
              <div className={styles.icons}>
                {Object.entries(icon.sizes).map(([size, iconElement]) => {
                  const useStroke = iconsUseStroke.includes(`Icon${icon.title}${size}`);
                  const useFillAndStroke = iconsUseFillAndStroke.includes(`Icon${icon.title}${size}`);
                  const isAlwaysDefaultColorIcon = iconsAlwaysDefaultColor.includes(`Icon${icon.title}${size}`);
                  return (
                    <CopyWrapper key={`Icon${icon.title}${size}`} copy={`Icon${icon.title}${size}`} placement=""bottom"">
                      <div
                        className={clsx(styles.icon, {
                          [styles.strokeIcon]: useStroke,
                          [styles.fillAndStrokeIcon]: useFillAndStroke,
                          [styles.iconFill]: !useStroke && !useFillAndStroke && !isAlwaysDefaultColorIcon
                        })}
                      >
                        {iconElement}
                      </div>
                    </CopyWrapper>
                  );
                })}
              </div>
            </Card>
          );
        })}
      </div>
    );
  };

  return (
    <div className={styles.wrapper}>
      <div className={styles.controls}>
        <Input
          label=""Поиск иконок""
          value={searchText}
          onChange={handleSearchChange}
          className={styles.input}
          reset
          onReset={resetSearch}
        />
        <div className={styles.colorControl}>
          <Typography variant=""Body1"" className={styles.colorControlTitle}>
            Выберите цвет:
          </Typography>
          <input type=""color"" ref={colorInputRef} onChange={handleChangeColor} className={styles.colorInput} />
        </div>
      </div>
      <div className={styles.table}>
        {filteredIconsMemo.length > 0 ? (
          <List height={900} itemCount={Math.ceil(filteredIconsMemo.length / rowCount)} itemSize={200} width={'100%'}>
            {Row}
          </List>
        ) : (
          <Typography variant=""Heading2"" color=""primary"" className={styles.noResults}>
            Ничего не найдено
          </Typography>
        )}
      </div>
    </div>
  );
};
AllIcons.storyName = 'Все доступные иконки';
"
Types for component Icon IconsDirectory System index.ts,"/**
 * Этот файл сгенерирован автоматически.
 */

export { IconAddCommentFilled16, IconAddCommentFilled24, IconAddCommentFilled32 } from './AddCommentFilled';
export { IconAddCommentOutlined16, IconAddCommentOutlined24, IconAddCommentOutlined32 } from './AddCommentOutlined';
export { IconAddPlusCircleFilled16, IconAddPlusCircleFilled24, IconAddPlusCircleFilled32 } from './AddPlusCircleFilled';
export {
  IconAddPlusCircleOutlined16,
  IconAddPlusCircleOutlined24,
  IconAddPlusCircleOutlined32
} from './AddPlusCircleOutlined';
export { IconAddPlusFilled16, IconAddPlusFilled24, IconAddPlusFilled32 } from './AddPlusFilled';
export { IconAddPlusOutlined16, IconAddPlusOutlined24, IconAddPlusOutlined32 } from './AddPlusOutlined';
export {
  IconAllDoneDoubleCheckFilled16,
  IconAllDoneDoubleCheckFilled24,
  IconAllDoneDoubleCheckFilled32
} from './AllDoneDoubleCheckFilled';
export {
  IconAllDoneDoubleCheckOutlined16,
  IconAllDoneDoubleCheckOutlined24,
  IconAllDoneDoubleCheckOutlined32
} from './AllDoneDoubleCheckOutlined';
export { IconAnalyticsFilled16, IconAnalyticsFilled24, IconAnalyticsFilled32 } from './AnalyticsFilled';
export { IconAnalyticsOutlined16, IconAnalyticsOutlined24, IconAnalyticsOutlined32 } from './AnalyticsOutlined';
export { IconArrowBottom16, IconArrowBottom24, IconArrowBottom32 } from './ArrowBottom';
export { IconArrowDownFilled16, IconArrowDownFilled24, IconArrowDownFilled32 } from './ArrowDownFilled';
export { IconArrowDownOutlined16, IconArrowDownOutlined24, IconArrowDownOutlined32 } from './ArrowDownOutlined';
export { IconArrowLeftDownFilled16, IconArrowLeftDownFilled24, IconArrowLeftDownFilled32 } from './ArrowLeftDownFilled';
export {
  IconArrowLeftDownOutlined16,
  IconArrowLeftDownOutlined24,
  IconArrowLeftDownOutlined32
} from './ArrowLeftDownOutlined';
export { IconArrowLeftFilled16, IconArrowLeftFilled24, IconArrowLeftFilled32 } from './ArrowLeftFilled';
export { IconArrowLeftOutlined16, IconArrowLeftOutlined24, IconArrowLeftOutlined32 } from './ArrowLeftOutlined';
export { IconArrowLeftUpFilled16, IconArrowLeftUpFilled24, IconArrowLeftUpFilled32 } from './ArrowLeftUpFilled';
export {
  IconArrowRightDownFilled16,
  IconArrowRightDownFilled24,
  IconArrowRightDownFilled32
} from './ArrowRightDownFilled';
export {
  IconArrowRightDownOutlined16,
  IconArrowRightDownOutlined24,
  IconArrowRightDownOutlined32
} from './ArrowRightDownOutlined';
export { IconArrowRightFilled16, IconArrowRightFilled24, IconArrowRightFilled32 } from './ArrowRightFilled';
export { IconArrowRightOutlined16, IconArrowRightOutlined24, IconArrowRightOutlined32 } from './ArrowRightOutlined';
export { IconArrowTop16, IconArrowTop24, IconArrowTop32 } from './ArrowTop';
export { IconArrowUpFilled16, IconArrowUpFilled24, IconArrowUpFilled32 } from './ArrowUpFilled';
export { IconArrowUpOutlined16, IconArrowUpOutlined24, IconArrowUpOutlined32 } from './ArrowUpOutlined';
export { IconArrowUpRightFilled16, IconArrowUpRightFilled24, IconArrowUpRightFilled32 } from './ArrowUpRightFilled';
export {
  IconArrowUpRightOutlined16,
  IconArrowUpRightOutlined24,
  IconArrowUpRightOutlined32
} from './ArrowUpRightOutlined';
export {
  IconArrowsMultipleStopDotsFilled16,
  IconArrowsMultipleStopDotsFilled24,
  IconArrowsMultipleStopDotsFilled32
} from './ArrowsMultipleStopDotsFilled';
export {
  IconArrowsMultipleStopDotsOutlined16,
  IconArrowsMultipleStopDotsOutlined24,
  IconArrowsMultipleStopDotsOutlined32
} from './ArrowsMultipleStopDotsOutlined';
export {
  IconArrowsSwapVertFilled16,
  IconArrowsSwapVertFilled24,
  IconArrowsSwapVertFilled32
} from './ArrowsSwapVertFilled';
export {
  IconArrowsSwapVertOutlined16,
  IconArrowsSwapVertOutlined24,
  IconArrowsSwapVertOutlined32
} from './ArrowsSwapVertOutlined';
export { IconArticleFilled16, IconArticleFilled24, IconArticleFilled32 } from './ArticleFilled';
export { IconArticleOutlined16, IconArticleOutlined24, IconArticleOutlined32 } from './ArticleOutlined';
export {
  IconAttentionMarkWarningAlertFilled16,
  IconAttentionMarkWarningAlertFilled24,
  IconAttentionMarkWarningAlertFilled32
} from './AttentionMarkWarningAlertFilled';
export {
  IconAttentionMarkWarningAlertOutlined16,
  IconAttentionMarkWarningAlertOutlined24,
  IconAttentionMarkWarningAlertOutlined32
} from './AttentionMarkWarningAlertOutlined';
export {
  IconAttentionWarningAlertErrorFilled16,
  IconAttentionWarningAlertErrorFilled24,
  IconAttentionWarningAlertErrorFilled32
} from './AttentionWarningAlertErrorFilled';
export {
  IconAttentionWarningAlertErrorOutlined16,
  IconAttentionWarningAlertErrorOutlined24,
  IconAttentionWarningAlertErrorOutlined32
} from './AttentionWarningAlertErrorOutlined';
export {
  IconAttentionWarningAlertFilled16,
  IconAttentionWarningAlertFilled24,
  IconAttentionWarningAlertFilled32
} from './AttentionWarningAlertFilled';
export {
  IconAttentionWarningAlertOutlined16,
  IconAttentionWarningAlertOutlined24,
  IconAttentionWarningAlertOutlined32
} from './AttentionWarningAlertOutlined';
export {
  IconAutoRenewReloadFilled16,
  IconAutoRenewReloadFilled24,
  IconAutoRenewReloadFilled32
} from './AutoRenewReloadFilled';
export {
  IconAutoRenewReloadOutlined16,
  IconAutoRenewReloadOutlined24,
  IconAutoRenewReloadOutlined32
} from './AutoRenewReloadOutlined';
export {
  IconAutoRenewSystemOutlined16,
  IconAutoRenewSystemOutlined24,
  IconAutoRenewSystemOutlined32
} from './AutoRenewSystemOutlined';
export { IconBackSpaceFilled16, IconBackSpaceFilled24, IconBackSpaceFilled32 } from './BackSpaceFilled';
export { IconBackSpaceOutlined16, IconBackSpaceOutlined24, IconBackSpaceOutlined32 } from './BackSpaceOutlined';
export { IconBarChartFilled16, IconBarChartFilled24, IconBarChartFilled32 } from './BarChartFilled';
export { IconBarChartOutlined16, IconBarChartOutlined24, IconBarChartOutlined32 } from './BarChartOutlined';
export { IconBasketBuying16, IconBasketBuying24, IconBasketBuying32 } from './BasketBuying';
export { IconBlockCloseFilled16, IconBlockCloseFilled24, IconBlockCloseFilled32 } from './BlockCloseFilled';
export { IconBlockCloseOutlined16, IconBlockCloseOutlined24, IconBlockCloseOutlined32 } from './BlockCloseOutlined';
export { IconBorder16, IconBorder24, IconBorder32 } from './Border';
export { IconBroom16, IconBroom24, IconBroom32 } from './Broom';
export { IconBugReportFilled16, IconBugReportFilled24, IconBugReportFilled32 } from './BugReportFilled';
export { IconBusinessOutlined16, IconBusinessOutlined24, IconBusinessOutlined32 } from './BusinessOutlined';
export { IconCalendar2Filled16, IconCalendar2Filled24, IconCalendar2Filled32 } from './Calendar2Filled';
export { IconCalendar2Outlined16, IconCalendar2Outlined24, IconCalendar2Outlined32 } from './Calendar2Outlined';
export { IconCalendarCheckFilled16, IconCalendarCheckFilled24, IconCalendarCheckFilled32 } from './CalendarCheckFilled';
export {
  IconCalendarCheckOutlined16,
  IconCalendarCheckOutlined24,
  IconCalendarCheckOutlined32
} from './CalendarCheckOutlined';
export { IconCalendarDateFilled16, IconCalendarDateFilled24, IconCalendarDateFilled32 } from './CalendarDateFilled';
export {
  IconCalendarDateOutlined16,
  IconCalendarDateOutlined24,
  IconCalendarDateOutlined32
} from './CalendarDateOutlined';
export { IconCalendarFilled16, IconCalendarFilled24, IconCalendarFilled32 } from './CalendarFilled';
export { IconCalendarOutlined16, IconCalendarOutlined24, IconCalendarOutlined32 } from './CalendarOutlined';
export { IconCancelFilled16, IconCancelFilled24, IconCancelFilled32 } from './CancelFilled';
export { IconCancelOutlined16, IconCancelOutlined24, IconCancelOutlined32 } from './CancelOutlined';
export {
  IconChevronArrowDownFilled16,
  IconChevronArrowDownFilled24,
  IconChevronArrowDownFilled32
} from './ChevronArrowDownFilled';
export {
  IconChevronArrowDownOutlined16,
  IconChevronArrowDownOutlined24,
  IconChevronArrowDownOutlined32
} from './ChevronArrowDownOutlined';
export {
  IconChevronArrowLeftFilled16,
  IconChevronArrowLeftFilled24,
  IconChevronArrowLeftFilled32
} from './ChevronArrowLeftFilled';
export {
  IconChevronArrowLeftOutlined16,
  IconChevronArrowLeftOutlined24,
  IconChevronArrowLeftOutlined32
} from './ChevronArrowLeftOutlined';
export {
  IconChevronArrowRightFilled16,
  IconChevronArrowRightFilled24,
  IconChevronArrowRightFilled32
} from './ChevronArrowRightFilled';
export {
  IconChevronArrowRightOutlined16,
  IconChevronArrowRightOutlined24,
  IconChevronArrowRightOutlined32
} from './ChevronArrowRightOutlined';
export {
  IconChevronArrowUpFilled16,
  IconChevronArrowUpFilled24,
  IconChevronArrowUpFilled32
} from './ChevronArrowUpFilled';
export {
  IconChevronArrowUpOutlined16,
  IconChevronArrowUpOutlined24,
  IconChevronArrowUpOutlined32
} from './ChevronArrowUpOutlined';
export {
  IconChevronFirstPageOutlined16,
  IconChevronFirstPageOutlined24,
  IconChevronFirstPageOutlined32
} from './ChevronFirstPageOutlined';
export {
  IconChevronLastPageOutlined16,
  IconChevronLastPageOutlined24,
  IconChevronLastPageOutlined32
} from './ChevronLastPageOutlined';
export { IconCircleFilled16, IconCircleFilled24, IconCircleFilled32 } from './CircleFilled';
export { IconCircleOutlined16, IconCircleOutlined24, IconCircleOutlined32 } from './CircleOutlined';
export { IconCloseFilled16, IconCloseFilled24, IconCloseFilled32 } from './CloseFilled';
export { IconCloseOutlined16, IconCloseOutlined24, IconCloseOutlined32 } from './CloseOutlined';
export { IconCloudDoneFilled16, IconCloudDoneFilled24, IconCloudDoneFilled32 } from './CloudDoneFilled';
export { IconCloudDoneOutlined16, IconCloudDoneOutlined24, IconCloudDoneOutlined32 } from './CloudDoneOutlined';
export { IconColumnFilter16, IconColumnFilter24, IconColumnFilter32 } from './ColumnFilter';
export {
  IconCommentChatBubbleClearFilled16,
  IconCommentChatBubbleClearFilled24,
  IconCommentChatBubbleClearFilled32
} from './CommentChatBubbleClearFilled';
export {
  IconCommentChatBubbleClearOutlined16,
  IconCommentChatBubbleClearOutlined24,
  IconCommentChatBubbleClearOutlined32
} from './CommentChatBubbleClearOutlined';
export {
  IconCommentChatBubbleFullFilled16,
  IconCommentChatBubbleFullFilled24,
  IconCommentChatBubbleFullFilled32
} from './CommentChatBubbleFullFilled';
export {
  IconCommentChatBubbleFullOutlined16,
  IconCommentChatBubbleFullOutlined24,
  IconCommentChatBubbleFullOutlined32
} from './CommentChatBubbleFullOutlined';
export { IconCommunityFilled16, IconCommunityFilled24, IconCommunityFilled32 } from './CommunityFilled';
export { IconCommunityOutlined16, IconCommunityOutlined24, IconCommunityOutlined32 } from './CommunityOutlined';
export { IconContentCopyFilled16, IconContentCopyFilled24, IconContentCopyFilled32 } from './ContentCopyFilled';
export { IconContentCopyOutlined16, IconContentCopyOutlined24, IconContentCopyOutlined32 } from './ContentCopyOutlined';
export {
  IconCornerArrowDownLeftFilled16,
  IconCornerArrowDownLeftFilled24,
  IconCornerArrowDownLeftFilled32
} from './CornerArrowDownLeftFilled';
export {
  IconCornerArrowDownLeftOutlined16,
  IconCornerArrowDownLeftOutlined24,
  IconCornerArrowDownLeftOutlined32
} from './CornerArrowDownLeftOutlined';
export {
  IconCornerArrowDownRightFilled16,
  IconCornerArrowDownRightFilled24,
  IconCornerArrowDownRightFilled32
} from './CornerArrowDownRightFilled';
export {
  IconCornerArrowDownRightOutlined16,
  IconCornerArrowDownRightOutlined24,
  IconCornerArrowDownRightOutlined32
} from './CornerArrowDownRightOutlined';
export {
  IconCornerArrowLeftDownFilled16,
  IconCornerArrowLeftDownFilled24,
  IconCornerArrowLeftDownFilled32
} from './CornerArrowLeftDownFilled';
export {
  IconCornerArrowLeftDownOutlined16,
  IconCornerArrowLeftDownOutlined24,
  IconCornerArrowLeftDownOutlined32
} from './CornerArrowLeftDownOutlined';
export {
  IconCornerArrowLeftUpFilled16,
  IconCornerArrowLeftUpFilled24,
  IconCornerArrowLeftUpFilled32
} from './CornerArrowLeftUpFilled';
export {
  IconCornerArrowLeftUpOutlined16,
  IconCornerArrowLeftUpOutlined24,
  IconCornerArrowLeftUpOutlined32
} from './CornerArrowLeftUpOutlined';
export {
  IconCornerArrowRightDownFilled16,
  IconCornerArrowRightDownFilled24,
  IconCornerArrowRightDownFilled32
} from './CornerArrowRightDownFilled';
export {
  IconCornerArrowRightDownOutlined16,
  IconCornerArrowRightDownOutlined24,
  IconCornerArrowRightDownOutlined32
} from './CornerArrowRightDownOutlined';
export {
  IconCornerArrowRightUpFilled16,
  IconCornerArrowRightUpFilled24,
  IconCornerArrowRightUpFilled32
} from './CornerArrowRightUpFilled';
export {
  IconCornerArrowRightUpOutlined16,
  IconCornerArrowRightUpOutlined24,
  IconCornerArrowRightUpOutlined32
} from './CornerArrowRightUpOutlined';
export {
  IconCornerArrowUpLeftFilled16,
  IconCornerArrowUpLeftFilled24,
  IconCornerArrowUpLeftFilled32
} from './CornerArrowUpLeftFilled';
export {
  IconCornerArrowUpLeftOutlined16,
  IconCornerArrowUpLeftOutlined24,
  IconCornerArrowUpLeftOutlined32
} from './CornerArrowUpLeftOutlined';
export {
  IconCornerArrowUpRightFilled16,
  IconCornerArrowUpRightFilled24,
  IconCornerArrowUpRightFilled32
} from './CornerArrowUpRightFilled';
export {
  IconCornerArrowUpRightOutlined16,
  IconCornerArrowUpRightOutlined24,
  IconCornerArrowUpRightOutlined32
} from './CornerArrowUpRightOutlined';
export { IconDNSFilled16, IconDNSFilled24, IconDNSFilled32 } from './DNSFilled';
export { IconDNSOutlined16, IconDNSOutlined24, IconDNSOutlined32 } from './DNSOutlined';
export { IconDarkModeFilled16, IconDarkModeFilled24, IconDarkModeFilled32 } from './DarkModeFilled';
export { IconDarkModeOutlined16, IconDarkModeOutlined24, IconDarkModeOutlined32 } from './DarkModeOutlined';
export { IconDeleteBinFilled16, IconDeleteBinFilled24, IconDeleteBinFilled32 } from './DeleteBinFilled';
export { IconDeleteBinOutlined16, IconDeleteBinOutlined24, IconDeleteBinOutlined32 } from './DeleteBinOutlined';
export { IconDeleteMinusFilled16, IconDeleteMinusFilled24, IconDeleteMinusFilled32 } from './DeleteMinusFilled';
export { IconDeleteMinusOutlined16, IconDeleteMinusOutlined24, IconDeleteMinusOutlined32 } from './DeleteMinusOutlined';
export {
  IconDirectionsTransitTrainTransportFilled16,
  IconDirectionsTransitTrainTransportFilled24,
  IconDirectionsTransitTrainTransportFilled32
} from './DirectionsTransitTrainTransportFilled';
export {
  IconDirectionsTransitTrainTransportOutlined16,
  IconDirectionsTransitTrainTransportOutlined24,
  IconDirectionsTransitTrainTransportOutlined32
} from './DirectionsTransitTrainTransportOutlined';
export { IconDirectoriesFilled16, IconDirectoriesFilled24, IconDirectoriesFilled32 } from './DirectoriesFilled';
export { IconDirectoriesOutlined16, IconDirectoriesOutlined24, IconDirectoriesOutlined32 } from './DirectoriesOutlined';
export { IconDoneCheckFilled16, IconDoneCheckFilled24, IconDoneCheckFilled32 } from './DoneCheckFilled';
export { IconDoneCheckOutlined16, IconDoneCheckOutlined24, IconDoneCheckOutlined32 } from './DoneCheckOutlined';
export { IconDownloadFilled16, IconDownloadFilled24, IconDownloadFilled32 } from './DownloadFilled';
export { IconDownloadOutlined16, IconDownloadOutlined24, IconDownloadOutlined32 } from './DownloadOutlined';
export {
  IconDragIndicatorDotsFilled16,
  IconDragIndicatorDotsFilled24,
  IconDragIndicatorDotsFilled32
} from './DragIndicatorDotsFilled';
export {
  IconDragIndicatorDotsOutlined16,
  IconDragIndicatorDotsOutlined24,
  IconDragIndicatorDotsOutlined32
} from './DragIndicatorDotsOutlined';
export { IconDvrFilled16, IconDvrFilled24, IconDvrFilled32 } from './DvrFilled';
export { IconDvrOutlined16, IconDvrOutlined24, IconDvrOutlined32 } from './DvrOutlined';
export { IconEditPenFilled16, IconEditPenFilled24, IconEditPenFilled32 } from './EditPenFilled';
export { IconEditPenOutlined16, IconEditPenOutlined24, IconEditPenOutlined32 } from './EditPenOutlined';
export { IconEducationFilled16, IconEducationFilled24, IconEducationFilled32 } from './EducationFilled';
export { IconEducationOutlined16, IconEducationOutlined24, IconEducationOutlined32 } from './EducationOutlined';
export { IconEnterFilled16, IconEnterFilled24, IconEnterFilled32 } from './EnterFilled';
export { IconEnterOutlined16, IconEnterOutlined24, IconEnterOutlined32 } from './EnterOutlined';
export { IconExitFilled16, IconExitFilled24, IconExitFilled32 } from './ExitFilled';
export { IconExitOutlined16, IconExitOutlined24, IconExitOutlined32 } from './ExitOutlined';
export { IconEyeFilled16, IconEyeFilled24, IconEyeFilled32 } from './EyeFilled';
export { IconEyeOffFilled16, IconEyeOffFilled24, IconEyeOffFilled32 } from './EyeOffFilled';
export { IconEyeOffOutlined16, IconEyeOffOutlined24, IconEyeOffOutlined32 } from './EyeOffOutlined';
export { IconEyeOutlined16, IconEyeOutlined24, IconEyeOutlined32 } from './EyeOutlined';
export { IconEyeglassesFill16, IconEyeglassesFill24, IconEyeglassesFill32 } from './EyeglassesFill';
export { IconEyeglassesOutlined16, IconEyeglassesOutlined24, IconEyeglassesOutlined32 } from './EyeglassesOutlined';
export { IconFilterListFilled16, IconFilterListFilled24, IconFilterListFilled32 } from './FilterListFilled';
export { IconFilterListOutlined16, IconFilterListOutlined24, IconFilterListOutlined32 } from './FilterListOutlined';
export {
  IconFilterSortAscendedFilled16,
  IconFilterSortAscendedFilled24,
  IconFilterSortAscendedFilled32
} from './FilterSortAscendedFilled';
export {
  IconFilterSortAscendedOutlined16,
  IconFilterSortAscendedOutlined24,
  IconFilterSortAscendedOutlined32
} from './FilterSortAscendedOutlined';
export { IconFilterSortFilled16, IconFilterSortFilled24, IconFilterSortFilled32 } from './FilterSortFilled';
export { IconFilterSortOutlined16, IconFilterSortOutlined24, IconFilterSortOutlined32 } from './FilterSortOutlined';
export { IconFolderFilled16, IconFolderFilled24, IconFolderFilled32 } from './FolderFilled';
export { IconFolderHumanFilled16, IconFolderHumanFilled24, IconFolderHumanFilled32 } from './FolderHumanFilled';
export { IconFolderHumanOutlined16, IconFolderHumanOutlined24, IconFolderHumanOutlined32 } from './FolderHumanOutlined';
export { IconFolderOutlined16, IconFolderOutlined24, IconFolderOutlined32 } from './FolderOutlined';
export {
  IconFormatLineSpacingOutlined16,
  IconFormatLineSpacingOutlined24,
  IconFormatLineSpacingOutlined32
} from './FormatLineSpacingOutlined';
export { IconFormatListFilled16, IconFormatListFilled24, IconFormatListFilled32 } from './FormatListFilled';
export {
  IconFormatListNumberedFilled16,
  IconFormatListNumberedFilled24,
  IconFormatListNumberedFilled32
} from './FormatListNumberedFilled';
export {
  IconFormatListNumberedOutlined16,
  IconFormatListNumberedOutlined24,
  IconFormatListNumberedOutlined32
} from './FormatListNumberedOutlined';
export { IconFormatListOutlined16, IconFormatListOutlined24, IconFormatListOutlined32 } from './FormatListOutlined';
export { IconFormula16, IconFormula24, IconFormula32, IconFormula44 } from './Formula';
export {
  IconFullScreenExitCloseFilled16,
  IconFullScreenExitCloseFilled24,
  IconFullScreenExitCloseFilled32
} from './FullScreenExitCloseFilled';
export {
  IconFullScreenExitCloseOutlined16,
  IconFullScreenExitCloseOutlined24,
  IconFullScreenExitCloseOutlined32
} from './FullScreenExitCloseOutlined';
export {
  IconFullScreenOpenFilled16,
  IconFullScreenOpenFilled24,
  IconFullScreenOpenFilled32
} from './FullScreenOpenFilled';
export {
  IconFullScreenOpenOutlined16,
  IconFullScreenOpenOutlined24,
  IconFullScreenOpenOutlined32
} from './FullScreenOpenOutlined';
export { IconGraphChartTimeline16, IconGraphChartTimeline24, IconGraphChartTimeline32 } from './GraphChartTimeline';
export {
  IconHandPanToolPalmsFilled16,
  IconHandPanToolPalmsFilled24,
  IconHandPanToolPalmsFilled32
} from './HandPanToolPalmsFilled';
export {
  IconHandPanToolPalmsOutlined16,
  IconHandPanToolPalmsOutlined24,
  IconHandPanToolPalmsOutlined32
} from './HandPanToolPalmsOutlined';
export { IconHeartFilled16, IconHeartFilled24, IconHeartFilled32 } from './HeartFilled';
export { IconHeartOutlined16, IconHeartOutlined24, IconHeartOutlined32 } from './HeartOutlined';
export { IconHelpFilled16, IconHelpFilled24, IconHelpFilled32 } from './HelpFilled';
export { IconHelpOutlined16, IconHelpOutlined24, IconHelpOutlined32 } from './HelpOutlined';
export { IconHelperMailOutlined16, IconHelperMailOutlined24, IconHelperMailOutlined32 } from './HelperMailOutlined';
export { IconHomeOutlined16, IconHomeOutlined24, IconHomeOutlined32 } from './HomeOutlined';
export {
  IconHourglassEmptyOutlined16,
  IconHourglassEmptyOutlined24,
  IconHourglassEmptyOutlined32
} from './HourglassEmptyOutlined';
export { IconInfoFilled16, IconInfoFilled24, IconInfoFilled32 } from './InfoFilled';
export { IconInfoOutlined16, IconInfoOutlined24, IconInfoOutlined32 } from './InfoOutlined';
export { IconInputFilled16, IconInputFilled24, IconInputFilled32 } from './InputFilled';
export { IconInputOutlined16, IconInputOutlined24, IconInputOutlined32 } from './InputOutlined';
export { IconInsertChartFilled16, IconInsertChartFilled24, IconInsertChartFilled32 } from './InsertChartFilled';
export { IconInsertChartOutlined16, IconInsertChartOutlined24, IconInsertChartOutlined32 } from './InsertChartOutlined';
export {
  IconInsertDriveFileFilled16,
  IconInsertDriveFileFilled24,
  IconInsertDriveFileFilled32
} from './InsertDriveFileFilled';
export {
  IconInsertDriveFileOutlined16,
  IconInsertDriveFileOutlined24,
  IconInsertDriveFileOutlined32
} from './InsertDriveFileOutlined';
export { IconInteractionFilled16, IconInteractionFilled24, IconInteractionFilled32 } from './InteractionFilled';
export { IconInteractionOutlined16, IconInteractionOutlined24, IconInteractionOutlined32 } from './InteractionOutlined';
export { IconJsonOutlined16, IconJsonOutlined24, IconJsonOutlined32 } from './JsonOutlined';
export {
  IconKeyboardDoubleArrowLeftChevronFilled16,
  IconKeyboardDoubleArrowLeftChevronFilled24,
  IconKeyboardDoubleArrowLeftChevronFilled32
} from './KeyboardDoubleArrowLeftChevronFilled';
export {
  IconKeyboardDoubleArrowLeftChevronOutlined16,
  IconKeyboardDoubleArrowLeftChevronOutlined24,
  IconKeyboardDoubleArrowLeftChevronOutlined32
} from './KeyboardDoubleArrowLeftChevronOutlined';
export {
  IconKeyboardDoubleArrowRightChevronFilled16,
  IconKeyboardDoubleArrowRightChevronFilled24,
  IconKeyboardDoubleArrowRightChevronFilled32
} from './KeyboardDoubleArrowRightChevronFilled';
export {
  IconKeyboardDoubleArrowRightChevronOutlined16,
  IconKeyboardDoubleArrowRightChevronOutlined24,
  IconKeyboardDoubleArrowRightChevronOutlined32
} from './KeyboardDoubleArrowRightChevronOutlined';
export { IconLightModeFilled16, IconLightModeFilled24, IconLightModeFilled32 } from './LightModeFilled';
export { IconLightModeOutlined16, IconLightModeOutlined24, IconLightModeOutlined32 } from './LightModeOutlined';
export { IconLightningFilled16, IconLightningFilled24, IconLightningFilled32 } from './LightningFilled';
export { IconLightningStroke16, IconLightningStroke24, IconLightningStroke32 } from './LightningStroke';
export { IconListAltFilled16, IconListAltFilled24, IconListAltFilled32 } from './ListAltFilled';
export { IconListAltOutlined16, IconListAltOutlined24, IconListAltOutlined32 } from './ListAltOutlined';
export { IconListDelete16, IconListDelete24, IconListDelete32 } from './ListDelete';
export {
  IconLocationPinaltFilled16,
  IconLocationPinaltFilled24,
  IconLocationPinaltFilled32
} from './LocationPinaltFilled';
export {
  IconLocationPinaltOutlined16,
  IconLocationPinaltOutlined24,
  IconLocationPinaltOutlined32
} from './LocationPinaltOutlined';
export { IconLockCloseFilled16, IconLockCloseFilled24, IconLockCloseFilled32 } from './LockCloseFilled';
export { IconLockCloseOutlined16, IconLockCloseOutlined24, IconLockCloseOutlined32 } from './LockCloseOutlined';
export { IconLockOpenFilled16, IconLockOpenFilled24, IconLockOpenFilled32 } from './LockOpenFilled';
export { IconLockOpenOutlined16, IconLockOpenOutlined24, IconLockOpenOutlined32 } from './LockOpenOutlined';
export { IconLogoBrandJiraFilled16, IconLogoBrandJiraFilled24, IconLogoBrandJiraFilled32 } from './LogoBrandJiraFilled';
export {
  IconLogoBrandJiraOutlined16,
  IconLogoBrandJiraOutlined24,
  IconLogoBrandJiraOutlined32
} from './LogoBrandJiraOutlined';
export { IconMapFilled16, IconMapFilled24, IconMapFilled32 } from './MapFilled';
export { IconMapOutlined16, IconMapOutlined24, IconMapOutlined32 } from './MapOutlined';
export { IconMapPinaltFilled16, IconMapPinaltFilled24, IconMapPinaltFilled32 } from './MapPinaltFilled';
export { IconMapPinaltOutlined16, IconMapPinaltOutlined24, IconMapPinaltOutlined32 } from './MapPinaltOutlined';
export {
  IconMarkUnreadMailboxOutlined16,
  IconMarkUnreadMailboxOutlined24,
  IconMarkUnreadMailboxOutlined32
} from './MarkUnreadMailboxOutlined';
export { IconMenuBurgerFilled16, IconMenuBurgerFilled24, IconMenuBurgerFilled32 } from './MenuBurgerFilled';
export { IconMenuBurgerOutlined16, IconMenuBurgerOutlined24, IconMenuBurgerOutlined32 } from './MenuBurgerOutlined';
export { IconMoreHorizDotsFilled16, IconMoreHorizDotsFilled24, IconMoreHorizDotsFilled32 } from './MoreHorizDotsFilled';
export {
  IconMoreHorizDotsOutlined16,
  IconMoreHorizDotsOutlined24,
  IconMoreHorizDotsOutlined32
} from './MoreHorizDotsOutlined';
export { IconMoreVertDotsFilled16, IconMoreVertDotsFilled24, IconMoreVertDotsFilled32 } from './MoreVertDotsFilled';
export {
  IconMoreVertDotsOutlined16,
  IconMoreVertDotsOutlined24,
  IconMoreVertDotsOutlined32
} from './MoreVertDotsOutlined';
export {
  IconNotificationsBellFilled16,
  IconNotificationsBellFilled24,
  IconNotificationsBellFilled32
} from './NotificationsBellFilled';
export {
  IconNotificationsBellOffFilled16,
  IconNotificationsBellOffFilled24,
  IconNotificationsBellOffFilled32
} from './NotificationsBellOffFilled';
export {
  IconNotificationsBellOutlined16,
  IconNotificationsBellOutlined24,
  IconNotificationsBellOutlined32
} from './NotificationsBellOutlined';
export { IconParentalLeaveFilled16, IconParentalLeaveFilled24, IconParentalLeaveFilled32 } from './ParentalLeaveFilled';
export { IconPauseFilled16, IconPauseFilled24, IconPauseFilled32 } from './PauseFilled';
export { IconPeopleCancelFilled16, IconPeopleCancelFilled24, IconPeopleCancelFilled32 } from './PeopleCancelFilled';
export {
  IconPeopleCancelOutlined16,
  IconPeopleCancelOutlined24,
  IconPeopleCancelOutlined32
} from './PeopleCancelOutlined';
export {
  IconPeopleCheckDoneFilled16,
  IconPeopleCheckDoneFilled24,
  IconPeopleCheckDoneFilled32
} from './PeopleCheckDoneFilled';
export {
  IconPeopleCheckDoneOutlined16,
  IconPeopleCheckDoneOutlined24,
  IconPeopleCheckDoneOutlined32
} from './PeopleCheckDoneOutlined';
export { IconPersonFilled16, IconPersonFilled24, IconPersonFilled32 } from './PersonFilled';
export { IconPersonOutlined16, IconPersonOutlined24, IconPersonOutlined32 } from './PersonOutlined';
export { IconPhoneCallContact16, IconPhoneCallContact24, IconPhoneCallContact32 } from './PhoneCallContact';
export { IconPhotoCameraOutlined16, IconPhotoCameraOutlined24, IconPhotoCameraOutlined32 } from './PhotoCameraOutlined';
export { IconPictureInPictureOff16, IconPictureInPictureOff24, IconPictureInPictureOff32 } from './PictureInPictureOff';
export { IconPictureInPictureOn16, IconPictureInPictureOn24, IconPictureInPictureOn32 } from './PictureInPictureOn';
export { IconPlay16, IconPlay24, IconPlay32 } from './Play';
export { IconPlayOutlined16, IconPlayOutlined24, IconPlayOutlined32 } from './PlayOutlined';
export { IconPlayerStop16, IconPlayerStop24, IconPlayerStop32 } from './PlayerStop';
export {
  IconPlaylistAddMenuFilled16,
  IconPlaylistAddMenuFilled24,
  IconPlaylistAddMenuFilled32
} from './PlaylistAddMenuFilled';
export {
  IconPlaylistAddMenuOutlined16,
  IconPlaylistAddMenuOutlined24,
  IconPlaylistAddMenuOutlined32
} from './PlaylistAddMenuOutlined';
export {
  IconPlaylistMenuSettingFilled16,
  IconPlaylistMenuSettingFilled24,
  IconPlaylistMenuSettingFilled32
} from './PlaylistMenuSettingFilled';
export {
  IconPlaylistMenuSettingOutlined16,
  IconPlaylistMenuSettingOutlined24,
  IconPlaylistMenuSettingOutlined32
} from './PlaylistMenuSettingOutlined';
export { IconPrintFilled16, IconPrintFilled24, IconPrintFilled32 } from './PrintFilled';
export { IconPrintOutlined16, IconPrintOutlined24, IconPrintOutlined32 } from './PrintOutlined';
export { IconPushPinFilled16, IconPushPinFilled24, IconPushPinFilled32 } from './PushPinFilled';
export { IconPushPinOutlined16, IconPushPinOutlined24, IconPushPinOutlined32 } from './PushPinOutlined';
export { IconQualityFilled16, IconQualityFilled24, IconQualityFilled32 } from './QualityFilled';
export { IconQualityOutlined16, IconQualityOutlined24, IconQualityOutlined32 } from './QualityOutlined';
export { IconQuestionMarkFilled16, IconQuestionMarkFilled24, IconQuestionMarkFilled32 } from './QuestionMarkFilled';
export {
  IconQuestionMarkOutlined16,
  IconQuestionMarkOutlined24,
  IconQuestionMarkOutlined32
} from './QuestionMarkOutlined';
export { IconRedoArrowFilled16, IconRedoArrowFilled24, IconRedoArrowFilled32 } from './RedoArrowFilled';
export { IconRedoArrowOutlined16, IconRedoArrowOutlined24, IconRedoArrowOutlined32 } from './RedoArrowOutlined';
export { IconRepairWrenchFrom16, IconRepairWrenchFrom24, IconRepairWrenchFrom32 } from './RepairWrenchFrom';
export { IconRepairWrenchTo16, IconRepairWrenchTo24, IconRepairWrenchTo32 } from './RepairWrenchTo';
export { IconReplayOutlined16, IconReplayOutlined24, IconReplayOutlined32 } from './ReplayOutlined';
export { IconReservedFrom16, IconReservedFrom24, IconReservedFrom32 } from './ReservedFrom';
export { IconReservedTo16, IconReservedTo24, IconReservedTo32 } from './ReservedTo';
export { IconResizingOutlined16 } from './ResizingOutlined';
export {
  IconRightColumnArrowFilled16,
  IconRightColumnArrowFilled24,
  IconRightColumnArrowFilled32
} from './RightColumnArrowFilled';
export {
  IconRightColumnArrowOutlined16,
  IconRightColumnArrowOutlined24,
  IconRightColumnArrowOutlined32
} from './RightColumnArrowOutlined';
export {
  IconRoundedArrowBackFilled16,
  IconRoundedArrowBackFilled24,
  IconRoundedArrowBackFilled32
} from './RoundedArrowBackFilled';
export {
  IconRoundedArrowBackOutlined16,
  IconRoundedArrowBackOutlined24,
  IconRoundedArrowBackOutlined32
} from './RoundedArrowBackOutlined';
export {
  IconRoundedArrowForwardFilled16,
  IconRoundedArrowForwardFilled24,
  IconRoundedArrowForwardFilled32
} from './RoundedArrowForwardFilled';
export {
  IconRoundedArrowForwardOutlined16,
  IconRoundedArrowForwardOutlined24,
  IconRoundedArrowForwardOutlined32
} from './RoundedArrowForwardOutlined';
export { IconSaveFilled16, IconSaveFilled24, IconSaveFilled32 } from './SaveFilled';
export { IconSaveOutlined16, IconSaveOutlined24, IconSaveOutlined32 } from './SaveOutlined';
export {
  IconScheduleTimeWatchFilled16,
  IconScheduleTimeWatchFilled24,
  IconScheduleTimeWatchFilled32
} from './ScheduleTimeWatchFilled';
export {
  IconScheduleTimeWatchOutlined16,
  IconScheduleTimeWatchOutlined24,
  IconScheduleTimeWatchOutlined32
} from './ScheduleTimeWatchOutlined';
export { IconSearchFilled16, IconSearchFilled24, IconSearchFilled32 } from './SearchFilled';
export { IconSearchOutlined16, IconSearchOutlined24, IconSearchOutlined32 } from './SearchOutlined';
export { IconSendFilled16, IconSendFilled24, IconSendFilled32 } from './SendFilled';
export { IconSendOutlined16, IconSendOutlined24, IconSendOutlined32 } from './SendOutlined';
export { IconSettingFilled16, IconSettingFilled24, IconSettingFilled32 } from './SettingFilled';
export { IconSettingOutlined16, IconSettingOutlined24, IconSettingOutlined32 } from './SettingOutlined';
export { IconSettingsAltFilled16, IconSettingsAltFilled24, IconSettingsAltFilled32 } from './SettingsAltFilled';
export { IconSettingsAltOutlined16, IconSettingsAltOutlined24, IconSettingsAltOutlined32 } from './SettingsAltOutlined';
export { IconSourceDataFilled16, IconSourceDataFilled24, IconSourceDataFilled32 } from './SourceDataFilled';
export { IconSourceDataOutlined16, IconSourceDataOutlined24, IconSourceDataOutlined32 } from './SourceDataOutlined';
export {
  IconSourceDocCopyOutlined16,
  IconSourceDocCopyOutlined24,
  IconSourceDocCopyOutlined32
} from './SourceDocCopyOutlined';
export { IconSourceDocFilled16, IconSourceDocFilled24, IconSourceDocFilled32 } from './SourceDocFilled';
export { IconStackCollapsed16, IconStackCollapsed24, IconStackCollapsed32 } from './StackCollapsed';
export {
  IconStackExpandedTriangleDown16,
  IconStackExpandedTriangleDown24,
  IconStackExpandedTriangleDown32
} from './StackExpandedTriangleDown';
export {
  IconStackExpandedTriangleUp16,
  IconStackExpandedTriangleUp24,
  IconStackExpandedTriangleUp32
} from './StackExpandedTriangleUp';
export { IconStaffUnitFilled16, IconStaffUnitFilled24, IconStaffUnitFilled32 } from './StaffUnitFilled';
export { IconStaffUnitOutlined16, IconStaffUnitOutlined24, IconStaffUnitOutlined32 } from './StaffUnitOutlined';
export { IconStarFilled16, IconStarFilled24, IconStarFilled32 } from './StarFilled';
export { IconStarOutlined16, IconStarOutlined24, IconStarOutlined32 } from './StarOutlined';
export { IconSuccessFilled16, IconSuccessFilled24, IconSuccessFilled32 } from './SuccessFilled';
export { IconSuccessOutlined16, IconSuccessOutlined24, IconSuccessOutlined32 } from './SuccessOutlined';
export { IconTaskFilled16, IconTaskFilled24, IconTaskFilled32 } from './TaskFilled';
export { IconTaskOutlined16, IconTaskOutlined24, IconTaskOutlined32 } from './TaskOutlined';
export { IconTelegramFilled16, IconTelegramFilled24, IconTelegramFilled32 } from './TelegramFilled';
export { IconThumbsUpLike16, IconThumbsUpLike24, IconThumbsUpLike32 } from './ThumbsUpLike';
export { IconTopicFilled16, IconTopicFilled24, IconTopicFilled32 } from './TopicFilled';
export { IconTopicOutlined16, IconTopicOutlined24, IconTopicOutlined32 } from './TopicOutlined';
export {
  IconTransportCarTaxiFilled16,
  IconTransportCarTaxiFilled24,
  IconTransportCarTaxiFilled32
} from './TransportCarTaxiFilled';
export {
  IconTransportCarTaxiOutlined16,
  IconTransportCarTaxiOutlined24,
  IconTransportCarTaxiOutlined32
} from './TransportCarTaxiOutlined';
export {
  IconTransportCarTruckLorryFilled16,
  IconTransportCarTruckLorryFilled24,
  IconTransportCarTruckLorryFilled32
} from './TransportCarTruckLorryFilled';
export {
  IconTransportCarTruckLorryOutlined16,
  IconTransportCarTruckLorryOutlined24,
  IconTransportCarTruckLorryOutlined32
} from './TransportCarTruckLorryOutlined';
export { IconTuneControlFilled16, IconTuneControlFilled24, IconTuneControlFilled32 } from './TuneControlFilled';
export { IconTuneControlOutlined16, IconTuneControlOutlined24, IconTuneControlOutlined32 } from './TuneControlOutlined';
export { IconUndoArrowFilled16, IconUndoArrowFilled24, IconUndoArrowFilled32 } from './UndoArrowFilled';
export { IconUndoArrowOutlined16, IconUndoArrowOutlined24, IconUndoArrowOutlined32 } from './UndoArrowOutlined';
export { IconUploadFilled16, IconUploadFilled24, IconUploadFilled32 } from './UploadFilled';
export { IconUploadOutlined16, IconUploadOutlined24, IconUploadOutlined32 } from './UploadOutlined';
export { IconVacancyFilled16, IconVacancyFilled24, IconVacancyFilled32 } from './VacancyFilled';
export { IconVacancyOutlined16, IconVacancyOutlined24, IconVacancyOutlined32 } from './VacancyOutlined';
export { IconVagon16, IconVagon24, IconVagon32 } from './Vagon';
export {
  IconVerticalAlignTopFilled16,
  IconVerticalAlignTopFilled24,
  IconVerticalAlignTopFilled32
} from './VerticalAlignTopFilled';
export {
  IconVerticalAlignTopOutlined16,
  IconVerticalAlignTopOutlined24,
  IconVerticalAlignTopOutlined32
} from './VerticalAlignTopOutlined';
export {
  IconVideoCameraOffOutlined16,
  IconVideoCameraOffOutlined24,
  IconVideoCameraOffOutlined32
} from './VideoCameraOffOutlined';
export {
  IconVideoCameraOnOutlined16,
  IconVideoCameraOnOutlined24,
  IconVideoCameraOnOutlined32
} from './VideoCameraOnOutlined';
export { IconWarningFilled16, IconWarningFilled24, IconWarningFilled32 } from './WarningFilled';
export { IconWhatShotFireFilled16, IconWhatShotFireFilled24, IconWhatShotFireFilled32 } from './WhatShotFireFilled';
export {
  IconWhatShotFireOutlined16,
  IconWhatShotFireOutlined24,
  IconWhatShotFireOutlined32
} from './WhatShotFireOutlined';
export { IconWiFiFilled16, IconWiFiFilled24, IconWiFiFilled32 } from './WiFiFilled';
export { IconWiFiOutlined16, IconWiFiOutlined24, IconWiFiOutlined32 } from './WiFiOutlined';
export { IconZoomInFilled16, IconZoomInFilled24, IconZoomInFilled32 } from './ZoomInFilled';
export { IconZoomInOutlined16, IconZoomInOutlined24, IconZoomInOutlined32 } from './ZoomInOutlined';
export { IconZoomOutFilled16, IconZoomOutFilled24, IconZoomOutFilled32 } from './ZoomOutFilled';
export { IconZoomOutOutlined16, IconZoomOutOutlined24, IconZoomOutOutlined32 } from './ZoomOutOutlined';
"
Types for component Icon types.ts,"import { CSSProperties, FC, ReactNode } from 'react';

import { TIconName } from '@components/Icon/IconsDirectory/unionType';

export type IconColor =
  | 'action'
  | 'disabled'
  | 'error'
  | 'primary'
  | 'secondary'
  | 'inherit'
  | 'success'
  | 'warning'
  | 'default';

export type TContainerSize = 32 | 24 | 16;

export interface TIconProps {
  name: TIconName;
  color?: IconColor;
  htmlColor?: string;
  containerSize?: TContainerSize;
  className?: string;
  style?: CSSProperties;
  badge?: ReactNode;
}

export interface IIconsProps {
  color?: IconColor;
  htmlColor?: string;
}

export interface ISvgProps {
  className?: string;
  onClick?: (e: any) => void;
  active?: boolean;
}

export type TIconComponent = FC<IIconsProps>;

export type TIconsObject = {
  [size: string]: {
    [key in TIconName]?: TIconComponent;
  };
};
"
Codes for component ImagePicture index.tsx,"import React, { FC, useState } from 'react';
import Icon from '@components/Icon';
import clsx from 'clsx';
import { IImagePicture } from './types';
import styles from './ImagePicture.module.scss';
import { ImagePictureRadius, ImagePictureRatios } from './enums';

const ImagePicture: FC<IImagePicture> = ({
  src,
  aspectRatio = ImagePictureRatios['ratio-1x1'],
  radius = ImagePictureRadius['radius-none'],
  className,
  zoom = true,
  ...restImgProps
}) => {
  const [isHovered, setIsHovered] = useState(false);
  const shouldShowZoomOverlay = zoom && src && isHovered;

  const handleMouseEnter = () => {
    setIsHovered(true);
  };

  const handleMouseLeave = () => {
    setIsHovered(false);
  };

  return (
    <div
      className={clsx(
        styles['image-wrapper'],
        styles[aspectRatio],
        styles[radius],
        {
          [styles['no-content']]: !src
        },
        className
      )}
      onMouseEnter={handleMouseEnter}
      onMouseLeave={handleMouseLeave}
      data-testid=""IMAGE_PICTURE""
    >
      {shouldShowZoomOverlay && (
        <>
          <div className={styles['hover-icon']}>
            <Icon
              name='IconZoomInOutlined24'
              containerSize={32}
            />
          </div>
          <div className={styles['hover-overlay']} />
        </>
      )}
      {src && <img src={src} className={styles.image} alt={restImgProps.alt} {...restImgProps} />}
      {!src && (
        <div className={styles['empty-icon']}>
          <Icon
            name='IconFactory32'
            htmlColor={'var(--ac-image-picture-no-content-icon)'}
          />
        </div>
      )}
    </div>
  );
};

export default ImagePicture;
"
Codes for component ImagePicture _stories Stories.tsx,"import React, { useState } from 'react';

import Editor from '@components/_storybook/Stories/components/Editor';
import FigmaEmbed from '@components/_storybook/Stories/components/FigmaEmbed';
import Header from '@components/_storybook/Stories/components/Header';
import Properties from '@components/_storybook/Stories/components/Properties';
import Tests from '@components/_storybook/Stories/components/Tests';
import { Tabs } from '@components/index';

import styles from '@components/_storybook/Stories/Stories.module.scss';

import { argsTypes } from './argsTypes';

const FIGMA_LINK =
  'https://www.figma.com/file/vyvtqfFuN9lCYoWKqEnm9v/DS2.0-Image-%26-Picture?type=design&node-id=667-1393&mode=design&t=hr2Gk5nIjO2Ka48f-0';

const ImagePictureStories = (): JSX.Element => {
  const [activeTab, setActiveTab] = useState(0);

  const imgpicDefaultCode = `import { ImagePicture } from '@nlmk/ds-2.0';

const App = () => {
  const path = 'https://images.unsplash.com/photo-1683343946402-85b144e8ecb6?q=80&w=3570&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D';

  return (
    <ImagePicture src={path} alt=""Описание изображения"" />
  )
};

export default App;
`;

  const imgpicRatioCode = `import { ImagePicture } from '@nlmk/ds-2.0';

const App = () => {
  const path = 'https://images.unsplash.com/photo-1683343946402-85b144e8ecb6?q=80&w=3570&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D';

  return (
    <>
      <ImagePicture src={path} aspectRatio='ratio-16x9' />
      <ImagePicture src={path} aspectRatio='ratio-1x1' />
    </>
  )
};

export default App;
`;

  const imgpicRadiusCode = `import { ImagePicture } from '@nlmk/ds-2.0';

const App = () => {
  const path = 'https://images.unsplash.com/photo-1683343946402-85b144e8ecb6?q=80&w=3570&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D';

  return (
    <>
      <ImagePicture src={path} radius='radius-small' />
    </>
  )
};

export default App;
`;

  return (
    <div className={styles.wrapper}>
      <Header
        title=""ImagePicture""
        description=""ImagePicture обеспечивает гибкую отрисовку изображений с различными соотношениями сторон и радиусами границ. Поддерживает функцию зума при наведении.""
        isStable
        codeLink=""https://github.com/nlmk-group/ds-2.0/tree/main/src/components/ImagePicture""
        figmaLink={FIGMA_LINK}
      />

      <div className={styles.tabs}>
        <Tabs>
          <Tabs.Tab label=""Разработчику"" active={0 === Number(activeTab)} onClick={() => setActiveTab(0)} />
          {/* <Tabs.Tab label=""Дизайнеру"" active={1 === Number(activeTab)} onClick={() => setActiveTab(1)} /> */}
          <Tabs.Tab label=""Тестирование"" active={2 === Number(activeTab)} onClick={() => setActiveTab(2)} />
        </Tabs>
      </div>

      {Number(activeTab) === 0 && (
        <>
          <Editor
            height={400}
            description=""Базовый ImagePicture. Отображает изображение с заданными параметрами.""
            code={imgpicDefaultCode}
          />

          <Editor height={400} description=""ImagePicture с различными соотношениями сторон."" code={imgpicRatioCode} />

          <Editor height={400} description=""ImagePicture с радиусом границ."" code={imgpicRadiusCode} />

          <Properties argsTypes={argsTypes} />
        </>
      )}
      {Number(activeTab) === 1 && <FigmaEmbed url={FIGMA_LINK} />}
      {Number(activeTab) === 2 && <Tests componentName=""ImagePicture"" />}
    </div>
  );
};

export default ImagePictureStories;
"
Types for component ImagePicture _stories argsTypes.ts,"import { ImagePictureRadius, ImagePictureRatios } from '../enums';

export const argsTypes = {
  aspectRatio: {
    description: 'Пропорции изображения',
    table: {
      defaultValue: {
        summary: ImagePictureRatios['ratio-1x1']
      },
      type: {
        summary: Object.values(ImagePictureRatios).join(' | ')
      }
    },
    options: Object.values(ImagePictureRatios),
    control: { type: 'select' }
  },
  radius: {
    description: 'Варианты скругления углов',
    table: {
      defaultValue: {
        summary: ImagePictureRadius['radius-none']
      },
      type: {
        summary: Object.values(ImagePictureRadius).join(' | ')
      }
    },
    options: Object.values(ImagePictureRadius),
    control: { type: 'select' }
  },
  src: {
    description: 'Адрес изображения',
    table: {
      defaultValue: {
        summary: 'undefined'
      },
      type: {
        summary: 'string'
      }
    },
    control: { type: 'string' }
  },
  zoom: {
    description: 'Возможность увеличения изображения по клику',
    table: {
      defaultValue: {
        summary: 'true'
      },
      type: {
        summary: 'boolean'
      }
    },
    control: { type: 'boolean' }
  }
};
"
Types for component ImagePicture enums.ts,"export enum ImagePictureRatios {
  'ratio-1x1' = 'ratio-1x1',
  'ratio-4x3' = 'ratio-4x3',
  'ratio-3x4' = 'ratio-3x4',
  'ratio-16x9' = 'ratio-16x9'
}

export enum ImagePictureRadius {
  'radius-none' = 'radius-none',
  'radius-4px' = 'radius-4px',
  'radius-8px' = 'radius-8px'
}
"
Styles for component ImagePicture ImagePicture.module.scss,"$blackOpacity60: rgba(0, 0, 0, 0.6);

@mixin aspect-ratio($x, $y) {
  aspect-ratio: calc($x / $y);
}

.image-wrapper {
  width: 100%;
  overflow: hidden;
  position: relative;

  // Aspect ratio variants
  &.ratio-1x1 {
    @include aspect-ratio(1, 1);
  }
  &.ratio-4x3 {
    @include aspect-ratio(4, 3);
  }
  &.ratio-3x4 {
    @include aspect-ratio(3, 4);
  }
  &.ratio-16x9 {
    @include aspect-ratio(16, 9);
  }

  // Border radius variants
  &.radius-none {
    border-radius: 0;
  }
  &.radius-4px {
    border-radius: var(--4-radius);
  }
  &.radius-8px {
    border-radius: var(--8-radius);
  }

  // Image common styles
  .image {
    width: 100%;
    height: 100%;
    object-fit: cover;
  }

  // Hover Overlay
  .hover-overlay {
    width: 100%;
    height: 100%;
    background-color: var(--ac-image-picture-hover-bg);
    opacity: var(--65-opacity);
    position: absolute;
    top: 0;
    left: 0;
  }

  // Hover Icon
  .hover-icon {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    color: var(--never-changes-white);
    z-index: 1;
    cursor: pointer;
  }

  // No Content State
  &.no-content {
    background-color: var(--ac-image-picture-no-content-bg);
    display: flex;
    align-items: center;
    justify-content: center;

    .empty-icon {
      width: 17%;

      div {
        width: unset;
        height: unset;
      }
    }
  }
}
"
Types for component ImagePicture types.ts,"import { ImgHTMLAttributes } from 'react';

import { ImagePictureRadius, ImagePictureRatios } from './enums';

export interface IImagePicture extends ImgHTMLAttributes<HTMLImageElement> {
  aspectRatio?: `${ImagePictureRatios}`;
  radius?: `${ImagePictureRadius}`;
  className?: string;
  zoom?: boolean;
}
"
Codes for component Input _stories argsTypes.tsx,"import { customInputColors, sizesMappingInput } from '@components/declaration';
import { IconArticleOutlined16, IconArticleOutlined24, IconArticleOutlined32 } from '@root/src/components';
import React from 'react';

const iconOptions = {
  IconArticleOutlined32: <IconArticleOutlined32 />,
  IconArticleOutlined24: <IconArticleOutlined24 />,
  IconArticleOutlined16: <IconArticleOutlined16 />
};

const argsTypes = {
  onBlur: {
    description:
      'Callback, который будет вызван при изменении значения внутри input, используйте для логики валидации или других действий при потере фокуса',
    action: 'изменено value'
  },
  onChange: {
    description: 'Callback, который будет вызван при изменении значения внутри input',
    action: 'изменено value'
  },
  onReset: {
    description: 'Callback, который будет вызван при клике по иконке сброса',
    action: 'изменено value'
  },
  reset: {
    description: 'Булевое значение для показа иконки сброса',
    control: { type: 'boolean' },
    table: {
      defaultValue: {
        summary: false
      }
    }
  },
  value: {
    description: 'Значение поля input',
    control: { type: 'text' },
    table: {
      type: {
        summary: 'string'
      }
    }
  },
  helperText: {
    description: 'Строка для вспомогательно текста под инпутом. Может быть как текстом, так и элементом ReactNode',
    control: { type: 'text' }
  },
  icon: {
    description: 'Элемент с иконкой, который располагается с правой стороны инпута.',
    table: {
      defaultValue: {
        summary: ''
      },
      type: {
        summary: 'ReactNode'
      }
    },
    options: Object.keys(iconOptions),
    control: { type: 'select' },
    mapping: iconOptions
  },
  size: {
    description: 'Свойство, позволяющее регулировать высоту инпута',
    table: {
      defaultValue: {
        summary: sizesMappingInput.m
      }
    },
    options: Object.values(sizesMappingInput),
    control: { type: 'select' }
  },
  disabled: {
    description: 'Условие блокировки input для ввода/изменений',
    table: {
      defaultValue: {
        summary: 'false'
      },
      type: {
        summary: 'boolean'
      }
    },
    control: { type: 'boolean' }
  },
  color: {
    description: 'Цвет компонента, отображающий разные состояния',
    table: {
      defaultValue: {
        summary: customInputColors.default
      }
    },
    options: Object.values(customInputColors),
    control: { type: 'select' }
  },
  multiline: {
    description: 'Свойство, позволяющее сделать компонент многострочным (как TextArea)',
    table: {
      defaultValue: {
        summary: 'false'
      },
      type: {
        summary: 'boolean'
      }
    },
    control: { type: 'boolean' }
  },
  resize: {
    description:
      'Свойство, позволяющее изменять размер многострочного компонента (TextArea). Работает только со свойством multiline.',
    table: {
      defaultValue: {
        summary: 'false'
      },
      type: {
        summary: 'boolean'
      }
    },
    control: { type: 'boolean' }
  },
  id: {
    description: 'Идентификатор компонента',
    control: { type: 'text' }
  },
  colored: {
    description: 'Свойство, позволяющее изменить цвет фона инпута на светло-желтый',
    table: {
      defaultValue: {
        summary: 'false'
      },
      type: {
        summary: 'boolean'
      }
    },
    control: { type: 'boolean' }
  },
  inputRef: {
    description: 'Ref для доступа к DOM-элементу инпута',
    table: {
      type: {
        summary: 'Ref<HTMLInputElement | HTMLTextAreaElement>'
      }
    }
  },
  name: {
    description: 'Имя инпута, используется для идентификации в формах',
    control: { type: 'text' }
  },
  label: {
    description: 'Текст метки (label) инпута',
    control: { type: 'text' }
  },
  className: {
    description: 'Дополнительный CSS класс для обертки инпута',
    control: { type: 'text' }
  },
  pseudo: {
    description: 'Свойство, позволяющее отображать компонент как PseudoInput (не редактируемое поле)',
    table: {
      defaultValue: {
        summary: 'false'
      },
      type: {
        summary: 'boolean'
      }
    },
    control: { type: 'boolean' }
  }
};

export default argsTypes;
"
Codes for component Input index.tsx,"import React, { FC, Ref, useMemo, useRef } from 'react';

import { customInputColors, generateUUID, sizesMappingInput } from '@components/declaration';
import { Icon, PseudoInput, Typography } from '@components/index';
import clsx from 'clsx';

import { TInputProps } from './types';

import styles from './Input.module.scss';

/**
 * Компонент Input для создания текстовых полей ввода различных стилей и размеров.
 * @component
 * @param {Object} props - Свойства компонента Input.
 * @param {string} [props.id] - Уникальный идентификатор инпута.
 * @param {string} [props.value] - Значение инпута.
 * @param {boolean} [props.disabled=false] - Флаг отключения инпута.
 * @param {string} [props.label] - Текст метки (label) инпута.
 * @param {boolean} [props.pseudo=false] - Флаг псевдо-инпута.
 * @param {ReactNode} [props.icon] - Иконка инпута.
 * @param {boolean} [props.multiline=false] - Флаг многострочного режима.
 * @param {boolean} [props.resize=false] - Флаг возможности изменения размера (для textarea).
 * @param {ReactNode} [props.helperText] - Вспомогательный текст.
 * @param {sizesMappingInput} [props.size=sizesMappingInput.m] - Размер инпута.
 * @param {boolean} [props.reset=false] - Флаг наличия кнопки сброса.
 * @param {function} [props.onChange] - Обработчик изменения значения.
 * @param {function} [props.onReset] - Обработчик сброса значения.
 * @param {function} [props.onBlur] - Обработчик потери фокуса.
 * @param {customInputColors} [props.color=customInputColors.default] - Цвет инпута.
 * @param {string} [props.className] - Дополнительный CSS класс.
 * @param {Ref<HTMLInputElement | HTMLTextAreaElement>} [props.inputRef] - Реф для доступа к DOM-элементу инпута.
 * @param {boolean} [props.colored=false] - Флаг цветного фона.
 * @returns {JSX.Element} Компонент Input.
 */
const Input: FC<TInputProps> = ({
  id,
  value,
  disabled = false,
  label,
  pseudo = false,
  icon,
  multiline = false,
  resize = false,
  helperText,
  size = sizesMappingInput.m,
  reset = false,
  onChange,
  onReset,
  onBlur,
  color = customInputColors.default,
  className,
  inputRef,
  colored = false,
  ...props
}) => {
  const ref = inputRef || useRef<HTMLInputElement | HTMLTextAreaElement>(null);
  id = useMemo(() => `Input-${(id && id.toString()) || generateUUID()}`, [id]);

  const sizeStyles = {
    [sizesMappingInput.m]: styles['text-field'],
    [sizesMappingInput.s]: clsx(styles['text-field'], styles.compact),
    [sizesMappingInput.xs]: clsx(styles['text-field'], styles['extra-compact'])
  };

  if (pseudo) {
    return (
      <PseudoInput
        label={label as string}
        size={size === sizesMappingInput.s ? sizesMappingInput.s : sizesMappingInput.m}
        labelColor={color}
      >
        {value}
      </PseudoInput>
    );
  }

  const colorClassName = styles[color];
  const isResetIconVisible = reset && onReset && value && value.length > 0 && !disabled && !multiline;
  const isCustomIconVisible = icon && !multiline;

  return (
    <div className={clsx(styles['input-wrapper'], colored && styles.colored, className)}>
      {multiline ? (
        <textarea
          ref={ref as Ref<HTMLTextAreaElement>}
          id={id}
          className={clsx(
            styles['text-field'],
            styles.textarea,
            resize && styles.resize,
            colorClassName,
            disabled && styles['disabled-input'],
            colored && styles.colored
          )}
          disabled={disabled}
          placeholder="" ""
          value={value}
          onChange={onChange}
          onBlur={onBlur}
          {...props}
        />
      ) : (
        <input
          ref={ref as Ref<HTMLInputElement>}
          id={id}
          className={clsx(
            sizeStyles[size],
            icon && styles['input-with-icon'],
            colorClassName,
            colored && styles.colored,
            disabled && styles['disabled-input']
          )}
          disabled={disabled}
          type=""text""
          placeholder="" ""
          value={value}
          onChange={onChange}
          onBlur={onBlur}
          {...props}
        />
      )}
      {label && (
        <label className={clsx(styles.label, colorClassName)} htmlFor={id}>
          <Typography variant=""Body1-Medium"" className={styles.typography}>
            {label}
          </Typography>
        </label>
      )}
      {isResetIconVisible && (
        <div
          className={clsx(styles.icon, styles.reset, icon && styles['reset-with-icon'], colorClassName)}
          data-testid=""CLOSE_ICON""
          onClick={onReset}
        >
          {<Icon htmlColor=""var(--steel-70)"" containerSize={24} name=""IconCloseOutlined24"" />}
        </div>
      )}
      {isCustomIconVisible && (
        <div className={clsx(styles.icon, styles['icon-text'], disabled && styles.disabled, colorClassName)}>
          {icon}
        </div>
      )}
      {helperText && (
        <Typography
          variant=""Caption-Medium""
          id={`${id}-helper-text`}
          className={clsx(styles['helper-text'], colorClassName)}
        >
          {helperText}
        </Typography>
      )}
    </div>
  );
};

export default Input;
"
Codes for component Input _stories Stories.tsx,"import React, { useState } from 'react';

import Editor from '@components/_storybook/Stories/components/Editor';
// import FigmaEmbed from '@components/_storybook/Stories/components/FigmaEmbed';
import Header from '@components/_storybook/Stories/components/Header';
import Properties from '@components/_storybook/Stories/components/Properties';
import Tests from '@components/_storybook/Stories/components/Tests';
import { Tabs } from '@components/index';

import styles from '@components/_storybook/Stories/Stories.module.scss';

import argsTypes from './argsTypes';

const InputStories = (): JSX.Element => {
  const [activeTab, setActiveTab] = useState(0);

  const inputDefaultCode = `import { Input } from '@nlmk/ds-2.0';

export default App = () => (
  <>
    <Input />
  </>
);
`;

  const inputWithLabelCode = `import { Input } from '@nlmk/ds-2.0';

export default App = () => (
  <>
    <Input label=""Label"" />
  </>
);
`;

  const inputWithHelperCode = `import { Input } from '@nlmk/ds-2.0';

export default App = () => (
  <>
    <Input label=""Label"" helperText=""Helper text"" />
  </>
);
`;

  const inputDisabledCode = `import { Input } from '@nlmk/ds-2.0';

export default App = () => (
  <>
    <Input disabled value=""Disabled Input"" />
  </>
);
`;

  const inputErrorCode = `import { Input } from '@nlmk/ds-2.0';

export default App = () => (
  <>
    <Input color=""error"" helperText=""Error message"" />
  </>
);
`;

  const inputWarningCode = `import { Input } from '@nlmk/ds-2.0';

export default App = () => (
  <>
    <Input color=""warning"" helperText=""Warning message"" />
  </>
);
`;

  const inputSuccessCode = `import { Input } from '@nlmk/ds-2.0';

export default App = () => (
  <>
    <Input color=""success"" helperText=""Success message"" />
  </>
);
`;

  const inputTextareaCode = `import { Input } from '@nlmk/ds-2.0';

export default App = () => (
  <>
    <Input multiline />
  </>
);
`;

  const inputTextareaResizeCode = `import { Input } from '@nlmk/ds-2.0';

export default App = () => (
  <>
    <Input multiline resize />
  </>
);
`;

  const inputWithPseudoCode = `import { useState, SetStateAction } from 'react';
import { Input, Button } from '@nlmk/ds-2.0';

const App = () => {
    const [isPseudo, setIsPseudo] = useState(false);
    const [innerValue, setInnerValue] = useState('value');

    const handleChange = (e: { target: { value: SetStateAction<string> } }) => {
        setInnerValue(e.target.value);
    };

    return (
        <>
            <div style={{display: 'flex', flexDirection: 'column'}}>
                <Input pseudo={isPseudo} value={innerValue} label='Label' onChange={handleChange} />
                <Button onClick={() => setIsPseudo(!isPseudo)} style={{ marginTop: '10px' }}>
                    Переключить
                </Button>
            </div>
        </>
    );
};

export default App;
`;

  return (
    <div className={styles.wrapper}>
      <Header
        title=""Input""
        description=""Компонент Input позволяет пользователям вводить текстовую информацию. Он поддерживает различные варианты, включая лейблы, иконки, многострочный ввод и различные стили.""
        isStable
        codeLink=""https://github.com/nlmk-group/ds-2.0/tree/main/src/components/Input""
        figmaLink=""https://www.figma.com/file/MSMqfqJrQNaqbLe4Ctkq7n/Design-System-2.0-NLMK-(beta)-(Community)?type=design&node-id=1036%3A20850&mode=design&t=awyt3Fzj1XS6th7v-1""
      />

      <div className={styles.tabs}>
        <Tabs>
          <Tabs.Tab label=""Разработчику"" active={0 === Number(activeTab)} onClick={() => setActiveTab(0)} />
          {/* <Tabs.Tab label=""Дизайнеру"" active={1 === Number(activeTab)} onClick={() => setActiveTab(1)} /> */}
          <Tabs.Tab label=""Тестирование"" active={2 === Number(activeTab)} onClick={() => setActiveTab(2)} />
        </Tabs>
      </div>

      {Number(activeTab) === 0 && (
        <>
          <Editor height={200} description=""Input по умолчанию"" code={inputDefaultCode} />

          <Editor height={200} description=""Input с лейблом"" code={inputWithLabelCode} />

          <Editor height={200} description=""Input с лейблом и вспомогательным текстом"" code={inputWithHelperCode} />

          <Editor height={200} description=""Input в состоянии disabled"" code={inputDisabledCode} />

          <Editor height={200} description=""Input в состоянии error"" code={inputErrorCode} />

          <Editor height={200} description=""Input в состоянии warning"" code={inputWarningCode} />

          <Editor height={200} description=""Input в состоянии success"" code={inputSuccessCode} />

          <Editor height={200} description=""Textarea по умолчанию"" code={inputTextareaCode} />

          <Editor height={200} description=""Textarea со свойством ресайз"" code={inputTextareaResizeCode} />

          <Editor
            height={350}
            description=""Возможно реализовать переключение компонента Input в PseudoInput с помощью пропса pseudo""
            code={inputWithPseudoCode}
          />

          <Properties argsTypes={argsTypes} />
        </>
      )}

      {/*{Number(activeTab) === 1 && (*/}
      {/*  <FigmaEmbed url=""https://www.figma.com/file/MSMqfqJrQNaqbLe4Ctkq7n/Design-System-2.0-NLMK-(beta)-(Community)?type=design&node-id=1036%3A20850&mode=design&t=awyt3Fzj1XS6th7v-1"" />*/}
      {/*)}*/}
      {Number(activeTab) === 2 && <Tests componentName=""Input"" />}
    </div>
  );
};

export default InputStories;
"
Types for component Input types.ts,"// types.ts
import { ChangeEventHandler, ComponentPropsWithoutRef, ReactNode, Ref } from 'react';

import { customInputColors, sizesMappingInput } from '@components/declaration';

export interface IInputAdditionalProps {
  /** Уникальный идентификатор инпута */
  id?: string;
  /** Значение инпута */
  value?: string;
  /** Флаг отключения инпута */
  disabled?: boolean;
  /** Текст метки (label) инпута */
  label?: string;
  /** Имя инпута */
  name?: string;
  /** Флаг многострочного режима */
  multiline?: boolean;
  /** Флаг псевдо-инпута */
  pseudo?: boolean;
  /** Иконка инпута */
  icon?: ReactNode;
  /** Вспомогательный текст */
  helperText?: ReactNode;
  /** Флаг возможности изменения размера (для textarea) */
  resize?: boolean;
  /** Флаг наличия кнопки сброса */
  reset?: boolean;
  /** Обработчик сброса значения */
  onReset?: () => void;
  /** Обработчик изменения значения */
  onChange?: ChangeEventHandler<HTMLInputElement | HTMLTextAreaElement>;
  /** Обработчик потери фокуса */
  onBlur?: ChangeEventHandler<HTMLInputElement | HTMLTextAreaElement>;
  /** Размер инпута */
  size?: `${sizesMappingInput}`;
  /** Цвет инпута */
  color?: customInputColors;
  /** Флаг цветного фона */
  colored?: boolean;
}

export type TInputProps = IInputAdditionalProps &
  Omit<ComponentPropsWithoutRef<'input'>, 'size'> &
  Omit<ComponentPropsWithoutRef<'textarea'>, 'size'> & {
    /** Реф для доступа к DOM-элементу инпута */
    inputRef?: Ref<HTMLInputElement | HTMLTextAreaElement>;
  };
"
Styles for component Input Input.module.scss,"@mixin input-color-states {
  &.error {
    color: var(--spectrum-red-60);
  }

  &.warning {
    color: var(--spectrum-yellow-60);
  }

  &.success {
    color: var(--spectrum-green-60);
  }
}

@mixin input-border-color-states {
  &.error {
    border-color: var(--spectrum-red-60);
    background-color: var(--steel-10);
  }

  &.warning {
    border-color: var(--spectrum-yellow-60);
    background-color: var(--steel-10);
  }

  &.success {
    border-color: var(--spectrum-green-60);
    background-color: var(--steel-10);
  }
}

@mixin font-styles {
  font-size: var(--body1-medium-16-fontSize);
  font-weight: var(--body1-medium-16-fontWeight);
  line-height: var(--body1-medium-16-lineHeight);
  letter-spacing: var(--body1-medium-16-letterSpacing);
  text-decoration: var(--body1-medium-16-textDecoration);
}

.input-wrapper {
  font-family: var(--font-families-pt-root-ui);
  position: relative;

  &:hover {
    .text-field:not(:disabled):not(:focus) {
      border-color: var(--steel-80);
      @include input-border-color-states;
    }
  }

  // Стили для ""плавающего"" лейбла
  input:focus ~ label,
  textarea:focus ~ label,
  input:not(:placeholder-shown):not(:focus) ~ label,
  textarea:not(:placeholder-shown):not(:focus) ~ label {
    top: -6px;
    left: 12px;
    line-height: 11px;
    padding: 0 4px;
    // Создаем эффект ""разрыва"" границы инпута для лейбла
    background: linear-gradient(to top, var(--steel-10) 50%, transparent 50%);
  }

  // Стили для лейбла при colored=true
  &.colored {
    input:focus ~ label,
    textarea:focus ~ label,
    input:not(:placeholder-shown):not(:focus) ~ label,
    textarea:not(:placeholder-shown):not(:focus) ~ label {
      background: linear-gradient(to top, var(--spectrum-yellow-10) 50%, transparent 50%);
    }
  }

  // Стили для лейбла в фокусе
  input:focus ~ label,
  textarea:focus ~ label {
    color: var(--brand-sapphire-60);
    @include input-color-states;
  }

  // Стили для лейбла при отключенном инпуте
  input:not(:placeholder-shown):not(:focus):disabled ~ label,
  textarea:not(:placeholder-shown):not(:focus):disabled ~ label {
    background: linear-gradient(to top, var(--steel-30) 50%, transparent 50%);
  }

  // Скрываем плейсхолдер, когда инпут не пустой
  input:not(:placeholder-shown),
  textarea:not(:placeholder-shown),
  input:not(:focus),
  textarea:not(:focus) {
    &::placeholder {
      visibility: hidden;
    }
  }
}

.text-field {
  width: 100%;
  height: 40px;
  color: var(--steel-90);
  box-sizing: border-box;
  font-family: inherit;
  @include font-styles;
  border-radius: 4px;
  z-index: 2;
  border: 1px solid var(--steel-50);
  outline: none;
  background: var(--steel-10);
  font-variant-numeric: tabular-nums lining-nums;
  padding: 0 16px;
  @include input-border-color-states;

  &::placeholder {
    @include font-styles;
    color: var(--steel-70);
  }

  &.input-with-icon {
    padding-right: 36px;
  }

  &.compact {
    height: 32px;

    ~ label {
      padding: 5px 16px;
    }

    ~ .icon {
      height: 24px;
    }
  }

  &.extra-compact {
    height: 28px;

    ~ label {
      padding: 4px 16px;
    }

    ~ .icon {
      height: 16px;
      padding-top: 2px;
    }
  }

  &:disabled {
    border-color: var(--steel-50);
    background-color: var(--steel-30);
    -webkit-text-fill-color: var(--steel-70);
    color: var(--steel-70);
  }

  &:focus {
    border-color: var(--brand-sapphire-60);

    @include input-border-color-states;
  }
}

.textarea {
  min-height: 80px;
  display: inline-block;
  overflow: auto;
  resize: none;
  padding: 8px 16px;

  &.resize {
    resize: both;
  }

  ::-webkit-resizer {
    display: none;
  }
}

.label {
  position: absolute;
  padding: 10px 16px;
  left: 0;
  color: var(--steel-70);
  cursor: text;
  transition: 100ms ease-out;

  @include input-color-states;

  .typography {
    line-height: inherit;
    margin: 0;
  }
}

.icon {
  position: absolute;
  top: 4px;
  height: 32px;
  display: flex;
  align-items: center;
  justify-content: center;
  color: var(--brand-sapphire-60);
  background: transparent;
  @include input-color-states;
}

.reset {
  cursor: pointer;
  pointer-events: auto;
  right: 8px;

  &-with-icon {
    right: 48px;
  }
}

.icon-text {
  right: 8px;
}

.helper-text {
  display: flex;
  margin: 0;
  padding-top: 4px;
  padding-left: 16px;
  color: var(--steel-70);
  @include input-color-states;
}

.disabled {
  color: var(--steel-70);
  background-color: var(--steel-30);
  cursor: default;

  &-input {
    pointer-events: none !important;
  }
}

.colored {
  &.text-field,
  &.textarea {
    background-color: var(--spectrum-yellow-10) !important;
  }
}
"
Codes for component InputRange _stories Stories.tsx,"import React, { useState } from 'react';

import Editor from '@components/_storybook/Stories/components/Editor';
import FigmaEmbed from '@components/_storybook/Stories/components/FigmaEmbed';
import Header from '@components/_storybook/Stories/components/Header';
import Properties from '@components/_storybook/Stories/components/Properties';
import Tests from '@components/_storybook/Stories/components/Tests';
import '@components/_storybook/Stories/styles.css';
import { Tabs } from '@components/index';

import styles from '@components/_storybook/Stories/Stories.module.scss';

import argsTypes from './argsTypes';

const Stories = (): JSX.Element => {
  const [activeTab, setActiveTab] = useState(0);

  return (
    <div className={styles.wrapper}>
      <Header
        title=""InputRange""
        description=""Компонент InputRange отражает диапазон значений вдоль полосы, из которой пользователи могут выбрать диапазон
        значений. Компонент подходит для настройки таких параметров, как громкость, яркость или применение фильтров
        изображения.""
        isStable
        codeLink=""https://github.com/nlmk-group/ds-2.0/tree/main/src/components/InputRange""
        figmaLink=""https://www.figma.com/file/MSMqfqJrQNaqbLe4Ctkq7n/Design-System-2.0-NLMK-(beta)-(Community)?type=design&node-id=1036%3A20851&mode=design&t=awyt3Fzj1XS6th7v-1""
      />

      <div className={styles.tabs}>
        <Tabs>
          <Tabs.Tab label=""Разработчику"" active={0 === Number(activeTab)} onClick={() => setActiveTab(0)} />
          {/* <Tabs.Tab label=""Дизайнеру"" active={1 === Number(activeTab)} onClick={() => setActiveTab(1)} /> */}
          <Tabs.Tab label=""Тестирование"" active={2 === Number(activeTab)} onClick={() => setActiveTab(2)} />
        </Tabs>
      </div>

      {Number(activeTab) == 0 && (
        <>
          <Editor
            description=""Компонент InputRange представляет собой отрезок с min/max величинами.""
            code={`import { InputRange } from '@nlmk/ds-2.0';
import { useState } from 'react'

export default  App = () => {
  const [value, setInputRangeValue] = useState({ min: 20, max: 80 });

  const handleValuesChange = (newValues: { min: number; max: number }) => {
    setInputRangeValue(newValues);
  };

  return (
    <div style={{ width: '500px', padding: '30px 12px' }}>
      <InputRange
        min={0}
        max={100}
        step={1}
        value={value}
        onChange={handleValuesChange}
      />
    </div>
  );
}`}
          />

          <Editor
            description=""Компонент не доступен для ввода/изменения.""
            code={`import { InputRange } from '@nlmk/ds-2.0';
import { useState } from 'react'

export default  App = () => {
  const [value, setInputRangeValue] = useState({ min: 20, max: 80 });

  const handleValuesChange = (newValues: { min: number; max: number }) => {
    setInputRangeValue(newValues);
  };

  return (
    <div style={{ width: '500px', padding: '30px 12px' }}>
      <InputRange
        min={0}
        max={100}
        step={1}
        value={value}
        disabled
        onChange={handleValuesChange}
      />
    </div>
  );
}
`}
          />

          <Properties argsTypes={argsTypes} />
        </>
      )}
      {Number(activeTab) == 1 && (
        <FigmaEmbed url=""https://www.figma.com/file/MSMqfqJrQNaqbLe4Ctkq7n/Design-System-2.0-NLMK-(beta)-(Community)?type=design&node-id=1036%3A20851&mode=design&t=awyt3Fzj1XS6th7v-1"" />
      )}
      {Number(activeTab) == 2 && <Tests componentName=""InputRange"" />}
    </div>
  );
};

export default Stories;
"
Codes for component InputRange index.tsx,"import React, { ChangeEvent, FC, useEffect, useState } from 'react';

import { Slider } from '@components/Slider';

import { IInputRangeProps } from './types';

const InputRange: FC<IInputRangeProps> = ({ min, max, step = 1, value, onChange, disabled = false }) => {
  const [minValue, setMinValue] = useState(value ? value.min : min);
  const [maxValue, setMaxValue] = useState(value ? value.max : max);
  const [leftControlHover, setLeftControlHover] = useState(false);
  const [rightControlHover, setRightControlHover] = useState(false);

  useEffect(() => {
    if (value) {
      setMinValue(value.min);
      setMaxValue(value.max);
    }
  }, [value]);

  const handleMinRangeChange = (e: ChangeEvent<HTMLInputElement>) => {
    e.preventDefault();
    const newMinValue = Math.min(+e.target.value, maxValue - step);
    if (onChange) {
      onChange({ min: newMinValue, max: maxValue });
    } else {
      setMinValue(newMinValue);
    }
  };

  const handleMaxRangeChange = (e: ChangeEvent<HTMLInputElement>) => {
    e.preventDefault();
    const newMaxValue = Math.max(+e.target.value, minValue + step);
    if (onChange) {
      onChange({ min: minValue, max: newMaxValue });
    } else {
      setMaxValue(newMaxValue);
    }
  };

  const rangePos = (value: number) => ((value - min) / (max - min)) * 100;
  const minRangePos = rangePos(minValue);
  const maxRangePos = rangePos(maxValue);

  return (
    <Slider.Wrapper>
      <Slider.InputWrapper>
        <Slider.Input
          value={minValue}
          min={min}
          max={max}
          step={step}
          onChange={handleMinRangeChange}
          disabled={disabled}
          setHover={setLeftControlHover}
        />
        <Slider.Input
          value={maxValue}
          min={min}
          max={max}
          step={step}
          onChange={handleMaxRangeChange}
          disabled={disabled}
          setHover={setRightControlHover}
        />
      </Slider.InputWrapper>
      <Slider.ControlWrapper>
        <Slider.Control position={minRangePos} value={value.min} disabled={disabled} hover={leftControlHover}/>
        <Slider.Rail maxPosition={maxRangePos} minPosition={minRangePos} disabled={disabled} />
        <Slider.Control position={maxRangePos} value={value.max} disabled={disabled} hover={rightControlHover}/>
      </Slider.ControlWrapper>
    </Slider.Wrapper>
  );
};

export default InputRange;
"
Types for component InputRange types.ts,"export interface IInputRangeProps {
  min: number;
  max: number;
  step?: number;
  value: { min: number; max: number };
  onChange?: (value: { min: number; max: number }) => void;
  disabled?: boolean;
}
"
Types for component InputRange _stories argsTypes.ts,"export const argsTypes = {
  onChange: {
    description: 'Callback, который будет вызван при изменении значения внутри компонента InputRange',
    action: 'изменено value'
  },
  value: {
    description: 'Значения компонента InputRange'
  },
  step: {
    description: 'Шаг изменения значения в компоненте InputRange',
    table: {
      defaultValue: {
        summary: 1
      },
      type: {
        summary: 'number'
      }
    },
    control: { type: 'number' }
  },
  min: {
    description: 'Минимальное значение компонента InputRange',
    control: { type: 'number' }
  },
  max: {
    description: 'Максимальное значение компонента InputRange',
    control: { type: 'number' }
  },
  disabled: {
    description: 'Условие блокировки input для ввода/изменений',
    table: {
      defaultValue: {
        summary: 'false'
      },
      type: {
        summary: 'boolean'
      }
    },
    control: { type: 'boolean' }
  }
};

export default argsTypes;
"
Types for component InputSlider _stories argsTypes.ts,"export const argsTypes = {
  onChange: {
    description: 'Callback, который будет вызван при изменении значения внутри компонента InputSlider',
    action: 'изменено value'
  },
  value: {
    description: 'Значения компонента InputSlider'
  },
  step: {
    description: 'Шаг изменения значения в компоненте InputSlider',
    table: {
      defaultValue: {
        summary: 1
      },
      type: {
        summary: 'number'
      }
    },
    control: { type: 'number' }
  },
  min: {
    description: 'Минимальное значение компонента InputSlider',
    control: { type: 'number' }
  },
  max: {
    description: 'Максимальное значение компонента InputSlider',
    control: { type: 'number' }
  },
  disabled: {
    description: 'Условие блокировки input для ввода/изменений',
    table: {
      defaultValue: {
        summary: 'false'
      },
      type: {
        summary: 'boolean'
      }
    },
    control: { type: 'boolean' }
  }
};
"
Codes for component InputSlider _stories Stories.tsx,"import React, { useState } from 'react';

import Editor from '@components/_storybook/Stories/components/Editor';
import FigmaEmbed from '@components/_storybook/Stories/components/FigmaEmbed';
import Header from '@components/_storybook/Stories/components/Header';
import Properties from '@components/_storybook/Stories/components/Properties';
import Tests from '@components/_storybook/Stories/components/Tests';
import { Tabs } from '@components/index';

import styles from '@components/_storybook/Stories/Stories.module.scss';

import { argsTypes } from './argsTypes';

const InputSliderStories = (): JSX.Element => {
  const [activeTab, setActiveTab] = useState(0);

  const sliderDefaultCode = `import { useState } from 'react';
import { InputSlider, Chip } from '@nlmk/ds-2.0';

const App = () => {
    const [value, setValue] = useState(20);

    const handleChange = (newValue) => {
      setValue(newValue);
    };

    return (
        <div style={{width: '400px', marginTop: '50px'}}>
            <InputSlider
                min={0}
                max={100}
                step={1}
                value={value}
                onChange={handleChange}
            />
            <Chip>{value}</Chip>
        </div>
    );
  };

export default App;
`;

  const sliderDisabledCode = `import { useState } from 'react';

import { InputSlider } from '@nlmk/ds-2.0';

const App = () => {
    const [value, setValue] = useState(500);

    const handleChange = (newValue) => {
      setValue(newValue);
    };

    return (
        <div style={{width: '400px', marginTop: '50px'}}>
            <InputSlider
                min={100}
                max={1000}
                step={10}
                value={value}
                onChange={handleChange}
                disabled
            />
        </div>
    );
  };

export default App;
`;

  return (
    <div className={styles.wrapper}>
      <Header
        title=""InputSlider""
        description=""InputSlider представляет собой слайдер для ввода числовых значений, который позволяет пользователю выбирать значение в заданном диапазоне.""
        isStable
        codeLink=""https://github.com/nlmk-group/ds-2.0/tree/main/src/components/InputSlider""
        figmaLink=""https://www.figma.com/file/MSMqfqJrQNaqbLe4Ctkq7n/Design-System-2.0-NLMK-(beta)-(Community)?type=design&node-id=1036%3A20852&mode=design&t=awyt3Fzj1XS6th7v-1""
      />

      <div className={styles.tabs}>
        <Tabs>
          <Tabs.Tab label=""Разработчику"" active={0 === Number(activeTab)} onClick={() => setActiveTab(0)} />
          {/* <Tabs.Tab label=""Дизайнеру"" active={1 === Number(activeTab)} onClick={() => setActiveTab(1)} /> */}
          <Tabs.Tab label=""Тестирование"" active={2 === Number(activeTab)} onClick={() => setActiveTab(2)} />
        </Tabs>
      </div>

      {Number(activeTab) === 0 && (
        <>
          <Editor
            height={350}
            description=""InputSlider по умолчанию. Позволяет пользователю выбирать значение от 0 до 100.""
            code={sliderDefaultCode}
          />
          <Editor
            height={350}
            description=""Неактивный InputSlider. Слайдер установлен в состояние 'disabled', что предотвращает взаимодействие пользователя.""
            code={sliderDisabledCode}
          />
          <Properties argsTypes={argsTypes} />
        </>
      )}
      {Number(activeTab) === 1 && (
        <FigmaEmbed url=""https://www.figma.com/file/MSMqfqJrQNaqbLe4Ctkq7n/Design-System-2.0-NLMK-(beta)-(Community)?type=design&node-id=1036%3A20852&mode=design&t=awyt3Fzj1XS6th7v-1"" />
      )}
      {Number(activeTab) === 2 && <Tests componentName=""InputSlider"" />}
    </div>
  );
};

export default InputSliderStories;
"
Types for component InputSlider types.ts,"export interface IInputSliderProps {
  min: number;
  max: number;
  step?: number;
  value: number;
  onChange?: (value: number) => void;
  disabled?: boolean;
}
"
Codes for component InputSlider index.tsx,"import React, { ChangeEvent, FC, useEffect, useState } from 'react';

import { Slider } from '@components/Slider';

import { IInputSliderProps } from './types';

const InputSlider: FC<IInputSliderProps> = ({ min, max, step = 1, value: outerValue, onChange, disabled = false }) => {
  const [value, setValue] = useState(outerValue ?? min);
  const [controlHover, setControlHover] = useState(false);

  useEffect(() => {
    if (outerValue !== undefined) setValue(outerValue);
  }, [outerValue]);

  const handleChange = (e: ChangeEvent<HTMLInputElement>) => {
    e.preventDefault();
    const newMaxValue = +e.target.value;
    if (onChange) {
      onChange(newMaxValue);
    } else {
      setValue(newMaxValue);
    }
  };

  const getRangePos = (value: number) => ((value - min) / (max - min)) * 100;
  const rangePos = getRangePos(value);

  return (
    <Slider.Wrapper>
      <Slider.InputWrapper>
        <Slider.Input value={value} min={min} max={max} step={step} onChange={handleChange} disabled={disabled} setHover={setControlHover}/>
      </Slider.InputWrapper>
      <Slider.ControlWrapper>
        <Slider.Rail maxPosition={rangePos} minPosition={0} disabled={disabled} />
        <Slider.Control position={rangePos} value={value} disabled={disabled} hover={controlHover} />
      </Slider.ControlWrapper>
    </Slider.Wrapper>
  );
};

export default InputSlider;
"
Codes for component Link index.tsx,"import React, { FC } from 'react';

import Typography from '@components/Typography';
import { ETypographyVariants } from '@components/Typography/enums';
import { clsx } from 'clsx';

import { ILink } from './types';

import styles from './Link.module.scss';

import { sizeMapping, targetMapping } from './enums';
import { getTypography } from './helpers';

const Link: FC<ILink> = ({
  children,
  href,
  preventRedirect = false,
  target = targetMapping.parent,
  size = sizeMapping.body,
  disabled = false,
  leftIcon = null,
  rightIcon = null,
  className
}) => {
  return (
    <div data-testid=""WRAPPER"" className={clsx(styles.wrapper, disabled && styles.disabled, className)}>
      {leftIcon !== null && (
        <div data-testid=""LEFT_ICON"" className={clsx(styles['icon-wrapper'], styles[`icon-${size}`])}>
          {leftIcon}
        </div>
      )}
      <a
        data-testid=""LINK""
        href={preventRedirect ? 'javascript:void(0);' : href}
        target={target as targetMapping}
        rel=""noreferrer noopener""
        className={className}
      >
        <Typography variant={getTypography(size as sizeMapping) as ETypographyVariants}>{children}</Typography>
      </a>
      {rightIcon !== null && (
        <div data-testid=""RIGHT_ICON"" className={clsx(styles['icon-wrapper'], styles[`icon-${size}`])}>
          {rightIcon}
        </div>
      )}
    </div>
  );
};

export default Link;
"
Codes for component Link _stories Stories.tsx,"import React, { useState } from 'react';

import Editor from '@components/_storybook/Stories/components/Editor';
import FigmaEmbed from '@components/_storybook/Stories/components/FigmaEmbed';
import Header from '@components/_storybook/Stories/components/Header';
import Properties from '@components/_storybook/Stories/components/Properties';
import Tests from '@components/_storybook/Stories/components/Tests';
import { Tabs } from '@components/index';

import styles from '@components/_storybook/Stories/Stories.module.scss';

import { argsTypes } from './argsTypes';

const LinkStories = (): JSX.Element => {
  const [activeTab, setActiveTab] = useState(0);

  const linkDefaultCode = `import { Link } from '@nlmk/ds-2.0';

const App = () => (
  <Link href=""https://www.w3schools.com/"">Ссылка</Link>
);

export default App;
`;

  const linkDisabledCode = `import { Link } from '@nlmk/ds-2.0';

const App = () => (
  <Link href=""https://www.w3schools.com/""
    disabled
  >
    Заблокированная ссылка
  </Link>
);

export default App;
`;

  const linkWithIconCode = `import { Link, Icon } from '@nlmk/ds-2.0';

const App = () => (
  <Link href=""https://www.w3schools.com/""
    leftIcon={<Icon name='IconBunkerOutlined16' />}
    rightIcon={<Icon name='IconBunkerOutlined16' />
  }>
    Ссылка с иконками
  </Link>
);

export default App;
`;

  return (
    <div className={styles.wrapper}>
      <Header
        title=""Link""
        description=""Link компонент позволяет пользователям переходить по заданным ссылкам. Он поддерживает иконки, разные размеры и состояния, такие как disabled.""
        isStable
        codeLink=""https://github.com/nlmk-group/ds-2.0/tree/main/src/components/Link""
        figmaLink=""https://www.figma.com/file/MSMqfqJrQNaqbLe4Ctkq7n/Design-System-2.0-NLMK-(beta)-(Community)?type=design&node-id=1039%3A25756&mode=design&t=awyt3Fzj1XS6th7v-1""
      />

      <div className={styles.tabs}>
        <Tabs>
          <Tabs.Tab label=""Разработчику"" active={0 === Number(activeTab)} onClick={() => setActiveTab(0)} />
          {/* <Tabs.Tab label=""Дизайнеру"" active={1 === Number(activeTab)} onClick={() => setActiveTab(1)} /> */}
          <Tabs.Tab label=""Тестирование"" active={2 === Number(activeTab)} onClick={() => setActiveTab(2)} />
        </Tabs>
      </div>

      {Number(activeTab) === 0 && (
        <>
          <Editor
            height={200}
            description=""Основная ссылка. Стандартное использование компонента Link.""
            code={linkDefaultCode}
          />
          <Editor
            height={220}
            description=""Отключенная ссылка. Пользователь не может взаимодействовать с ссылкой.""
            code={linkDisabledCode}
          />
          <Editor description=""Ссылка с иконками с обеих сторон текста."" code={linkWithIconCode} />
          <Properties argsTypes={argsTypes} />
        </>
      )}

      {Number(activeTab) === 1 && (
        <FigmaEmbed url=""https://www.figma.com/file/MSMqfqJrQNaqbLe4Ctkq7n/Design-System-2.0-NLMK-(beta)-(Community)?type=design&node-id=1039%3A25756&mode=design&t=awyt3Fzj1XS6th7v-1"" />
      )}
      {Number(activeTab) === 2 && <Tests componentName=""Link"" />}
    </div>
  );
};

export default LinkStories;
"
Types for component Link helpers.ts,"import { sizeMapping } from './enums';

export const typographyMapping = {
  [sizeMapping.h1]: 'Heading1',
  [sizeMapping.h2]: 'Heading2',
  [sizeMapping.h3]: 'Heading3',
  [sizeMapping.h4]: 'Heading4',
  [sizeMapping.sub1]: 'Subheading1',
  [sizeMapping.sub2]: 'Subheading2-Medium',
  [sizeMapping.sub3]: 'Subheading3-Medium',
  [sizeMapping.body]: 'Body',
  [sizeMapping.body1]: 'Body1-Medium',
  [sizeMapping.body2]: 'Body2-Medium',
  [sizeMapping.caption]: 'Caption-Medium'
};

export const getTypography = (str: sizeMapping) => {
  return typographyMapping[str] || 'Body1';
};
"
Types for component Link _stories argsTypes.ts,"import { sizeMapping, targetMapping } from '../enums';

export const argsTypes = {
  children: {
    description: 'Содержимое внутри ссылки, например, текст.',
    control: { type: 'ReactNode' }
  },
  className: {
    description: 'Пользовательский класс для настройки стилей Link.',
    control: { type: 'string' }
  },
  href: {
    description: 'URL, на который ссылается компонент.',
    control: { type: 'string' }
  },
  preventRedirect: {
    description:
      'Необязательный атрибут. Если установлено значение true, перехода по ссылке не будет, по умолчанию false.',
    control: { type: 'boolean' }
  },
  disabled: {
    description:
      'Необязательный атрибут. Если установлено значение true, ссылка будет некликабельной, по умолчанию false.',
    control: { type: 'boolean' }
  },
  size: {
    description: 'Определяет размер текста.',
    table: {
      defaultValue: {
        summary: sizeMapping.body
      },
      type: {
        summary: 'string'
      }
    },
    options: Object.values(sizeMapping),
    control: { type: 'select' }
  },
  target: {
    description:
      'Необязательный атрибут. Определяет, как ссылка будет открываться, по умолчанию _parent. Примеры: _self, _blank, _top.',
    table: {
      defaultValue: {
        summary: targetMapping.parent
      },
      type: {
        summary: 'string'
      }
    },
    options: Object.values(targetMapping),
    control: { type: 'select' }
  },
  iconLeft: {
    description: 'Необязательное свойство. Иконка или элемент, который будет отображаться слева от текста ссылки',
    control: { type: 'boolean' }
  },
  iconRight: {
    description: 'Необязательное свойство. Иконка или элемент, который будет отображаться справа от текста ссылки.',
    control: { type: 'boolean' }
  }
};
"
Types for component Link types.ts,"import { PropsWithChildren, ReactNode } from 'react';

type TLinkOutput = string | ReactNode;

export interface ILink
  extends PropsWithChildren<{
    children: TLinkOutput;
  }> {
  href: string;
  preventRedirect?: boolean;
  className?: string;
  size?: string;
  target?: string;
  disabled?: boolean;
  leftIcon?: JSX.Element | ReactNode;
  rightIcon?: JSX.Element | ReactNode;
}
"
Styles for component Link Link.module.scss,"@mixin transition-effect {
  transition: all 0.3s ease-in-out;
}

@mixin icon-size($size) {
  > div {
    height: var(--#{$size}-size);
    width: var(--#{$size}-size);
    > svg {
      height: var(--#{$size}-size);
      width: var(--#{$size}-size);
    }
  }
}

.wrapper {
  display: flex;
  gap: var(--4-space);
  cursor: pointer;
  width: fit-content;
  > a,
  path {
    @include transition-effect;
    color: var(--ac-link-default);
    text-decoration: none;
  }

  &:hover,
  &:visited,
  &:active {
    > a,
    path {
      color: var(--ac-link-hover);
      text-decoration: underline;
      fill: var(--ac-link-hover);
    }
  }

  > a {
    text-decoration-skip-ink: none;
  }

  &:hover > a,
  &:hover path {
    color: var(--ac-link-hover);
    fill: var(--ac-link-hover);
  }

  &:visited > a,
  &:visited path {
    color: var(--ac-link-active);
    fill: var(--ac-link-active);
  }

  &:active > a,
  &:active path {
    color: var(--ac-link-click);
    fill: var(--ac-link-click);
  }
}

.disabled {
  pointer-events: none;
  > a,
  path {
    color: var(--ac-link-disabled);
    fill: var(--ac-link-disabled);
    text-decoration: underline;
  }
}

.icon-wrapper {
  display: flex;
  align-items: center;
}

// Обобщение стилей для иконок с учетом размера
.icon-h1,
.icon-h2,
.icon-sub1 {
  @include icon-size(32);
}

.icon-h3,
.icon-sub2 {
  @include icon-size(24);
}

.icon-h4,
.icon-sub3,
.icon-body,
.icon-body1,
.icon-body2,
.icon-caption {
  @include icon-size(16);
}

.test-style {
  cursor: cell;
}
"
Types for component Link enums.ts,"/**
 * @type {targetMapping} targetMapping
 * @type {sizeMapping} sizeMapping
 */

export enum targetMapping {
  blank = '_blank',
  self = '_self',
  parent = '_parent',
  top = '_top'
}

export enum sizeMapping {
  h1 = 'h1',
  h2 = 'h2',
  h3 = 'h3',
  h4 = 'h4',
  sub1 = 'sub1',
  sub2 = 'sub2',
  sub3 = 'sub3',
  body = 'body',
  body1 = 'body1',
  body2 = 'body2',
  caption = 'caption'
}
"
Styles for component Modal Modal.module.scss,".backdrop {
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background-color: var(--unique-black);
  opacity: 60%;
  z-index: 1000;
}

.modalWrapper {
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  display: flex;
  align-items: center;
  justify-content: center;
  z-index: 1001;
  pointer-events: none;
}

.modalInner {
  position: relative;
}

.modal {
  border-radius: 4px;
  background: var(--steel-10);
  padding: 0 32px 32px;
  position: relative;
  overflow: hidden;
  max-width: 90%;
  max-height: 90%;
  pointer-events: auto;

  &.resizable {
    resize: both;
    overflow: auto;
  }

  &.topPadding {
    padding-top: 32px;
  }
}

.dragHandle {
  height: 32px;
  width: 100%;
  cursor: default;
  background-color: inherit;
  text-align: center;
  user-select: none;

  &.draggable {
    cursor: move;
  }
}

.modalClose {
  position: absolute;
  top: 4px;
  right: -53px;
  cursor: pointer;
  pointer-events: auto;

  &:hover {
    background: none !important;
  }
}

.no-scroll {
  overflow: hidden;
}
"
Types for component Modal types.ts,"import {ReactNode, SyntheticEvent} from 'react';

export interface IModalProps {
  isOpen: boolean;
  onClose: (e?: SyntheticEvent) => void;
  children: ReactNode;
  isDraggable?: boolean;
  isResizable?: boolean;
  onEscapeDown?: () => void;
  className?: string;
  disableBackdropClick?: boolean;
  disablePageScroll?: boolean;
}
"
Types for component Modal _stories argsTypes.ts,"export const argsTypes = {
  isOpen: {
    description: 'Определяет, открыто ли модальное окно',
    control: { type: 'boolean' },
    defaultValue: false
  },
  onClose: {
    description: 'Функция, вызываемая при закрытии модального окна',
    action: 'modalClosed'
  },
  children: {
    description: 'Содержимое модального окна',
    control: { type: 'text' }
  },
  isDraggable: {
    description: 'Указывает, можно ли перетаскивать модальное окно',
    control: { type: 'boolean' },
    defaultValue: false
  },
  isResizable: {
    description: 'Указывает, можно ли изменять размер модального окна',
    control: { type: 'boolean' },
    defaultValue: false
  },
  disableBackdropClick: {
    description: 'Указывает, можно ли закрыть модальное окно только по клику на крестик',
    control: { type: 'boolean' },
    defaultValue: false
  },
  disablePageScroll: {
    description: 'Блокирует скролл на странице при открытом модальном окне',
    control: { type: 'boolean' }
  },
  onEscapeDown: {
    description: 'Функция, вызываемая при нажатии клавиши Escape',
    action: 'escapePressed'
  },
  className: {
    description: 'Дополнительный класс для стилизации',
    control: { type: 'text' }
  }
};
"
Codes for component Modal index.tsx,"import React, { FC, SyntheticEvent, useCallback, useEffect, useRef, useState } from 'react';

import { EButtonSizes } from '@components/Button/enums';
import { Button, IconCloseOutlined24 } from '@components/index';
import clsx from 'clsx';

import { IModalProps } from './types';

import styles from './Modal.module.scss';

/**
 * Компонент Modal для отображения модального окна.
 * @component
 * @param {Object} props - Свойства компонента Modal.
 * @param {boolean} props.isOpen - Состояние открытия/закрытия модального окна.
 * @param {() => void} props.onClose - Функция для закрытия модального окна.
 * @param {ReactNode} props.children - Содержимое модального окна.
 * @param {boolean} [props.isDraggable=false] - Возможность перетаскивания модального окна.
 * @param {boolean} [props.isResizable=false] - Возможность изменения размеров модального окна.
 * @param {() => void} [props.onEscapeDown] - Функция для обработки нажатия клавиши Escape.
 * @param {string} [props.className] - Дополнительные CSS классы для модального окна.
 * @param {boolean} [props.disableBackdropClick=false] - Отключает закрытие модального окна по клику вне его области.
 * @returns {ReactElement | null} Компонент Modal.
 */

const Modal: FC<IModalProps> = ({
  children,
  isOpen,
  onClose,
  onEscapeDown,
  isDraggable = false,
  isResizable = false,
  disableBackdropClick = false,
  disablePageScroll = false,
  className
}) => {
  const modalRef = useRef<HTMLDivElement>(null);
  const dragHandleRef = useRef<HTMLDivElement>(null);
  const position = useRef({ left: 0, top: 0, dragStartX: 0, dragStartY: 0 });
  const [isDragging, setIsDragging] = useState(false);

  const handleMouseMove = useCallback(
    (e: MouseEvent) => {
      if (!isDragging) return;
      const { dragStartX, dragStartY } = position.current;
      position.current.left += e.clientX - dragStartX;
      position.current.top += e.clientY - dragStartY;
      position.current.dragStartX = e.clientX;
      position.current.dragStartY = e.clientY;
      if (modalRef.current) {
        modalRef.current.style.left = `${position.current.left}px`;
        modalRef.current.style.top = `${position.current.top}px`;
      }
    },
    [isDragging]
  );

  const handleMouseUp = useCallback(() => setIsDragging(false), []);

  const handleMouseDown = useCallback(
    (e: React.MouseEvent) => {
      if (!isDraggable || e.target !== dragHandleRef.current) return;
      setIsDragging(true);
      position.current.dragStartX = e.clientX;
      position.current.dragStartY = e.clientY;
    },
    [isDraggable]
  );

  const handleBackdropClick = (e: SyntheticEvent) => {
    if (!disableBackdropClick) {
      onClose(e);
    }
  };

  useEffect(() => {
    if (isOpen && disablePageScroll) {
      document.body.classList.add(styles['no-scroll']);
    } else {
      document.body.classList.remove(styles['no-scroll']);
    }

    return () => {
      document.body.classList.remove(styles['no-scroll']);
    };
  }, [isOpen]);

  useEffect(() => {
    if (isDraggable) {
      window.addEventListener('mousemove', handleMouseMove);
      window.addEventListener('mouseup', handleMouseUp);
    }

    const handleKeyDown = (e: KeyboardEvent) => {
      if (e.key === 'Escape') {
        if (onEscapeDown) {
          onEscapeDown();
        }
        onClose();
      }
    };
    window.addEventListener('keydown', handleKeyDown);

    return () => {
      window.removeEventListener('mousemove', handleMouseMove);
      window.removeEventListener('mouseup', handleMouseUp);
      window.removeEventListener('keydown', handleKeyDown);
    };
  }, [isDraggable, handleMouseMove, handleMouseUp, onClose, onEscapeDown]);

  if (!isOpen) return null;

  const modalClasses = clsx(
    styles.modal,
    {
      [styles.resizable]: isResizable,
      [styles.topPadding]: !isDraggable
    },
    className
  );
  const dragHandleClasses = clsx(styles.dragHandle, {
    [styles.draggable]: isDraggable
  });

  return (
    <>
      <div className={styles.backdrop} onClick={handleBackdropClick} />
      <div className={styles.modalWrapper}>
        <div className={styles.modalInner} ref={modalRef} onMouseDown={handleMouseDown}>
          <div className={modalClasses}>
            {isDraggable && <div ref={dragHandleRef} className={dragHandleClasses} />}
            {children}
          </div>
          <Button
            iconButton={<IconCloseOutlined24 htmlColor=""var(--ac-overlay-button)"" />}
            variant=""primary""
            fill=""clear""
            className={styles.modalClose}
            aria-label=""Close""
            onClick={(e) => onClose(e)}
            size={EButtonSizes.s}
          />
        </div>
      </div>
    </>
  );
};

export default Modal;
"
Codes for component Modal _stories Stories.tsx,"import React, { useState } from 'react';

import Editor from '@components/_storybook/Stories/components/Editor';
import FigmaEmbed from '@components/_storybook/Stories/components/FigmaEmbed';
import Header from '@components/_storybook/Stories/components/Header';
import Properties from '@components/_storybook/Stories/components/Properties';
import Tests from '@components/_storybook/Stories/components/Tests';
import { Tabs } from '@components/index';

import styles from '@components/_storybook/Stories/Stories.module.scss';

import { argsTypes } from './argsTypes';

const ModalStories = (): JSX.Element => {
  const [activeTab, setActiveTab] = useState(0);

  const modalDefaultCode = `import { Button, Modal, Typography }  from '@nlmk/ds-2.0';
import { useState } from 'react';

export default  App = () => {
  const [isOpen, setIsOpen] = useState(false);

  return (
      <>
        <Button onClick={() => setIsOpen(true)}>Открыть модальное окно</Button>
        <Modal
            isOpen={isOpen}
            onClose={() => {
                setIsOpen(false);
            }}
        >
            <Typography color=""var(--steel-90)"">Содержимое модального окна</Typography>
        </Modal>
      </>
  );
};
`;

  const modalDraggableCode = `import { Button, Modal, Typography }  from '@nlmk/ds-2.0';
import { useState } from 'react';

export default  App = () => {
  const [isOpen, setIsOpen] = useState(false);

  return (
      <>
        <Button onClick={() => setIsOpen(true)}>Открыть модальное окно</Button>
        <Modal
            isOpen={isOpen}
            isDraggable
            onClose={() => {
                setIsOpen(false);
            }}
        >
            <Typography color=""var(--steel-90)"">Содержимое модального окна</Typography>
        </Modal>
      </>
  );
};
`;

  const modalResizableCode = `import { Button, Modal, Typography }  from '@nlmk/ds-2.0';
import { useState } from 'react';

export default  App = () => {
  const [isOpen, setIsOpen] = useState(false);
  return (
      <>
        <Button onClick={() => setIsOpen(true)}>Открыть модальное окно</Button>
        <Modal
            isOpen={isOpen}
            isResizable
            onClose={() => {
                setIsOpen(false);
            }}
        >
            <Typography color=""var(--steel-90)"">Содержимое модального окна</Typography>
        </Modal>
      </>
  );
};
`;

  return (
    <div className={styles.wrapper}>
      <Header
        title=""Modal""
        description=""Компонент Modal обеспечивает отображение модальных окон с возможностями перетаскивания, изменения размера и обработки закрытия.""
        isStable
        codeLink=""https://github.com/nlmk-group/ds-2.0/tree/main/src/components/Modal""
        figmaLink=""https://www.figma.com/file/BU6Pd9uO1AIVa1yDqhr0hw/Drawer%2FModal-window?type=design&node-id=1-17&mode=dev""
      />

      <div className={styles.tabs}>
        <Tabs>
          <Tabs.Tab label=""Разработчику"" active={0 === Number(activeTab)} onClick={() => setActiveTab(0)} />
          {/* <Tabs.Tab label=""Дизайнеру"" active={1 === Number(activeTab)} onClick={() => setActiveTab(1)} /> */}
          <Tabs.Tab label=""Тестирование"" active={2 === Number(activeTab)} onClick={() => setActiveTab(2)} />
        </Tabs>
      </div>

      {Number(activeTab) === 0 && (
        <>
          <Editor height={350} description=""Пример базового использования модального окна."" code={modalDefaultCode} />

          <Editor
            height={350}
            description=""Пример модального окна с возможностью перетаскивания.""
            code={modalDraggableCode}
          />

          <Editor
            height={350}
            description=""Пример модального окна с возможностью изменения размера.""
            code={modalResizableCode}
          />

          <Properties argsTypes={argsTypes} />
        </>
      )}
      {Number(activeTab) === 1 && (
        <FigmaEmbed url=""https://www.figma.com/file/BU6Pd9uO1AIVa1yDqhr0hw/Drawer%2FModal-window?type=design&node-id=1-17&mode=dev"" />
      )}
      {Number(activeTab) === 2 && <Tests componentName=""Modal"" />}
    </div>
  );
};

export default ModalStories;
"
Styles for component ProgressBar ProgressBar.module.scss,".root {
  display: flex;
  align-items: center;
}

.progress {
  width: 100%;
  height: 4px;
  background-color: var(--info-lightblue-200);
  border-radius: 27px;
  box-sizing: border-box;

  &-fill {
    height: 100%;
    background-color: var(--primary-blue-600);
    border-radius: 27px;
    transition: width 0.3s ease;
  }

  &-label {
    margin-top: 12px;
    margin-bottom: 0;
    color: var(--text-grey-500);
  }

  &-percentage {
    color: var(--primary-blue-600);
    text-align: right;
    min-width: 4ch;
    padding-left: 12px;
  }
}
"
Types for component ProgressBar _stories argsTypes.ts,"export const argsTypes = {
  percentage: {
    description:
      'Процент выполнения задачи или процесса, который должен быть показан в виде заполнения полосы прогресса.',
    table: {
      type: {
        summary: 'number'
      },
      defaultValue: {
        summary: 0
      }
    },
    control: {
      type: 'range',
      min: 0,
      max: 100
    }
  },
  label: {
    description: 'Текстовая метка, которая будет отображаться ниже полосы прогресса.',
    table: {
      type: {
        summary: 'string'
      },
      defaultValue: {
        summary: null
      }
    },
    control: {
      type: 'text'
    }
  }
};
"
Codes for component ProgressBar _stories Stories.tsx,"import React, { useState } from 'react';

import Editor from '@components/_storybook/Stories/components/Editor';
import FigmaEmbed from '@components/_storybook/Stories/components/FigmaEmbed';
import Header from '@components/_storybook/Stories/components/Header';
import Properties from '@components/_storybook/Stories/components/Properties';
import Tests from '@components/_storybook/Stories/components/Tests';
import { Tabs } from '@components/index';

import styles from '@components/_storybook/Stories/Stories.module.scss';

import { argsTypes } from './argsTypes';

const ProgressBarStories = (): JSX.Element => {
  const [activeTab, setActiveTab] = useState(0);

  const progressBarDefaultCode = `import { ProgressBar } from '@nlmk/ds-2.0';

export default  App = () => (
  <div style={{ width: '400px', marginTop: '50px' }}>
    <ProgressBar percentage={60} />
  </div>
);
`;

  const progressBarWithLabelCode = `import { ProgressBar } from '@nlmk/ds-2.0';

export default  App = () => (
  <div style={{ width: '400px', marginTop: '50px' }}>
    <ProgressBar percentage={50} label=""Прогресс"" />
  </div>
);
`;

  return (
    <div className={styles.wrapper}>
      <Header
        title=""ProgressBar""
        description=""ProgressBar представляет собой компонент, показывающий прогресс выполнения задачи или процесса. Он предоставляет наглядное представление о проценте выполнения.""
        isStable
        codeLink=""https://github.com/nlmk-group/ds-2.0/tree/main/src/components/ProgressBar""
        figmaLink=""https://www.figma.com/file/MSMqfqJrQNaqbLe4Ctkq7n/Design-System-2.0-NLMK-(beta)-(Community)?type=design&node-id=1039%3A25757&mode=design&t=awyt3Fzj1XS6th7v-1""
      />

      <div className={styles.tabs}>
        <Tabs>
          <Tabs.Tab label=""Разработчику"" active={0 === Number(activeTab)} onClick={() => setActiveTab(0)} />
          {/* <Tabs.Tab label=""Дизайнеру"" active={1 === Number(activeTab)} onClick={() => setActiveTab(1)} /> */}
          <Tabs.Tab label=""Тестирование"" active={2 === Number(activeTab)} onClick={() => setActiveTab(2)} />
        </Tabs>
      </div>

      {Number(activeTab) === 0 && (
        <>
          <Editor
            height={200}
            description=""Компонент ProgressBar имеет только одно обязательное свойство percentage, которое задается числом.""
            code={progressBarDefaultCode}
          />

          <Editor
            height={200}
            description=""Компоненту ProgressBar можно добавить label который будет располагаться под шкалой процента.""
            code={progressBarWithLabelCode}
          />
          <Properties argsTypes={argsTypes} />
        </>
      )}
      {Number(activeTab) === 1 && (
        <FigmaEmbed url=""https://www.figma.com/file/MSMqfqJrQNaqbLe4Ctkq7n/Design-System-2.0-NLMK-(beta)-(Community)?type=design&node-id=1039%3A25757&mode=design&t=awyt3Fzj1XS6th7v-1"" />
      )}
      {Number(activeTab) === 2 && <Tests componentName=""ProgressBar"" />}
    </div>
  );
};

export default ProgressBarStories;
"
Codes for component ProgressBar index.tsx,"import React, { FC } from 'react';

import { Typography } from '@components/index';
import { IProgressBarProps } from '@components/ProgressBar/types';
import clsx from 'clsx';

import styles from './ProgressBar.module.scss';

const ProgressBar: FC<IProgressBarProps> = ({ percentage = 0, label, className }) => {
  const validPercentage = Math.min(Math.max(percentage, 0), 100);

  if (percentage < 0) console.error(`Percentage must be a number more or equal 0`);

  return (
    <div className={clsx(styles.root, className)}>
      <div className={styles['progress']} role=""progressBar"">
        <div className={styles['progress-fill']} style={{ width: `${validPercentage}%` }} />
        {label && (
          <Typography className={styles['progress-label']} variant=""Body1-Medium"">
            {label}
          </Typography>
        )}
      </div>
      <Typography variant=""Subheading3-Medium"" className={styles['progress-percentage']}>
        {validPercentage}%
      </Typography>
    </div>
  );
};

export default ProgressBar;
"
Codes for component PseudoInput _stories Stories.tsx,"import React, { useState } from 'react';

import Editor from '@components/_storybook/Stories/components/Editor';
import FigmaEmbed from '@components/_storybook/Stories/components/FigmaEmbed';
import Header from '@components/_storybook/Stories/components/Header';
import Properties from '@components/_storybook/Stories/components/Properties';
import Tests from '@components/_storybook/Stories/components/Tests';
import '@components/_storybook/Stories/styles.css';
import { customInputColors } from '@components/declaration';
import { Tabs } from '@components/index';

import styles from '@components/_storybook/Stories/Stories.module.scss';

import { argsTypes } from './argsTypes';

enum TabIds {
  dev,
  design,
  tests
}

const COMPONENT_NAME = 'PseudoInput';
const FIGMA_URL =
  'https://www.figma.com/file/3dTe0kYNFqQO3VnjJ10jyv/Input-%CE%B2?node-id=207%3A40297&t=l4wSBLji2Mz59Nd6-0';

const Stories = (): JSX.Element => {
  const [activeTab, setActiveTab] = useState<TabIds>(TabIds.dev);

  const isActive = (tab: TabIds) => {
    return activeTab === tab;
  };

  return (
    <div className={styles.wrapper}>
      <Header
        title={COMPONENT_NAME}
        description=""PseudoInput - элемент, который позволяет отображать информацию.""
        isStable
        codeLink={`https://github.com/nlmk-group/ds-2.0/tree/main/src/components/${COMPONENT_NAME}`}
        figmaLink={FIGMA_URL}
      />

      <div className={styles.tabs}>
        <Tabs>
          <Tabs.Tab label=""Разработчику"" active={isActive(TabIds.dev)} onClick={() => setActiveTab(TabIds.dev)} />
          {/* <Tabs.Tab label=""Дизайнеру"" active={isActive(TabIds.design)} onClick={() => setActiveTab(TabIds.design)} /> */}
          <Tabs.Tab label=""Тестирование"" active={isActive(TabIds.tests)} onClick={() => setActiveTab(TabIds.tests)} />
        </Tabs>
      </div>

      {activeTab == TabIds.dev && (
        <>
          <Editor
            height={200}
            description=""PseudoInput по умолчанию. Компонент предназначен только для чтения пропсов и вывода их на экран""
            code={`import { PseudoInput } from '@nlmk/ds-2.0';

export default App = () => (
  <PseudoInput label=""Label"">
    PseudoInput
  </PseudoInput>
)
              `}
          />
          <Editor
            description=""PseudoInput разных размеров. Компонент может быть отображен с увеличенным шрифтом: дефолтное значение - s (14px размер лейбла и 16px размер внутреннего текста) и большой - m (16px и 20px). Нужный параметр необходимо передать в проп size.""
            code={`import { PseudoInput } from '@nlmk/ds-2.0';

export default App = () => (
  <>
  <PseudoInput label=""Label"" size=""m"">
    PseudoInput
  </PseudoInput>
  <PseudoInput label=""Label"" size=""s"">
    PseudoInput
  </PseudoInput>
  </>
)
              `}
          />
          <Editor
            description={`Различные состояния PseudoInput. В компонент можно передать проп labelColor со значениями: ${Object.values(
              customInputColors
            ).join(' | ')} для отображения состояний компонента`}
            code={`import { PseudoInput } from '@nlmk/ds-2.0';

export default App = () => (
  <>
  <PseudoInput label=""Label"" labelColor=""error"">
    PseudoInput
  </PseudoInput>
  <PseudoInput label=""Label"" labelColor=""warning"">
    PseudoInput
  </PseudoInput>
  <PseudoInput label=""Label"" labelColor=""success"">
    PseudoInput
  </PseudoInput>
  </>
)
              `}
          />

          <Properties argsTypes={argsTypes} />
        </>
      )}
      {activeTab == TabIds.design && <FigmaEmbed url={FIGMA_URL} />}
      {activeTab == TabIds.tests && <Tests componentName={COMPONENT_NAME} />}
    </div>
  );
};

export default Stories;
"
Codes for component PseudoInput index.tsx,"import React, { FC } from 'react';

import { customInputColors } from '@components/declaration';
import { Typography } from '@components/index';
import clsx from 'clsx';

import type { IPseudoInputProps } from './types';

import styles from './PseudoInput.module.scss';

/**
 * Компонент PseudoInput для отображения текста с меткой в стиле input.
 * @component
 * @param {Object} props - Свойства компонента PseudoInput.
 * @param {JSX.Element | string} props.label - Текст или элемент для метки PseudoInput.
 * @param {ReactNode} props.children - Содержимое PseudoInput.
 * @param {'m' | 's'} [props.size='m'] - Размер компонента PseudoInput.
 * @param {customInputColors} [props.labelColor=customInputColors.default] - Цвет метки PseudoInput.
 * @param {string} [props.className] - Дополнительный CSS класс.
 * @returns {JSX.Element} Компонент PseudoInput.
 */

const PseudoInput: FC<IPseudoInputProps> = ({
  label,
  children,
  size = 'm',
  labelColor = customInputColors.default,
  className
}) => {
  const compact = size === 's';
  const colorClassName = styles[labelColor as keyof typeof styles];

  return (
    <div className={clsx(styles.root, compact && styles.compact, className)}>
      <Typography variant=""Body2-Medium"" className={clsx(styles.label, colorClassName)}>
        {label}
      </Typography>
      <Typography variant=""Body1-Medium"" color=""var(--steel-90)"" className={styles.text}>
        {children}
      </Typography>
    </div>
  );
};

export default PseudoInput;
"
Types for component PseudoInput _stories argsTypes.ts,"import { customInputColors } from '@components/declaration';

export const argsTypes = {
  label: {
    description: 'Строка вспомогательного текста над компонентом',
    control: { type: 'text' }
  },
  children: {
    description: 'Содержимое компонента, любой JSX фрагмент или текст',
    control: { type: 'boolean' }
  },
  size: {
    description: 'Размер шрифта компонента',
    table: {
      defaultValue: {
        summary: 'm'
      },
      type: {
        summary: 'string'
      }
    },
    options: ['s', 'm'],
    control: { type: 'select' }
  },
  labelColor: {
    description: 'Цвет лейбла, отображающий разные состояния компонента',
    table: {
      defaultValue: {
        summary: customInputColors.default
      }
    },
    options: Object.values(customInputColors),
    control: { type: 'select' }
  }
};
"
Styles for component PseudoInput PseudoInput.module.scss,".root {
  height: 40px;
  position: relative;
  width: 100%;

  &.compact {
    height: 32px;
  }
}

.label {
  position: absolute;
  top: -8px;
  color: var(--steel-70);

  .compact & {
    top: -9px;
  }

  &.error {
    color: var(--spectrum-red-60);
  }

  &.warning {
    color: var(--spectrum-yellow-60);
  }

  &.success {
    color: var(--spectrum-green-60);
  }
}

.text {
  position: absolute;
  top: 9px;

  .compact & {
    top: 5px;
  }
}
"
Codes for component Radio index.tsx,"import React, { FC, useId } from 'react';

import { Typography } from '@components/index';
import clsx from 'clsx';

import { IRadioProps } from './types';

import styles from './Radio.module.scss';

/**
 * Компонент Radio для создания радио-кнопки.
 * @component
 * @param {Object} props - Свойства компонента Radio.
 * @param {string} [props.value] - Значение радио-кнопки.
 * @param {boolean} [props.checked] - Флаг, указывающий, выбрана ли радио-кнопка.
 * @param {boolean} [props.disabled] - Флаг, указывающий, отключена ли радио-кнопка.
 * @param {function} [props.onChange] - Функция обработки изменения состояния радио-кнопки.
 * @param {string} [props.className] - Дополнительный CSS класс.
 * @param {string} [props.label=''] - Текст метки радио-кнопки.
 * @returns {JSX.Element} Компонент Radio.
 */

export const Radio: FC<IRadioProps> = ({ checked, disabled, value, onChange, className, label = '' }) => {
  const radioID = useId();
  return (
    <div className={clsx(styles.radio, className)}>
      <input
        type=""radio""
        disabled={disabled}
        checked={onChange ? checked : undefined}
        defaultChecked={!onChange ? checked : undefined}
        value={value}
        onChange={onChange}
        name={radioID}
        id={radioID}
      />
      {label.length > 0 && (
        <label
          data-testid=""radio-label""
          className={clsx(styles.label, disabled && styles['label-disabled'])}
          htmlFor={radioID}
        >
          <Typography variant=""Body1-Medium"" color=""var(--steel-90)"">
            {label}
          </Typography>
        </label>
      )}
    </div>
  );
};

export default Radio;
"
Types for component Radio _stories argsTypes.ts,"export const argsTypes = {
  disabled: {
    description: 'Условие блокировки доступа к компоненту',
    table: {
      defaultValue: {
        summary: 'false'
      },
      type: {
        summary: 'boolean'
      }
    },
    control: { type: 'boolean' }
  },
  value: {
    description: 'Значение для однозначной идентификации какой из компонентов Radio был выбран пользователем',
    table: {
      defaultValue: {
        summary: ''
      },
      type: {
        summary: 'string'
      }
    },
    control: { type: 'text' }
  },
  label: {
    description: 'Необязательное свойство. Текст справа от radio button',
    table: {
      defaultValue: {
        summary: ''
      },
      type: {
        summary: 'string'
      }
    },
    control: { type: 'text' }
  },
  checked: {
    description: 'Состояние активного компонента',
    table: {
      defaultValue: {
        summary: 'false'
      },
      type: {
        summary: 'boolean'
      }
    },
    control: { type: 'boolean' }
  },
  onChange: {
    description: 'Callback для обработчки события изменения состояния Radio'
  }
};
"
Styles for component Radio Radio.module.scss,".radio {
  display: flex;
  gap: 12px;

  // Миксин для установки размеров круга радио-кнопки
  @mixin radio-circle($size) {
    width: $size;
    height: $size;
    border-radius: 50%;
  }

  // Миксин для центрирования содержимого
  @mixin center-content {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
  }

  // Базовые стили для input[type=""radio""]
  input[type=""radio""] {
    @include radio-circle(20px);
    appearance: none;
    position: relative;
    margin: 0;
    cursor: pointer;

    // Внешний круг радио-кнопки
    &:before {
      content: """";
      @include center-content;
      @include radio-circle(16px);
      border: 2px solid var(--steel-60);
      background: var(--steel-10);
    }

    // Внутренний круг радио-кнопки (появляется при выборе)
    &:after {
      content: """";
      @include center-content;
      @include radio-circle(10px);
      background-color: var(--brand-sapphire-60);
      opacity: 0;
      transition: opacity 0.2s ease-in-out;
    }

    // Стили для выбранной радио-кнопки
    &:checked {
      &:before {
        border-color: var(--brand-sapphire-60);
      }

      &:after {
        opacity: 1;
      }
    }

    // Стили при наведении
    &:not(:disabled) {
      &:hover {
        &:before {
          border-color: var(--steel-60);
          box-shadow: 0 0 0 6px rgb(from var(--steel-60) r g b / 12%);
        }
      }

      &:checked:hover {
        &:before {
          border-color: var(--brand-sapphire-60);
          box-shadow: 0 0 0 6px rgb(from var(--brand-sapphire-60) r g b / 12%);
        }

        &:after {
          box-shadow: 0 0 0 3px rgb(from var(--brand-sapphire-60) r g b / 12%);
        }
      }
    }

    // Стили для отключенной радио-кнопки
    &:disabled {
      cursor: default;

      &:before {
        background-color: var(--steel-30);
        border-color: var(--steel-50);
      }

      &:checked {
        &:before, &:after {
          opacity: 0.5;
        }

        &:after {
          background-color: var(--steel-50);
        }
      }
    }
  }
}

// Стили для лейбла радио-кнопки
.label {
  cursor: pointer;

  &-disabled {
    opacity: 0.5;
    pointer-events: none;
    cursor: default;
  }
}
"
Types for component Radio types.ts,"import { ChangeEvent } from 'react';

export type IRadioProps = {
  /**
   * Значение радио-кнопки
   */
  value?: string;

  /**
   * Флаг, указывающий, выбрана ли радио-кнопка
   */
  checked?: boolean;

  /**
   * Флаг, указывающий, отключена ли радио-кнопка
   */
  disabled?: boolean;

  /**
   * Функция обработки изменения состояния радио-кнопки
   */
  onChange?: (event: ChangeEvent<HTMLInputElement>) => void;

  /**
   * Дополнительный CSS класс
   */
  className?: string;

  /**
   * Текст метки радио-кнопки
   */
  label?: string;
};
"
Codes for component Radio _stories Stories.tsx,"import React, { useState } from 'react';

import Editor from '@components/_storybook/Stories/components/Editor';
import FigmaEmbed from '@components/_storybook/Stories/components/FigmaEmbed';
import Header from '@components/_storybook/Stories/components/Header';
import Properties from '@components/_storybook/Stories/components/Properties';
import Tests from '@components/_storybook/Stories/components/Tests';
import '@components/_storybook/Stories/styles.css';
import { Tabs } from '@components/index';

import styles from '@components/_storybook/Stories/Stories.module.scss';

import { argsTypes } from './argsTypes';

const Stories = (): JSX.Element => {
  const [activeTab, setActiveTab] = useState(0);

  return (
    <div className={styles.wrapper}>
      <Header
        title=""Radio""
        description=""Компонент Radio обычно используется для выбора одного из нескольких взаимоисключающих вариантов в рамках определённой группы.""
        isStable
        codeLink=""https://github.com/nlmk-group/ds-2.0/tree/main/src/components/Radio""
        figmaLink=""https://www.figma.com/file/MSMqfqJrQNaqbLe4Ctkq7n/Design-System-2.0-NLMK-(beta)-(Community)?type=design&node-id=1039%3A29072&mode=design&t=awyt3Fzj1XS6th7v-1""
      />

      <div className={styles.tabs}>
        <Tabs>
          <Tabs.Tab label=""Разработчику"" active={0 === Number(activeTab)} onClick={() => setActiveTab(0)} />
          {/* <Tabs.Tab label=""Дизайнеру"" active={1 === Number(activeTab)} onClick={() => setActiveTab(1)} /> */}
          <Tabs.Tab label=""Тестирование"" active={2 === Number(activeTab)} onClick={() => setActiveTab(2)} />
        </Tabs>
      </div>

      {Number(activeTab) == 0 && (
        <>
          <Editor
            description=""Компонент radio по умолчанию.""
            code={`import { useState } from 'react';
import { Radio } from '@nlmk/ds-2.0';

export default  App = () => {
  const [checked, setChecked] = useState('yes');
  const handleChange = (event) => {
    setChecked(event.target.value);
  };
  return (
    <>
      <Radio
        checked={checked === 'yes'}
        onChange={handleChange}
        value=""yes""
        label=""Yes""
      />
      <Radio
        checked={checked === 'no'}
        onChange={handleChange}
        value=""no""
        label=""No""
      />
    </>
  )
}`}
          />

          <Editor
            description=""Компонент может быть неактивным для пользователя (disabled).""
            code={`import { Radio, Typography } from '@nlmk/ds-2.0';

export default  App = () =>(
  <>
    <Radio disabled />
    <Typography variant=""Body1-Bold"" color=""var(--steel-90)"" style={{ opacity: '0.5' }}>Я Радиокнопка</Typography>
  </>
)`}
          />

          <Properties argsTypes={argsTypes} />
        </>
      )}
      {Number(activeTab) == 1 && (
        <FigmaEmbed url=""https://www.figma.com/file/MSMqfqJrQNaqbLe4Ctkq7n/Design-System-2.0-NLMK-(beta)-(Community)?type=design&node-id=1039%3A29072&mode=design&t=awyt3Fzj1XS6th7v-1"" />
      )}
      {Number(activeTab) == 2 && <Tests componentName=""Radio"" />}
    </div>
  );
};

export default Stories;
"
Types for component SegmentButtonGroup enums.ts,"/**
 * @type {enum} buttonColor
 */

export enum buttonColor {
  default = 'default',
  steel   = 'steel',
  sky     = 'sky',
  red     = 'red',
  yellow  = 'yellow',
  green   = 'green'
}
"
Types for component SegmentButtonGroup _stories argsTypes.ts,"import { buttonColor } from '../enums';

export const buttonGroupItemsArgsTypes = {
  className: {
    description: 'В компонент можно передать альтернативные стили',
    control: { type: 'string' }
  },
  active: {
    description:
      'Необязательный свойство. Булево значение, указывающее, является ли кнопка-переключатель активной по умолчанию',
    table: {
      defaultValue: {
        summary: 'boolean'
      }
    }
  },
  color: {
    description: 'Необязательный атрибут который задает цвет кнопке.',
    table: {
      defaultValue: {
        summary: buttonColor.default
      },
      type: {
        summary: 'string'
      }
    },
    options: Object.values(buttonColor),
    control: { type: 'select' }
  },
  disabled: {
    description: 'Необязательный свойство. добавление кнопке атрибута disabled',
    table: {
      defaultValue: {
        summary: 'boolean'
      }
    }
  }
};

export const argsTypes = {
  className: {
    description: 'В компонент можно передать альтернативные стили',
    control: { type: 'string' }
  },
  compact: {
    description: 'Необязательное свойство которое задает компактную высоту компоненту.',
    table: {
      defaultValue: {
        summary: 'false'
      }
    },
    control: { type: 'boolean' }
  },
  color: {
    description:
      'Необязательный атрибут который задает цвет кнопок (можно задавать индидуально каждой дочерней кнопке).',
    table: {
      defaultValue: {
        summary: buttonColor.default
      },
      type: {
        summary: Object.values(buttonColor).join(' | ')
      }
    },
    options: Object.values(buttonColor),
    control: { type: 'select' }
  },
  disabled: {
    description:
      'Необязательный свойство. Флаг-условие добавление атрибута disabled всем кнопкам компонента (можно блокировать выборочно внутри дочернего компонента)',
    table: {
      defaultValue: {
        summary: 'false'
      }
    },
    control: { type: 'boolean' }
  }
};
"
Codes for component SegmentButtonGroup SegmentButton index.tsx,"import React, { SyntheticEvent, useContext } from 'react';

import { Typography } from '@components/index';
import { clsx } from 'clsx';

import styles from '../SegmentButtonGroup.module.scss';

import { SegmentButtonProperties } from '../index';
import type { ISegmentButtonProperties, ISegmentButtonProps } from '../types';

export const SegmentButton = ({
  className,
  disabled = false,
  active = false,
  color,
  children,
  onClick = () => void 0,
  toggleButton = () => void 0
}: ISegmentButtonProps) => {
  const defaultProps = useContext<ISegmentButtonProperties>(SegmentButtonProperties);
  const isDisabled = defaultProps.disabled || disabled;
  const isPrimitiveChildren = typeof children === 'string' || typeof children === 'number';
  const currentColor = `_${color || defaultProps.color}`;

  const handleClick = (e: SyntheticEvent) => {
    toggleButton();
    if (!onClick) return;

    onClick(e);
  };

  return (
    <button
      data-testid=""SEGMENT_BUTTON""
      onClick={handleClick}
      disabled={isDisabled}
      className={clsx(
        styles.segmentButton,
        styles[currentColor],
        defaultProps.compact ? styles._compact : '',
        active ? styles._active : '',
        className
      )}
    >
      {isPrimitiveChildren ? <Typography variant=""Body1-Bold"" color='var(--steel-90)'>{children}</Typography> : children}
    </button>
  );
};

export default SegmentButton;
"
Codes for component SegmentButtonGroup _stories Stories.tsx,"import React, { useState } from 'react';

import Editor from '@components/_storybook/Stories/components/Editor';
import FigmaEmbed from '@components/_storybook/Stories/components/FigmaEmbed';
import Header from '@components/_storybook/Stories/components/Header';
import Properties from '@components/_storybook/Stories/components/Properties';
import Tests from '@components/_storybook/Stories/components/Tests';
import '@components/_storybook/Stories/styles.css';
import { Tabs } from '@components/index';

import styles from '@components/_storybook/Stories/Stories.module.scss';

import { argsTypes } from './argsTypes';
import {
  DEFAULT_SEGMENT_BUTTON
} from './constants';

enum TabIds {
  dev,
  design,
  tests
}

const COMPONENT_NAME = 'SegmentButtonGroup';
const FIGMA_URL =
  'https://www.figma.com/design/2bgeOS0URFNqFO1m1bnyvg/Button-DS-3.0?node-id=1386-40366&t=tKstDPBno2uq1Mh5-0';

const Stories = (): JSX.Element => {
  const [activeTab, setActiveTab] = useState<TabIds>(TabIds.dev);

  const isActive = (tab: TabIds) => {
    return activeTab === tab;
  };

  return (
    <div className={styles.wrapper}>
      <Header
        title={COMPONENT_NAME}
        description=""Компонент SegmentButtonGroup - это набор кнопок, из которых пользователь может выбрать только одну.""
        isStable
        codeLink={`https://github.com/nlmk-group/ds-2.0/tree/main/src/components/${COMPONENT_NAME}`}
        figmaLink={FIGMA_URL}
      />

      <div className={styles.tabs}>
        <Tabs>
          <Tabs.Tab label=""Разработчику"" active={isActive(TabIds.dev)} onClick={() => setActiveTab(TabIds.dev)} />
          {/* <Tabs.Tab label=""Дизайнеру"" active={isActive(TabIds.design)} onClick={() => setActiveTab(TabIds.design)} /> */}
          <Tabs.Tab label=""Тестирование"" active={isActive(TabIds.tests)} onClick={() => setActiveTab(TabIds.tests)} />
        </Tabs>
      </div>

      {activeTab == TabIds.dev && (
        <>
          <Editor
            height={600}
            description={DEFAULT_SEGMENT_BUTTON}
            code={`import { SegmentButtonGroup } from '@nlmk/ds-2.0';

const { Button } = SegmentButtonGroup;

export default App = () => {
  return (
    <SegmentButtonGroup>
      <Button onClick={() => console.log(new Date())}>
        Печенье
      </Button>
      <Button onClick={() => console.log(new Date())}>
        Торты
      </Button>
      <Button onClick={() => console.log(new Date())}>
        Конфеты
      </Button>
    </SegmentButtonGroup>
  )
}
`}
          />
          <Properties argsTypes={argsTypes} />
        </>
      )}
      {activeTab == TabIds.design && <FigmaEmbed url={FIGMA_URL} />}
      {activeTab == TabIds.tests && <Tests componentName={COMPONENT_NAME} />}
    </div>
  );
};

export default Stories;
"
Codes for component SegmentButtonGroup index.tsx,"import React, { Children, cloneElement, createContext, isValidElement, ReactNode, useEffect, useState } from 'react';

import { Box } from '@components/index';
import clsx from 'clsx';

import type { ISegmentButtonGroup, ISegmentButtonProperties, ISegmentButtonProps } from './types';

import styles from './SegmentButtonGroup.module.scss';

import { buttonColor } from './enums';
import SegmentButton from './SegmentButton';

export const SegmentButtonProperties = createContext<ISegmentButtonProperties>({
  compact: false,
  color: buttonColor.default,
  disabled: false
});

export const SegmentButtonGroup = ({
  className = '',
  compact = false,
  color = buttonColor.default,
  disabled = false,
  children
}: ISegmentButtonGroup) => {
  const [activeId, setActiveId] = useState<number | null>(null);
  const [childrenWithProps, setChildrenWithProps] = useState<ReactNode | ReactNode[]>(null);

  const handleToggle = (index: number) => {
    if (activeId === index) {
      setActiveId(null);
      return;
    }

    setActiveId(index);
  };

  useEffect(() => {
    setChildrenWithProps(
      Children.map(children, (child, index) => {
        if (isValidElement(child)) {
          if (child.props.active) {
            setActiveId(index);
          }

          const childrenProps: ISegmentButtonProps = {
            active: activeId === index,
            disabled: child.props.disabled || disabled,
            children: child.props.children,
            toggleButton: () => handleToggle(index)
          };

          return cloneElement(child, childrenProps);
        }

        return child;
      })
    );
  }, [activeId]);

  const defaultProperties = {
    compact,
    color,
    disabled
  };

  return (
    <SegmentButtonProperties.Provider value={defaultProperties}>
      <Box
        gap={0}
        borderRadius={4}
        width=""fitContent""
        className={clsx(styles.segmentButtonGroup, className)}
        data-testid=""SEGMENT_BUTTON_WRAPPER""
      >
        {childrenWithProps}
      </Box>
    </SegmentButtonProperties.Provider>
  );
};

SegmentButtonGroup.Button = SegmentButton;

export default SegmentButtonGroup;
"
Styles for component SegmentButtonGroup SegmentButtonGroup.module.scss,":root {
  --transition-Medium: 0.3s;
}

@mixin colorButton($bg, $hoverBg: $bg) {
  background: var($bg);

  &._active {
    background: var($hoverBg);
  }

  @media (hover: hover) {
    &:hover:not(:disabled) {
      background: var($hoverBg);
    }
  }
}

.segmentButtonGroup {
  width: fit-content;

  & > .segmentButton {
    &:first-child {
      border-top-left-radius: 4px;
      border-bottom-left-radius: 4px;
      padding-right: 6px;
      border-right: none;
    }

    &:not(:first-child):not(:last-child) {
      padding-right: 6px;
      border-right: none;
    }

    &:last-child {
      border-top-right-radius: 4px;
      border-bottom-right-radius: 4px;
    }
  }
}

.segmentButton {
  display: flex;
  box-sizing: border-box;
  min-width: 40px;
  padding: 8px 5px;
  border: 1px solid var(--unique-divider);
  margin: 0px;
  cursor: pointer;
  place-content: center;
  transition: background var(--transition-Medium) ease-in-out;

  &._compact {
    padding-top: 2px;
    padding-bottom: 2px;
  }

  &._default {
    @include colorButton(--steel-10, --steel-30);
  }

  &._steel {
    @include colorButton(--steel-50, --steel-30);
  }

  &._sky {
    @include colorButton(--spectrum-sky-30, --spectrum-sky-10);
  }
  &._red {
    @include colorButton(--spectrum-red-30, --spectrum-red-10);
  }

  &._yellow {
    @include colorButton(--spectrum-yellow-30, --spectrum-yellow-10);
  }

  &._green {
    @include colorButton(--spectrum-green-30, --spectrum-green-10);
  }

  &._active,
  &:disabled {
    pointer-events: none;
  }

  &:disabled {
    & > span {
      background: var(--steel-30);
      background-clip: text;
      -webkit-background-clip: text;
      opacity: var(--50-opacity);
    }
  }
}
"
Types for component SegmentButtonGroup _stories constants.ts,"export const DEFAULT_SEGMENT_BUTTON = 'Segment Button по умолчанию';
export const SEGMENT_BUTTON_COMPACT = 'Segment Button компактный';
export const SEGMENT_BUTTON_COLOR_OPTIONS = 'Segment Button с разными цветами заливки';
export const SEGMENT_BUTTON_COLOR_OPTIONS_VARIABLE = 'Segment Button с разными цветами заливки каждой кнопки';
"
Codes for component Sidebar _stories Stories.tsx,"import React, { useState } from 'react';

import Editor from '@components/_storybook/Stories/components/Editor';
import FigmaEmbed from '@components/_storybook/Stories/components/FigmaEmbed';
import Header from '@components/_storybook/Stories/components/Header';
import Properties from '@components/_storybook/Stories/components/Properties';
import Tests from '@components/_storybook/Stories/components/Tests';
import '@components/_storybook/Stories/styles.css';
import { Tabs } from '@components/index';

import styles from '@components/_storybook/Stories/Stories.module.scss';

import { argsTypes } from './argsTypes';

enum TabIds {
  dev,
  design,
  tests
}

const COMPONENT_NAME = 'Sidebar';
const FIGMA_URL =
  'https://www.figma.com/file/NVWvbpDg0KxYpZOlCMFXdy/DS2.0-Sidebar?type=design&node-id=0-1&mode=design&t=Qh3zxP2KDdKIeZpx-0';

const sidebarDefault = `import { useState } from 'react';
import { Sidebar } from '@nlmk/ds-2.0';

const App = () => {
  const [isLoggedIn, setIsLoggedIn] = useState(false);
  const [currentPath, setCurrentPath] = useState('');
  const path = 'https://images.unsplash.com/photo-1683343946402-85b144e8ecb6?q=80&w=3570&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D';

  return (
    <div style={{
      backgroundColor: ""var(--steel-20)"",
      width: ""110%"",
      margin: ""-20px""
    }}>
     <Sidebar
      key=""vertical""
      orientation=""vertical""
      allowFavorites
      isLoggedIn={isLoggedIn}
      onLogout={() => setIsLoggedIn(false)}
      onLogin={() => setIsLoggedIn(true)}
      currentPath={currentPath}
    >
      <Sidebar.Avatar imageSrc="""" />
      <Sidebar.MenuItem
        path=""cars""
        label=""Задание на добавление""
        position=""top""
        icon=""IconKovsh32""
        onClick={() => setCurrentPath('cars')}
      >
        <Sidebar.SubmenuItem path=""porsche"" label=""porsche"" image={path} onClick={() => setCurrentPath('porsche')} />
        <Sidebar.SubmenuItem
          path=""volksvagen""
          label=""volksvagen""
          image={path}
          onClick={() => setCurrentPath('volksvagen')}
        >
          <Sidebar.SubmenuItem path=""polo"" label=""polo"" onClick={() => setCurrentPath('polo')} />
          <Sidebar.SubmenuItem path=""tiguan"" label=""tiguan"" onClick={() => setCurrentPath('tiguan')} />
          <Sidebar.SubmenuItem path=""multivan"" label=""multivan"" onClick={() => setCurrentPath('multivan')} disabled />
        </Sidebar.SubmenuItem>
        <Sidebar.SubmenuItem path=""toyota"" label=""toyota"" image={path} onClick={() => setCurrentPath('toyota')}>
          <Sidebar.SubmenuItem path=""supra"" label=""supra"" onClick={() => setCurrentPath('supra')} />
          <Sidebar.SubmenuItem path=""tundra"" label=""tundra"" onClick={() => setCurrentPath('tundra')} />
        </Sidebar.SubmenuItem>
        <Sidebar.SubmenuItem path=""mazda"" label=""mazda"" image={path} onClick={() => setCurrentPath('mazda')} />
      </Sidebar.MenuItem>
      <Sidebar.MenuItem
        path=""bands""
        label=""bands""
        position=""top""
        icon=""IconBunkerOutlined32""
        onClick={() => setCurrentPath('bands')}
      >
        <Sidebar.SubmenuItem path=""limp bizkit"" label=""limp bizkit"" onClick={() => setCurrentPath('limp bizkit')} />
        <Sidebar.SubmenuItem path=""slipknot"" label=""slipknot"" onClick={() => setCurrentPath('slipknot')}>
          <Sidebar.SubmenuItem
            path=""corey taylor""
            label=""corey taylor""
            onClick={() => setCurrentPath('corey taylor')}
          />
          <Sidebar.SubmenuItem
            path=""mick thompson""
            label=""mick thompson""
            onClick={() => setCurrentPath('mick thompson')}
          />
          <Sidebar.SubmenuItem path=""jim root"" label=""jim root"" onClick={() => setCurrentPath('jim root')} />
        </Sidebar.SubmenuItem>
        <Sidebar.SubmenuItem path=""korn"" label=""korn"" onClick={() => setCurrentPath('korn')} />
      </Sidebar.MenuItem>
      <Sidebar.MenuItem
        path=""menu item""
        label=""menu item""
        position=""top""
        icon=""IconLightningStroke32""
        onClick={() => setCurrentPath('menu item')}
      />
      <Sidebar.MenuItem
        path=""disabled item""
        label=""disabled item""
        position=""top""
        icon=""IconMapPinaltOutlined32""
        disabled
        onClick={() => setCurrentPath('disabled item')}
      />
      <Sidebar.MenuItem
        path=""lorem ipsum""
        label=""lorem ipsum""
        position=""bottom""
        icon=""IconInfoOutlined32""
        onClick={() => setCurrentPath('lorem ipsum')}
      >
        <Sidebar.SubmenuItem path=""dolor"" label=""dolor"" onClick={() => setCurrentPath('dolor')} />
        <Sidebar.SubmenuItem path=""sit"" label=""sit"" onClick={() => setCurrentPath('sit')} />
        <Sidebar.SubmenuItem path=""amet"" label=""amet"" onClick={() => setCurrentPath('amet')} />
      </Sidebar.MenuItem>
    </Sidebar>
    </div>
  );
}
export default App;`;

const SidebarStories = (): JSX.Element => {
  const [activeTab, setActiveTab] = useState<TabIds>(TabIds.dev);

  const isActive = (tab: TabIds) => {
    return activeTab === tab;
  };

  return (
    <div className={styles.wrapper}>
      <Header
        title={COMPONENT_NAME}
        description={`Компонент для навигации и организации контента в интерфейсе.`}
        isBeta
        codeLink={`https://github.com/nlmk-group/ds-2.0/tree/main/src/components/${COMPONENT_NAME}`}
        figmaLink={FIGMA_URL}
      />

      <div className={styles.tabs}>
        <Tabs>
          <Tabs.Tab label=""Разработчику"" active={isActive(TabIds.dev)} onClick={() => setActiveTab(TabIds.dev)} />
          {/* <Tabs.Tab label=""Дизайнеру"" active={isActive(TabIds.design)} onClick={() => setActiveTab(TabIds.design)} /> */}
          <Tabs.Tab label=""Тестирование"" active={isActive(TabIds.tests)} onClick={() => setActiveTab(TabIds.tests)} />
        </Tabs>
      </div>
      {activeTab == TabIds.dev && (
        <>
          <Editor height={800} description=""Пример Sidebar"" code={sidebarDefault} />
          <Properties argsTypes={argsTypes} />
        </>
      )}

      {activeTab == TabIds.design && <FigmaEmbed url={FIGMA_URL} />}
      {activeTab == TabIds.tests && <Tests componentName={COMPONENT_NAME} />}
    </div>
  );
};

export default SidebarStories;
"
Styles for component Sidebar Sidebar.module.scss,"@mixin column {
  display: flex;
  flex-direction: column;
}

@mixin cell {
  display: flex;
  height: var(--64-size);
  box-sizing: border-box;
  flex-shrink: 0;
  align-items: center;
  cursor: pointer;
}

.root {
  @include column;
  position: sticky;
  flex-shrink: 0;
  top: 0;
  width: var(--64-size);
  transition: width 0.3s;

  &-vertical {
    height: 100vh;

    &-expanded {
      width: 256px;
    }
  }

  &-horizontal {
    height: var(--64-size);

    &-expanded {
      width: 100%;
    }
  }
}

.menu {
  position: relative;
  z-index: 100;
  background: var(--ac-sidebar-section-default-bg);
  flex-shrink: 0;
  justify-content: space-between;

  &-vertical {
    @include column;
    height: 100%;
  }

  &-horizontal {
    display: flex;
    flex-grow: 1;
  }
}

.burger {
  @include cell;
  width: var(--64-size);
  justify-content: center;
  background: var(--ac-sidebar-section-default-bg);

  &:hover {
    background: var(--ac-sidebar-section-hover-bg);
  }

  &-expanded {
    background: var(--ac-sidebar-section-selected-bg);
  }
}

.head {
  @include column;
  flex-grow: 0;
  flex-shrink: 0;
  overflow: hidden;
}

.top {
  @include cell;
  cursor: initial;
  justify-content: space-between;
  align-items: center;
  background: var(--ac-sidebar-section-top-section-bg);
  transition: padding-left 0.3s ease;

  &-left {
    display: flex;
    align-items: center;
    flex-grow: 1;
  }

  &-expanded {
    padding: 0 var(--8-space);
  }
}

.logo {
  display: flex;
  align-items: center;
  justify-content: center;
  width: var(--64-size);
  height: var(--64-size);
  flex-shrink: 0;
}

.company {
  color: var(--ac-sidebar-section-text);
  margin: 0 var(--4-space);
  opacity: var(--50-opacity);
}

.auth {
  margin: 0 var(--8-space);

  &:hover {
    background: var(--ac-button-primary-clear-hover-bg);
  }
}

.body {
  display: flex;
  flex-grow: 1;

  &-vertical {
    flex-direction: column;
    justify-content: space-between;
    overflow-y: auto;
    overflow-x: hidden;
  }

  &-horizontal {
    overflow-y: hidden;
    overflow-x: auto;
  }
}

.topSection,
.bottomSection {
  @include column;
}

.rightSection {
  @include cell;
}

.search {
  @include cell;
  justify-content: center;
  width: var(--64-size);

  &:hover {
    background: var(--ac-sidebar-section-hover-bg);
  }
}
"
Codes for component Sidebar index.tsx,"import React, {
  Children,
  FC,
  isValidElement,
  ReactElement,
  ReactNode,
  useEffect,
  useMemo,
  useRef,
  useState
} from 'react';

import { IAvatarProps } from '@components/Avatar/types';
import { LogoSvgIcon } from '@components/Icon/IconsInternal';
import { Avatar, Button, ClickAwayListener, Icon, Scrollbar, Typography } from '@components/index';
import clsx from 'clsx';

import { IComponentWithType, IMenuItemProps, ISidebarProps, ISubmenuItemProps } from './types';

import styles from './Sidebar.module.scss';

import { CollapseButton, MenuItem, Submenu, SubmenuItem, UserControl } from './components';
import { SidebarProperties } from './context';
import { orientationMapping, positionMapping, variantMapping } from './enums';

const Sidebar: FC<ISidebarProps> &
  Record<'Avatar', FC<IAvatarProps>> &
  Record<'MenuItem', FC<IMenuItemProps>> &
  Record<'SubmenuItem', FC<ISubmenuItemProps>> = ({
    variant = variantMapping.default,
    orientation = orientationMapping.vertical,
    allowFavorites = false,
    isLoggedIn,
    systemName,
    userName,
    userSurname,
    children,
    onOpenUser,
    onLogout,
    onLogin,
    onSearch,
    onClickLogo,
    currentPath
  }) => {
    const isBurger = variant === variantMapping.burger;
    const isVertical = orientation === orientationMapping.vertical;

    const [isExpanded, setExpanded] = useState(!isVertical && !isBurger);
    const [activeItem, setActiveItem] = useState<string | null>(null);
    const [submenuItems, setSubmenuItems] = useState<ReactNode | ReactNode[]>(null);
    const [isScrollingDueToClick, setIsScrollingDueToClick] = useState(false);
    const scrollRef = useRef<HTMLDivElement>(null);
    const positionRef = useRef<HTMLDivElement>(null);
    const collapseButtonRef = useRef<HTMLDivElement>(null);

    useEffect(() => {
      const handleWheel = (event: WheelEvent) => {
        if (scrollRef.current) {
          event.preventDefault();
          scrollRef.current.scrollLeft += event.deltaY;
        }
      };

      if (orientation !== orientationMapping.vertical) {
        scrollRef.current?.addEventListener('wheel', handleWheel);
        return () => scrollRef.current?.removeEventListener('wheel', handleWheel);
      }
    }, [orientation]);

    useEffect(() => {
      const handleScroll = () => {
        if (orientation === orientationMapping.horizontal && activeItem !== null && !isScrollingDueToClick) {
          setActiveItem(null);
        }
      };

      const scrollElement = scrollRef.current;
      if (scrollElement) {
        scrollElement.addEventListener('scroll', handleScroll);
      }

      return () => {
        if (scrollElement) {
          scrollElement.removeEventListener('scroll', handleScroll);
        }
      };
    }, [activeItem, orientation, isScrollingDueToClick]);

    const filterChildrenByComponentType = (children: ReactNode, componentType: string): ReactElement[] => {
      return Children.toArray(children).filter(
        child =>
          isValidElement(child) &&
        typeof child.type !== 'undefined' &&
        'componentType' in (child.type as IComponentWithType) &&
        (child.type as IComponentWithType).componentType === componentType
      ) as ReactElement[];
    };

    const expandSidebar = () => {
      setActiveItem(null);
      setExpanded(false);
    };

    const menuItems = useMemo(() => filterChildrenByComponentType(children, 'MenuItem'), [children]);
    const avatar = useMemo(() => filterChildrenByComponentType(children, 'Avatar'), [children]);

    const topSectionItems = useMemo(
      () =>
        menuItems.filter(
          child =>
            isValidElement(child) && (child.props as { position: `${positionMapping}` }).position === positionMapping.top
        ),
      [menuItems]
    );

    const bottomSectionItems = useMemo(
      () =>
        menuItems.filter(
          child =>
            isValidElement(child) &&
          (child.props as { position: `${positionMapping}` }).position === positionMapping.bottom
        ),
      [menuItems]
    );

    const actionIconName = isLoggedIn ? 'IconExitOutlined24' : 'IconEnterOutlined24';
    const actionTitle = isLoggedIn ? 'Выйти' : 'Войти';
    const handleAction = isLoggedIn && onLogout ? onLogout : onLogin;

    const renderUserControl = () => (
      <UserControl
        isExpanded={isExpanded}
        isVertical={isVertical}
        isLoggedIn={isLoggedIn}
        userName={userName}
        userSurname={userSurname}
        onOpenUser={onOpenUser}
        onLogin={onLogin}
        onLogout={onLogout}
      >
        {avatar}
      </UserControl>
    );

    if (isBurger && !isExpanded)
      return (
        <div className={styles.burger} onClick={() => setExpanded(true)}>
          <Icon name=""IconMenuBurgerOutlined32"" containerSize={32} htmlColor=""var(--ac-icon-white)"" />
        </div>
      );

    return (
      <SidebarProperties.Provider
        value={{
          isExpanded,
          activeItem,
          allowFavorites,
          orientation,
          setSubmenuItems,
          setActiveItem,
          isScrollingDueToClick,
          setIsScrollingDueToClick,
          currentPath
        }}
      >
        <ClickAwayListener
          onClickAway={() => setActiveItem(null)}
          excludeRef={collapseButtonRef}
          className={clsx(styles.root, styles[`root-${orientation}`], {
            [styles[`root-${orientation}-expanded`]]: isExpanded
          })}
        >
          <div className={clsx(styles.menu, styles[`menu-${orientation}`])} ref={positionRef}>
            {isBurger && !isVertical && (
              <div className={clsx(styles.burger, styles['burger-expanded'])} onClick={expandSidebar}>
                <Icon name=""IconMenuBurgerOutlined32"" containerSize={32} htmlColor=""var(--ac-icon-white)"" />
              </div>
            )}
            <div className={styles.head}>
              {isVertical && isBurger && <CollapseButton isExpanded={isExpanded} onClick={expandSidebar} />}

              <div className={clsx(styles.top, { [styles['top-expanded']]: isExpanded })}>
                <div className={styles['top-left']}>
                  <div className={styles.logo} onClick={onClickLogo}>
                    <LogoSvgIcon />
                  </div>
                  {isExpanded && systemName && (
                    <Typography variant=""Body1-Medium"" className={styles.company}>
                      {systemName}
                    </Typography>
                  )}
                </div>
                {isExpanded && isVertical && handleAction && (
                  <Button
                    variant=""primary""
                    fill=""clear""
                    className={styles.auth}
                    onClick={handleAction}
                    iconButton={<Icon name={actionIconName} />}
                    title={actionTitle}
                  />
                )}
              </div>
            </div>

            <Scrollbar
              className={clsx(styles.body, styles[`body-${orientation}`], styles.scrollbar)}
              ref={scrollRef}
            >
              {isVertical ? (
                <>
                  <div className={styles.topSection}>
                    {renderUserControl()}
                    {topSectionItems}
                  </div>
                  <div className={styles.bottomSection}>{bottomSectionItems}</div>
                </>
              ) : (
                menuItems
              )}
            </Scrollbar>

            {isVertical ? (
              !isBurger && (
                <CollapseButton
                  ref={collapseButtonRef}
                  isExpanded={isExpanded}
                  onClick={() => setExpanded(val => !val)}
                />
              )
            ) : (
              <div className={styles.rightSection}>
                {onSearch && (
                  <div className={styles.search}>
                    <Icon name={'IconSearchOutlined32'} containerSize={32} htmlColor=""var(--ac-icon-white)"" />
                  </div>
                )}
                {renderUserControl()}
              </div>
            )}
          </div>

          <Submenu title={activeItem ?? ''} isOpen={Boolean(activeItem)} orientation={orientation}>
            {submenuItems}
          </Submenu>
        </ClickAwayListener>
      </SidebarProperties.Provider>
    );
  };

Sidebar.Avatar = Avatar;
Sidebar.MenuItem = MenuItem;
Sidebar.SubmenuItem = SubmenuItem;

export default Sidebar;
"
Types for component Sidebar enums.ts,"export enum orientationMapping {
  vertical = 'vertical',
  horizontal = 'horizontal'
}

export enum variantMapping {
  default = 'default',
  burger = 'burger'
}

export enum positionMapping {
  top = 'top',
  bottom = 'bottom'
}
"
Types for component Sidebar context index.ts,"import { createContext } from 'react';
import { ISidebarProperties, ISubmenuProperties } from '../types';
import { orientationMapping } from '../enums';

export const SidebarProperties = createContext<ISidebarProperties>({
  isExpanded: false,
  activeItem: null,
  allowFavorites: false,
  orientation: orientationMapping.vertical,
  setSubmenuItems: () => {},
  setActiveItem: () => {},
  isScrollingDueToClick: false,
  setIsScrollingDueToClick: () => {},
  currentPath: ''
});

export const SubmenuProperties = createContext<ISubmenuProperties>({
  showFavorites: false,
  activeItem: null,
  handleFavorites: () => {},
  checkIsFavorite: () => false,
  checkChildIsFavorite: () => false,
  setActiveItem: () => {},
  setSubmenuItems: () => {}
});
"
Types for component Sidebar components index.ts,"export { default as CollapseButton } from './CollapseButton/CollapseButton';
export { default as UserControl } from './UserControl/UserControl';
export { default as MenuItem } from './MenuItem/MenuItem';
export { default as Submenu } from './Submenu/Submenu';
export { default as SubmenuItem } from './SubmenuItem/SubmenuItem';
"
Types for component Sidebar _stories argsTypes.ts,"import { orientationMapping, variantMapping } from '../enums';
import { positionMapping } from '../enums';

export const argsTypes = {
  orientation: {
    description: `Расположение сайдбара – <b>${Object.values(orientationMapping).join(' | ')}</b>.`,
    table: {
      defaultValue: {
        summary: orientationMapping.vertical
      },
      type: {
        summary: 'string'
      }
    },
    options: [orientationMapping.vertical, orientationMapping.horizontal],
    control: { type: 'select' }
  },
  variant: {
    description: `Тип сайдбара – <b>${Object.values(variantMapping).join(' | ')}</b>.`,
    table: {
      defaultValue: {
        summary: variantMapping.default
      },
      type: {
        summary: 'string'
      }
    },
    options: [variantMapping.default, variantMapping.burger],
    control: { type: 'select' }
  },
  allowFavorites: {
    description: 'Условие доступности добавления разделов в избранное',
    table: {
      defaultValue: {
        summary: 'false'
      },
      type: {
        summary: 'boolean'
      }
    },
    control: { type: 'boolean' }
  },
  isLoggedIn: {
    description: 'Свойство, указывающее, залогинен ли пользователь',
    table: {
      defaultValue: {
        summary: 'false'
      },
      type: {
        summary: 'boolean'
      }
    },
    control: { type: 'boolean' }
  },
  systemName: {
    description: 'Название системы, отображаемое вверху слева',
    control: { type: 'text' }
  },
  userName: {
    description: 'Имя пользователя',
    control: { type: 'text' }
  },
  userSurname: {
    description: 'Фамилия пользователя',
    control: { type: 'text' }
  },
  currentPath: {
    description: 'Текущий путь',
    control: { type: 'text' }
  }
};

export const menuItemArgsTypes = {
  position: {
    description: `Расположение элемента меню – <b>${Object.values(positionMapping).join(' | ')}</b>.`,
    table: {
      type: {
        summary: 'string'
      }
    },
    options: Object.values(positionMapping),
    control: { type: 'select' }
  },
  label: {
    description: 'Текст элемента меню',
    control: { type: 'text' }
  },
  icon: {
    description: 'Иконка элемента меню'
  },
  path: {
    description: 'Путь элемента меню',
    control: { type: 'text' }
  },
  disabled: {
    description: 'Флаг отключения элемента меню',
    table: {
      defaultValue: {
        summary: 'false'
      },
      type: {
        summary: 'boolean'
      }
    },
    control: { type: 'boolean' }
  }
};

export const submenuItemArgsTypes = {
  label: {
    description: 'Текст элемента подменю',
    control: { type: 'text' }
  },
  image: {
    description: 'Изображение элемента подменю',
    control: { type: 'text' }
  },
  depth: {
    description: 'Глубина вложенности элемента подменю',
    table: {
      defaultValue: {
        summary: '1'
      },
      type: {
        summary: 'number'
      }
    },
    control: { type: 'number' }
  },
  path: {
    description: 'Путь элемента подменю',
    control: { type: 'text' }
  },
  disabled: {
    description: 'Флаг отключения элемента подменю',
    table: {
      defaultValue: {
        summary: 'false'
      },
      type: {
        summary: 'boolean'
      }
    },
    control: { type: 'boolean' }
  }
};
"
Types for component Sidebar types.ts,"import { Dispatch, FC, PropsWithChildren, ReactNode, SetStateAction } from 'react';

import { TIconName } from '@components/Icon/IconsDirectory/unionType';

import { orientationMapping, positionMapping, variantMapping } from './enums';

export interface ISidebarProps extends PropsWithChildren {
  orientation?: `${orientationMapping}`;
  variant?: `${variantMapping}`;
  allowFavorites?: boolean;
  isLoggedIn?: boolean;
  systemName?: string;
  userName?: string;
  userSurname?: string;
  onOpenUser: () => void;
  onLogout?: () => void;
  onLogin?: () => void;
  onSearch?: () => void;
  onClickLogo?: () => void;
  currentPath: string;
}

export interface ICollapseButtonProps {
  isExpanded?: boolean;
  onClick: () => void;
}

export interface IUserControlProps extends PropsWithChildren {
  isExpanded: boolean;
  isVertical: boolean;
  isLoggedIn?: boolean;
  userName?: string;
  userSurname?: string;
  onOpenUser: () => void;
  onLogin?: () => void;
  onLogout?: () => void;
}

export interface IMenuItemProps extends PropsWithChildren {
  position?: `${positionMapping}`;
  label: string;
  icon: TIconName;
  onClick?: () => void;
  path: string;
  disabled?: boolean;
}

export interface ISidebarProperties {
  isExpanded: boolean;
  activeItem: string | null;
  allowFavorites: boolean;
  orientation: `${orientationMapping}`;
  setSubmenuItems: Dispatch<SetStateAction<ReactNode | ReactNode[]>>;
  setActiveItem: Dispatch<SetStateAction<string | null>>;
  isScrollingDueToClick: boolean;
  setIsScrollingDueToClick: Dispatch<SetStateAction<boolean>>;
  currentPath: string;
}

export interface ISubmenuProperties {
  showFavorites: boolean;
  activeItem: string | null;
  handleFavorites: (id: string,  children: string[]) => void;
  checkIsFavorite: (id: string) => boolean;
  checkChildIsFavorite: (id: string) => boolean;
  setActiveItem: Dispatch<SetStateAction<string | null>>;
  setSubmenuItems: Dispatch<SetStateAction<ReactNode | ReactNode[]>>;
}

export interface ISubmenuProps extends PropsWithChildren {
  orientation: `${orientationMapping}`;
  isOpen: boolean;
  title: string;
}

export interface ISubmenuItemProps extends PropsWithChildren {
  id?: string;
  label: string;
  image?: string;
  depth?: number;
  onClick?: () => void;
  path: string;
  disabled?: boolean;
}

export interface IComponentWithType extends FC<ISidebarProps> {
  componentType?: string;
}
"
Codes for component SimpleSelect index.tsx,"import React, {
  Children,
  FC,
  isValidElement,
  KeyboardEvent,
  MouseEventHandler,
  ReactElement,
  useEffect,
  useMemo,
  useRef,
  useState
} from 'react';

import { customInputColors, generateUUID, sizesMappingInput } from '@components/declaration';
import { Input } from '@components/index';
import clsx from 'clsx';

import { ISelectProps } from './types';

import styles from './SimpleSelect.module.scss';

import { ScrollingItemsDefault } from './constants';
import { SelectContext } from './context';
import { ArrowButton, OptionItem, Options } from './subcomponents';
import { IOptionItemProps } from './subcomponents/OptionItem/types';

/**
 * Компонент SimpleSelect представляет собой кастомизируемый выпадающий список с возможностью поиска.
 *
 * @component
 * @example
 * <SimpleSelect
 *   value=""option1""
 *   onChange={(value) => console.log(value)}
 *   label=""Select an option""
 *   placeholder=""Choose...""
 * >
 *   <OptionItem value=""option1"" label=""Option 1"" />
 *   <OptionItem value=""option2"" label=""Option 2"" />
 * </SimpleSelect>
 *
 * @param {Object} props - Свойства компонента SimpleSelect
 * @param {string|number} [props.value] - Значение селекта
 * @param {function} [props.onChange] - Обработчик изменения значения селекта
 * @param {string} [props.id] - Идентификатор компонента
 * @param {string} [props.portalContainerId='root'] - id рутового контейнера для создания портала
 * @param {ReactNode} props.children - Дочерние элементы селекта (опции меню)
 * @param {string} [props.menuWidth] - Ширина меню селекта
 * @param {string} [props.placeholder] - Плейсхолдер для инпута селекта
 * @param {string} [props.label] - Лейбл инпута в селекте
 * @param {boolean} [props.withPortal=false] - Флаг, указывающий, должно ли меню рендериться в портале
 * @param {boolean} [props.disabled=false] - Флаг доступности селекта
 * @param {function} [props.onBlur] - Обработчик закрытия меню options
 * @param {function} [props.onFocus] - Обработчик открытия меню options
 * @param {customInputColors} [props.color=customInputColors.default] - Цвет компонента
 * @param {TSize} [props.size=sizesMappingInput.m] - Размер компонента
 * @param {number} [props.scrollingItems=ScrollingItemsDefault] - Количество элементов после которого включается прокрутка
 * @param {string} [props.noOptionsText='Ничего не найдено'] - Текст, отображаемый когда нет доступных опций
 * @param {boolean} [props.searchable=false] - Флаг, указывающий, доступен ли поиск
 * @param {string} [props.name] - name определяет имя элемента, используется для ссылки на элемент
 * @param {function} [props.onEnterPress] - Обработчик нажатия клавиши Enter
 * @param {CSSProperties} [props.style] - Кастомные стили для компонента
 * @param {string} [props.className] - Добавление самостоятельного CSS класса
 * @param {boolean} [props.colored=false] - Флаг применения цветовых стилей
 * @param {boolean} [props.reset=false] - Флаг наличия кнопки сброса
 * @param {function} [props.onReset] - Обработчик сброса значения
 *
 * @returns {JSX.Element} Компонент SimpleSelect
 */

const SimpleSelect: FC<ISelectProps> = ({
  value,
  onChange,
  id,
  name,
  portalContainerId = 'root',
  children,
  menuWidth,
  placeholder,
  label,
  withPortal = false,
  disabled = false,
  onFocus,
  onBlur,
  color = customInputColors.default,
  size = sizesMappingInput.m,
  scrollingItems = ScrollingItemsDefault,
  noOptionsText = 'Ничего не найдено',
  searchable = false,
  colored = false,
  onEnterPress,
  reset,
  onReset,
  className,
  style
}) => {
  const [isOpen, setIsOpen] = useState(false);
  const [selectedLabel, setSelectedLabel] = useState('');
  const [searchTerm, setSearchTerm] = useState('');
  const [focusedIndex, setFocusedIndex] = useState<number>(-1);
  const selectRef = useRef<HTMLDivElement>(null);
  const inputRef = useRef<HTMLInputElement>(null);
  const menuRef = useRef<HTMLDivElement>(null);
  id = useMemo(() => `Select-${(id && id.toString()) || generateUUID()}`, [id]);

  const options = Children.toArray(children).filter((child): child is ReactElement<IOptionItemProps> =>
    isValidElement(child)
  );

  useEffect(() => {
    setSelectedLabel(findOptionLabel(value));
  }, [value, children]);

  const handleFocus = () => {
    setIsOpen(true);
    onFocus?.();
  };

  const handleBlur = () => {
    onBlur?.();
  };

  const toggleDropdown: MouseEventHandler<HTMLButtonElement> = e => {
    e.preventDefault();
    e.stopPropagation();
    if (isOpen) {
      handleBlur();
    } else {
      onFocus?.();
    }
    setIsOpen(!isOpen);
  };

  const handleOptionChange = (optionValue: string | number) => {
    setSelectedLabel(findOptionLabel(optionValue));
    setIsOpen(false);
    setFocusedIndex(-1);
    inputRef.current?.blur(); // Убираем фокус с инпута
    onChange?.(optionValue);
  };

  const findOptionLabel = (value: string | number | undefined): string => {
    if (value === undefined) return '';
    const selectedOption = options.find(child => child.props.value === value);
    return selectedOption
      ? selectedOption.props.label ||
          (typeof selectedOption.props.children === 'string' ? selectedOption.props.children : '')
      : '';
  };

  const filteredChildren = useMemo(() => {
    if (!searchable || !searchTerm) return options;
    return options.filter(child => {
      const optionLabel = child.props.label.toLowerCase();
      return optionLabel.includes(searchTerm.toLowerCase());
    });
  }, [options, searchTerm, searchable]);

  const optionsCount = filteredChildren.length;
  const noOptions = optionsCount === 0;

  const handleKeyDown = (event: KeyboardEvent<HTMLInputElement | HTMLTextAreaElement>) => {
    if (!isOpen) {
      if (event.key === 'ArrowDown' || event.key === 'ArrowUp') {
        setIsOpen(true);
        event.preventDefault();
      }
      return;
    }

    switch (event.key) {
      case 'ArrowDown':
        setFocusedIndex(prevIndex => (prevIndex + 1) % optionsCount);
        event.preventDefault();
        break;
      case 'ArrowUp':
        setFocusedIndex(prevIndex => {
          const newIndex = prevIndex - 1;
          return newIndex < 0 ? optionsCount - 1 : newIndex;
        });
        event.preventDefault();
        break;
      case 'Enter':
        if (focusedIndex !== -1 && focusedIndex < optionsCount) {
          const selectedChild = filteredChildren[focusedIndex];
          if (selectedChild && !selectedChild.props.disabled) {
            handleOptionChange(selectedChild.props.value);
            if (onEnterPress) {
              onEnterPress(selectedChild.props.value);
            }
          }
        }
        event.preventDefault();
        break;
      case 'Escape':
        setIsOpen(false);
        setFocusedIndex(-1);
        event.preventDefault();
        break;
    }
  };

  return (
    <SelectContext.Provider
      value={{
        isOpen,
        setIsOpen,
        selectedOption: value,
        setSelectedOption: handleOptionChange,
        selectedLabel,
        setSelectedLabel,
        selectRef,
        menuRef,
        menuWidth,
        withPortal,
        portalContainerId,
        scrollingItems,
        searchTerm,
        setSearchTerm,
        focusedIndex,
        setFocusedIndex,
        onChange
      }}
    >
      <div className={clsx(styles.select, className)} ref={selectRef} style={style}>
        <Input
          id={id}
          name={name}
          size={size}
          inputRef={inputRef}
          value={searchable && isOpen ? searchTerm : selectedLabel}
          onChange={e => searchable && setSearchTerm(e.target.value)}
          onKeyDown={handleKeyDown}
          label={label}
          placeholder={placeholder}
          disabled={disabled}
          readOnly={!searchable || !isOpen}
          color={color}
          onFocus={handleFocus}
          onBlur={handleBlur}
          colored={colored}
          icon={<ArrowButton isOpen={isOpen} color={color} disabled={disabled} toggleDropdown={toggleDropdown} />}
          className={clsx(styles.select__input, styles['input-helper'])}
          reset={reset}
          onReset={onReset}
          data-testid=""select-input""
        />
        <Options menuStyle={{ maxWidth: selectRef.current?.offsetWidth }}>
          {noOptions ? (
            <OptionItem value="""" label={noOptionsText} disabled>
              {noOptionsText}
            </OptionItem>
          ) : (
            filteredChildren
          )}
        </Options>
      </div>
    </SelectContext.Provider>
  );
};

export default SimpleSelect;
"
Types for component SimpleSelect subcomponents OptionItem types.ts,"import { ReactNode, CSSProperties } from 'react';

export interface IOptionItemProps {
  value: string | number;
  label: string;
  children?: ReactNode;
  disabled?: boolean;
  className?: string;
  style?: CSSProperties;
  isFocused?: boolean;
}
"
Types for component SimpleSelect subcomponents index.ts,"export { default as Options } from './Options';
export { default as OptionItem } from './OptionItem';
export { default as ArrowButton } from './ArrowButton';
"
Codes for component SimpleSelect _stories Stories.tsx,"import React, { useState } from 'react';

import Editor from '@components/_storybook/Stories/components/Editor';
import FigmaEmbed from '@components/_storybook/Stories/components/FigmaEmbed';
import Header from '@components/_storybook/Stories/components/Header';
import Properties from '@components/_storybook/Stories/components/Properties';
import Tests from '@components/_storybook/Stories/components/Tests';
import { Tabs } from '@components/index';

import styles from '@components/_storybook/Stories/Stories.module.scss';

import { argsTypes } from './argsTypes';

const SimpleSelectStories = (): JSX.Element => {
  const [activeTab, setActiveTab] = useState(0);

  const optionsExample = `const options = [
  { value: 'steel', label: 'High-Strength Low-Alloy Steel' },
  { value: 'aluminum', label: 'Aluminum' },
  { value: 'copper', label: 'Copper', disabled: true },
  { value: 'nickel', label: 'Nickel' },
  { value: 'zinc', label: 'Zinc' },
  { value: 'lead', label: 'Lead' },
  { value: 'tin', label: 'Tin' }
  ];`;

  const simpleSelectDefaultCode = `
  import { SimpleSelect, OptionItem } from '@nlmk/ds-2.0';
  import { useState } from 'react';

${optionsExample}

const App = () => {
  const [value, setValue] = useState('');
  return (
    <SimpleSelect value={value} onChange={setValue} label=""Одиночный выбор"">
      {options.map(({value, label, disabled}) => (
        <OptionItem key={value} value={value} label={label} disabled={disabled}>
          {label}
        </OptionItem>
      ))}
    </SimpleSelect>
  );
};
export default App;
`;

  const simpleSelectDisabledCode = `
  import { SimpleSelect, OptionItem } from '@nlmk/ds-2.0';
  import { useState } from 'react';

${optionsExample}

const App = () => {
  const [value, setValue] = useState('');
  return (
    <SimpleSelect value={value} onChange={setValue} label=""Disabled"" disabled>
      {options.map(({value, label, disabled}) => (
        <OptionItem key={value} value={value} label={label}>
          {label}
        </OptionItem>
      ))}
    </SimpleSelect>
  );
};
export default App;
`;

  const simpleSelectExtraCompactCode = `
  import { SimpleSelect, OptionItem } from '@nlmk/ds-2.0';
  import { useState } from 'react';

${optionsExample}

const App = () => {
  const [value, setValue] = useState('');
  return (
    <SimpleSelect value={value} onChange={setValue} label=""Размер xs"" size=""xs"">
      {options.map(({value, label, disabled}) => (
        <OptionItem key={value} value={value} label={label}>
          {label}
        </OptionItem>
      ))}
    </SimpleSelect>
  );
};
export default App;
`;

  const simpleSelectScrollingItemsCode = `
  import { SimpleSelect, OptionItem } from '@nlmk/ds-2.0';
  import { useState } from 'react';

${optionsExample}

const App = () => {
  const [value, setValue] = useState('');
  return (
    <SimpleSelect value={value} onChange={setValue} label=""Скролл"" scrollingItems={2}>
      {options.map(({value, label, disabled}) => (
        <OptionItem key={value} value={value} label={label}>
          {label}
        </OptionItem>
      ))}
    </SimpleSelect>
  );
};
export default App;
`;

  const simpleSelectSuccessCode = `
  import { SimpleSelect, OptionItem } from '@nlmk/ds-2.0';
  import { useState } from 'react';

${optionsExample}

const App = () => {
  const [value, setValue] = useState('');
  return (
    <SimpleSelect value={value} onChange={setValue} label=""Цвет success"" color=""success"">
      {options.map(({value, label, disabled}) => (
        <OptionItem key={value} value={value} label={label}>
          {label}
        </OptionItem>
      ))}
    </SimpleSelect>
  );
};
export default App;
`;

  const simpleSelectEmptyCode = `
  import { SimpleSelect } from '@nlmk/ds-2.0';
  import { useState } from 'react';

const App = () => {
  const [value, setValue] = useState('');
  return (
    <SimpleSelect value={value} onChange={setValue} label=""Пустой select"">
      {/* No options */}
    </SimpleSelect>
  );
};
export default App;
`;

  return (
    <div className={styles.wrapper}>
      <Header
        title=""SimpleSelect""
        description=""SimpleSelect позволяет пользователям выбирать один элемент из списка. Он поддерживает различные настройки и стили.""
        isStable
        codeLink=""https://github.com/nlmk-group/ds-2.0/tree/main/src/components/SimpleSelect""
        figmaLink=""https://www.figma.com/file/MSMqfqJrQNaqbLe4Ctkq7n/Design-System-2.0-NLMK-(beta)-(Community)?type=design&node-id=1039%3A29073&mode=design&t=awyt3Fzj1XS6th7v-1""
      />

      <div className={styles.tabs}>
        <Tabs>
          <Tabs.Tab label=""Разработчику"" active={0 === Number(activeTab)} onClick={() => setActiveTab(0)} />
          {/* <Tabs.Tab label=""Дизайнеру"" active={1 === Number(activeTab)} onClick={() => setActiveTab(1)} /> */}
          <Tabs.Tab label=""Тестирование"" active={2 === Number(activeTab)} onClick={() => setActiveTab(2)} />
        </Tabs>
      </div>

      {Number(activeTab) === 0 && (
        <>
          <Editor description=""Компонент SimpleSelect с одиночным выбором"" code={simpleSelectDefaultCode} />
          <Editor description=""SimpleSelect в состоянии disabled"" code={simpleSelectDisabledCode} />
          <Editor description=""Экстра компактный SimpleSelect"" code={simpleSelectExtraCompactCode} />
          <Editor description=""SimpleSelect с установленным скроллом"" code={simpleSelectScrollingItemsCode} />
          <Editor description=""SimpleSelect с цветом success"" code={simpleSelectSuccessCode} />
          <Editor height={200} description=""Пустой SimpleSelect"" code={simpleSelectEmptyCode} />
          <Properties argsTypes={argsTypes} />
        </>
      )}
      {Number(activeTab) === 1 && (
        <FigmaEmbed url=""https://www.figma.com/file/MSMqfqJrQNaqbLe4Ctkq7n/Design-System-2.0-NLMK-(beta)-(Community)?type=design&node-id=1039%3A29073&mode=design&t=awyt3Fzj1XS6th7v-1"" />
      )}
      {Number(activeTab) === 2 && <Tests componentName=""SimpleSelect"" />}
    </div>
  );
};

export default SimpleSelectStories;
"
Styles for component SimpleSelect SimpleSelect.module.scss,".select {
  position: relative;

  &__input {
    cursor: pointer;
  }
}

.input-helper {
  input {
    cursor: pointer;
    text-overflow: ellipsis;
  }
}
"
Types for component SimpleSelect _stories argsTypes.ts,"import { customInputColors, sizesMappingInput } from '@components/declaration';

export const argsTypes = {
  value: {
    description: 'Значение селекта',
    control: { type: 'text' }
  },
  onChange: {
    description: 'Обработчик изменения значения селекта',
    action: 'onChange'
  },
  id: {
    description: 'Идентификатор компонента',
    control: { type: 'text' }
  },
  portalContainerId: {
    description: 'id рутового контейнера для создания портала',
    control: { type: 'text' }
  },
  children: {
    description: 'Дочерние элементы селекта (опции меню)',
    control: { type: 'text' }
  },
  menuWidth: {
    description: 'Ширина меню селекта',
    control: { type: 'text' }
  },
  placeholder: {
    description: 'Плейсхолдер для инпута селекта',
    control: { type: 'text' }
  },
  label: {
    description: 'Лейбл инпута в селекте',
    control: { type: 'text' }
  },
  withPortal: {
    description: 'Флаг, указывающий, должно ли меню рендериться в портале',
    control: { type: 'boolean' }
  },
  disabled: {
    description: 'Флаг доступности селекта',
    control: { type: 'boolean' }
  },
  onBlur: {
    description: 'Обработчик закрытия меню options',
    action: 'onBlur'
  },
  onFocus: {
    description: 'Обработчик открытия меню options',
    action: 'onFocus'
  },
  color: {
    description: 'Цвет компонента',
    table: {
      defaultValue: {
        summary: customInputColors.default
      }
    },
    options: Object.values(customInputColors),
    control: { type: 'select' }
  },
  size: {
    description: 'Размер компонента',
    table: {
      defaultValue: {
        summary: sizesMappingInput.m
      }
    },
    options: Object.values(sizesMappingInput),
    control: { type: 'select' }
  },
  scrollingItems: {
    description: 'Количество элементов после которого включается прокрутка',
    control: { type: 'number' }
  },
  noOptionsText: {
    description: 'Текст, отображаемый когда нет доступных опций',
    control: { type: 'text' }
  },
  searchable: {
    description: 'Флаг, указывающий, доступен ли поиск',
    control: { type: 'boolean' }
  },
  name: {
    description: 'Name элемента, используется для ссылки на элемент',
    control: { type: 'text' }
  },
  onEnterPress: {
    description: 'Обработчик нажатия клавиши Enter',
    action: 'onEnterPress'
  },
  style: {
    description: 'Кастомные стили для компонента',
    control: { type: 'object' }
  },
  className: {
    description: 'Добавление самостоятельного CSS класса',
    control: { type: 'text' }
  },
  colored: {
    description: 'Условие применения стилей подсветки',
    table: {
      defaultValue: {
        summary: 'false'
      },
      type: {
        summary: 'boolean'
      }
    },
    control: { type: 'boolean' }
  },
  onReset: {
    description: 'Callback, который будет вызван при клике по иконке сброса',
    action: 'изменено value'
  },
  reset: {
    description: 'Булевое значение для показа иконки сброса',
    control: { type: 'boolean' },
    table: {
      defaultValue: {
        summary: false
      }
    }
  }
};
"
Types for component SimpleSelect constants.ts,"export const ScrollingItemsDefault = 6;
export const MenuMarginBottom = 8;
"
Types for component SimpleSelect context.ts,"import { createContext, RefObject } from 'react';

import { ScrollingItemsDefault } from './constants';

interface SelectContextProps {
  /**
   * Флаг, указывающий, открыто ли меню
   */
  isOpen: boolean;

  /**
   * Функция для установки состояния открытия меню
   */
  setIsOpen: (isOpen: boolean) => void;

  /**
   * Выбранная опция в селекте
   */
  selectedOption: string | number | undefined;

  /**
   * Функция для установки выбранной опции
   */
  setSelectedOption: (option: string | number) => void;

  /**
   * Обработчик изменения значения селекта
   */
  onChange?: (value: string | number) => void;

  /**
   * Реф для корневого элемента селекта, нужен в том числе чтобы ClickAwayListener корректно работал с withPortal
   */
  selectRef: RefObject<HTMLDivElement>;

  /**
   * Реф для элемента меню, нужен в том числе чтобы ClickAwayListener корректно работал с withPortal
   */
  menuRef: RefObject<HTMLDivElement>;

  /**
   * Ширина меню селекта
   */
  menuWidth?: string;

  /**
   * Флаг, указывающий, должно ли меню рендериться в портале
   */
  withPortal?: boolean;

  /**
   * id рутового контейнера для создания портала
   */
  portalContainerId: string;

  /**
   * Количество элементов после которого включается прокрутка.
   */
  scrollingItems: number;

  /**
   * Выбранная опция отображаемого в инпуте значения
   */
  selectedLabel: string;

  /**
   * Функция для установки отображаемого в инпуте значения
   */
  setSelectedLabel: (label: string) => void;

  /**
   * Текущий поисковый запрос
   */
  searchTerm: string;

  /**
   * Функция для установки поискового запроса
   */
  setSearchTerm: (term: string) => void;

  /**
   * Индекс текущего элемента в фокусе при навигации с клавиатуры
   */
  focusedIndex: number;

  /**
   * Функция для установки индекса элемента в фокусе
   */
  setFocusedIndex: (index: number) => void;
}

export const SelectContext = createContext<SelectContextProps>({
  isOpen: false,
  setIsOpen: () => {},
  selectedOption: undefined,
  setSelectedOption: () => {},
  onChange: undefined,
  selectedLabel: '',
  setSelectedLabel: () => {},
  selectRef: { current: null },
  menuRef: { current: null },
  menuWidth: undefined,
  withPortal: false,
  portalContainerId: 'root',
  scrollingItems: ScrollingItemsDefault,
  searchTerm: '',
  setSearchTerm: () => {},
  focusedIndex: -1,
  setFocusedIndex: () => {}
});
"
Types for component SimpleSelect types.ts,"import { CSSProperties, ReactNode } from 'react';

import { customInputColors, sizesMappingInput } from '@components/declaration';

type TSize = `${sizesMappingInput}`;

export interface ISelectProps {
  /**
   * Значение селекта
   */
  value?: string | number;

  /**
   * Обработчик изменения значения селекта
   */
  onChange?: (value: string | number) => void;

  /**
   * Идентификатор компонента.
   */
  id?: string;

  /**
   * id рутового контейнера для создания портала
   */
  portalContainerId?: string;

  /**
   * Дочерние элементы селекта (опции меню)
   */
  children: ReactNode;

  /**
   * Ширина меню селекта
   */
  menuWidth?: string;

  /**
   * Плейсхолдер для инпута селекта
   */
  placeholder?: string;

  /**
   * Лейбл инпута в селекте.
   */
  label?: string;

  /**
   * Флаг, указывающий, должно ли меню рендериться в портале
   */
  withPortal?: boolean;

  /**
   * Флаг доступности селекта.
   */
  disabled?: boolean;

  /**
   * Обработчик закрытия меню options.
   */
  onBlur?: () => void;

  /**
   * Обработчик открытия меню options.
   */
  onFocus?: () => void;

  /**
   * Цвет компонента.
   */
  color?: customInputColors;

  /**
   * Размер компонента.
   */
  size?: TSize;

  /**
   * Количество элементов после которого включается прокрутка.
   */
  scrollingItems?: number;

  /**
   * Текст, отображаемый когда нет доступных опций
   */
  noOptionsText?: string;

  /**
   * Флаг, указывающий, доступен ли поиск
   */
  searchable?: boolean;

  /**
   * name определяет имя элемента, используется для ссылки на элемент
   */
  name?: string;

  /**
   * Обработчик нажатия клавиши Enter
   */
  onEnterPress?: (item: string | number) => void;

  /**
   * Кастомные стили для компонента.
   */
  style?: CSSProperties;

  /**
   * Добавление самостоятельного CSS класса
   */
  className?: string;

  /**
   * Флаг применения цветовых стилей
   */
  colored?: boolean;

  /**
   * Флаг наличия кнопки сброса
   */
  reset?: boolean;

  /**
   * Обработчик сброса значения
   */
  onReset?: () => void;
}
"
Codes for component SkeletonLoader _stories Stories.tsx,"import React, { useState } from 'react';

import Editor from '@components/_storybook/Stories/components/Editor';
import Header from '@components/_storybook/Stories/components/Header';
import Properties from '@components/_storybook/Stories/components/Properties';
import Tests from '@components/_storybook/Stories/components/Tests';
import '@components/_storybook/Stories/styles.css';
import { Tabs } from '@components/index';

import styles from '@components/_storybook/Stories/Stories.module.scss';

import argsTypes from './argsTypes';

const Stories = (): JSX.Element => {
  const [activeTab, setActiveTab] = useState(0);

  return (
    <div className={styles.wrapper}>
      <Header
        title=""SkeletonLoader""
        description=""Skeleton Loader — это статический/анимированный элемент для информации, которая все еще загружается.""
        isStable
        codeLink=""https://github.com/nlmk-group/ds-2.0/tree/main/src/components/SkeletonLoader""
      />

      <div className={styles.tabs}>
        <Tabs>
          <Tabs.Tab label=""Разработчику"" active={0 === Number(activeTab)} onClick={() => setActiveTab(0)} />
          <Tabs.Tab label=""Тестирование"" active={2 === Number(activeTab)} onClick={() => setActiveTab(2)} />
        </Tabs>
      </div>

      {Number(activeTab) == 0 && (
        <>
          <Editor
            height={200}
            description=""Компонент лоадера по умолчанию""
            code={`import { SkeletonLoader } from '@nlmk/ds-2.0';

export default  App = () => (
  <>
    <SkeletonLoader width=""350px"" />
  </>
)
`}
          />

          <Editor
            description=""Компонент лоадера с множественными блоками""
            code={`import { SkeletonLoader } from '@nlmk/ds-2.0';

export default  App = () => (
  <>
    <div>
      <SkeletonLoader width=""40px"" count={1} height=""50px"" />
      <SkeletonLoader width=""310px"" count={1} height=""50px"" />
    </div>
    <SkeletonLoader width=""115px"" count={3} height=""50px"" />
    <SkeletonLoader width=""177px"" count={2} height=""50px"" />
  </>
)
`}
          />

          <Properties argsTypes={argsTypes} />
        </>
      )}
      {Number(activeTab) == 2 && <Tests componentName=""SkeletonLoader"" />}
    </div>
  );
};

export default Stories;
"
Types for component SkeletonLoader types.ts,"export interface ISkeletonLoading {
  id?: string;
  className?: string;
  count?: number;
  width?: string;
  height?: string;
}
"
Types for component SkeletonLoader _stories argsTypes.ts,"const argsTypes = {
  id: {
    description: 'Индентификатор лоадера',
    control: { type: 'text' }
  },
  className: {
    description: 'Класс стиля лоадера',
    control: { type: 'text' },
    table: {
      defaultValue: {
        summary: 'skeleton-loading'
      }
    }
  },
  count: {
    description: 'Количество лоадеров на странице',
    control: { type: 'number', default: 1 },
    table: {
      defaultValue: {
        summary: 1
      }
    }
  },
  width: {
    description: 'Ширина лоадера',
    control: { type: 'string' },
    table: {
      defaultValue: {
        summary: '200px'
      }
    }
  },
  height: {
    description: 'Длина лоадера',
    control: { type: 'string' },
    table: {
      defaultValue: {
        summary: '100px'
      }
    }
  }
};

export default argsTypes;
"
Codes for component SkeletonLoader index.tsx,"import React, { FC } from 'react';

import clsx from 'clsx';

import { ISkeletonLoading } from './types';

import styles from './SkeletonLoader.module.scss';

const SkeletonLoader: FC<ISkeletonLoading> = ({ id, className, count = 1, width = '200px', height = '100px' }) => {
  return (
    <span id={id} className={clsx('skeleton-loading', className)}>
      {Array.from({ length: count }).map((_, i) => (
        <span className={styles['loading-wrapper']} key={i} style={{ width, height }}>
          &zwnj;
        </span>
      ))}
    </span>
  );
};

export default SkeletonLoader;
"
Styles for component SkeletonLoader SkeletonLoader.module.scss,"$bgPositionWidth: 200px;
$margin: 10px;

@keyframes animation-skeleton-loader {
  from {
    background-position: (-$bgPositionWidth) 0;
  }

  to {
    background-position: calc($bgPositionWidth + 100%) 0;
  }
}

.loading-wrapper {
  display: inline-block;
  line-height: 1;
  margin-bottom: $margin;
  background-color: var(--text-grey-50);
  background-image: linear-gradient(90deg, var(--text-grey-50), var(--text-grey-100), var(--text-grey-50));
  background-size: $bgPositionWidth 100%;
  background-repeat: no-repeat;
  border-radius: 4px;
  cursor: wait;
  animation: animation-skeleton-loader 1.2s ease-in-out infinite;
}
"
Styles for component SlideToggle SlideToggle.module.scss,".slide-toggle-wrapper {
  position: relative;
}

.title-container {
  display: flex;
  align-items: center;
}

.title-wrapper {
  display: flex;
  align-items: center;
  cursor: pointer;

  &-default {
    height: var(--40-size);
  }

  &-compact {
    height: var(--30-size);
  }
}

.icon-wrapper {
  transition: 0.3s ease-in-out;

  &-default {
    height: var(--24-size);
  }

  &-compact {
    height: var(--16-size);
  }

  &-show {
    transform: rotate(90deg);
  }
}

.label-wrapper {
  margin-left: var(--8-space);
}

.content-wrapper {
  margin-top: var(--16-space);
  padding: var(--40-size);
  border-radius: var(--4-border);
  background-color: var(--steel-20);

  &-shadow {
    box-shadow: 0 6px 18px rgba(0, 0, 0, 0.05);
  }
}
"
Codes for component SlideToggle _stories Stories.tsx,"import React, { useState } from 'react';

import Editor from '@components/_storybook/Stories/components/Editor';
import FigmaEmbed from '@components/_storybook/Stories/components/FigmaEmbed';
import Header from '@components/_storybook/Stories/components/Header';
import Properties from '@components/_storybook/Stories/components/Properties';
import Tests from '@components/_storybook/Stories/components/Tests';
import '@components/_storybook/Stories/styles.css';
import { Tabs } from '@components/index';

import styles from '@components/_storybook/Stories/Stories.module.scss';

import argsTypes from './argsTypes';

const FIGMA_LINK =
  'https://www.figma.com/file/3dTe0kYNFqQO3VnjJ10jyv/DS2.0-Input?type=design&node-id=212-40498&mode=design&t=e3eMVFD5FRwzvUZH-0';

const Stories = (): JSX.Element => {
  const [activeTab, setActiveTab] = useState(0);

  const slideToggle = `import { SlideToggle } from '@nlmk/ds-2.0';
import { useState } from 'react';

const App = () => {
  const [show, setShow] = useState(false);

  return (
    <SlideToggle
      title={'Заголовок'}
      isShow={show}
      onToggle={() => setShow(!show)}
    >
      Lorem ipsum dolor sit amet, consectetur adipiscing elit...
    </SlideToggle>
  );
};
export default App;`;

  return (
    <div className={styles.wrapper}>
      <Header
        title=""SlideToggle""
        description=""SlideToggle — элемент, который позволяет отображать/скрывать элемент.""
        isStable
        codeLink=""https://github.com/nlmk-group/ds-2.0/tree/main/src/components/SlideToggle""
        figmaLink={FIGMA_LINK}
      />

      <div className={styles.tabs}>
        <Tabs>
          <Tabs.Tab label=""Разработчику"" active={0 === Number(activeTab)} onClick={() => setActiveTab(0)} />
          {/* <Tabs.Tab label=""Дизайнеру"" active={1 === Number(activeTab)} onClick={() => setActiveTab(1)} /> */}
          <Tabs.Tab label=""Тестирование"" active={2 === Number(activeTab)} onClick={() => setActiveTab(2)} />
        </Tabs>
      </div>

      {Number(activeTab) == 0 && (
        <>
          <Editor height={350} description=""Пример использование компонента SlideToggle"" code={slideToggle} />
          <Properties argsTypes={argsTypes} />
        </>
      )}
      {Number(activeTab) == 1 && <FigmaEmbed url={FIGMA_LINK} />}
      {Number(activeTab) == 2 && <Tests componentName=""SlideToggle"" />}
    </div>
  );
};

export default Stories;
"
Types for component index.ts,"/** Компоненты */
export { default as AttachFiles } from './AttachFiles';
export { default as File } from './AttachFiles/subcomponents/File';
export { default as Accordion } from './Accordion';
export { default as Alert } from './Alert';
export { default as Avatar } from './Avatar';
export { default as Input } from './Input';
export { default as ErrorPage } from './ErrorPage';
export { default as List } from './List';
export { default as Link } from './Link';
export { default as ListItem } from './ListItem';
export { default as Select } from './Select';
export { default as PseudoInput } from './PseudoInput';
export { default as Radio } from './Radio';
export { default as Box } from './Box';
export { default as Grid } from './Grid';
export { default as Button } from './Button';
export { default as Badge } from './Badge';
export { default as Breadcrumbs } from './Breadcrumbs';
export { default as Card } from './Card';
export { default as Chip } from './Chip';
export { default as DragAndDrop } from './DragAndDrop';
export { default as Checkbox } from './Checkbox';
export { default as Typography } from './Typography';
export { default as Tooltip } from './Tooltip';
export { default as Icon } from './Icon';
export { default as IconContainer } from './Icon/subcomponent/IconContainer';
export { default as ThemeSwitcher } from './ThemeSwitcher';
export { default as DatePicker } from './DatePicker';
export { default as DateTime } from './DateTime';
export { default as InputRange } from './InputRange';
export { default as InputSlider } from './InputSlider';
export { default as SkeletonLoader } from './SkeletonLoader';
export { default as Spinner } from './Spinner';
export { default as Tabs } from './Tabs';
export { default as ClickAwayListener } from './ClickAwayListener';
export { default as ProgressBar } from './ProgressBar';
export { default as Divider } from './Divider';
export { default as Snackbar } from './Snackbar';
export { default as Header } from './Header';
export { default as Switch } from './Switch';
export { default as TimePicker } from './TimePicker';
export { default as ToggleButtonGroup } from './ToggleButtonGroup';
export { default as SegmentButtonGroup } from './SegmentButtonGroup';
export { default as ImagePicture } from './ImagePicture';
export { default as Modal } from './Modal';
export { default as Sidebar } from './Sidebar';
export { default as SlideToggle } from './SlideToggle';
export { default as MenuItem } from './Sidebar';
export { default as SubmenuItem } from './Sidebar';
export { default as Scrollbar } from './Scrollbar';
export { default as Drawer } from './Drawer';
export { default as Dropdown } from './Dropdown';
export { default as DropdownMenuItem } from './Dropdown/subcomponents/DropdownMenuItem';
export { default as SimpleSelect } from './SimpleSelect';
export { default as OptionItem } from './SimpleSelect/subcomponents/OptionItem';
export { default as Stepper } from './Stepper';
export * from './ThemeSwitcher';
export * from './Icon/IconsDirectory';

/** Хуки */
export * from './Theme/hooks';
"
Types for component SlideToggle types.ts,"import { PropsWithChildren, ReactNode } from 'react';

import { ESizeMapping } from './enum';

export type TSize = `${ESizeMapping}`;

export interface ISlideToggleProps extends PropsWithChildren {
  title: string | JSX.Element;
  after?: ReactNode;
  isShow: boolean;
  onToggle?: () => void;
  toggleContainerShadow?: boolean;
  className?: string;
  size?: TSize;
  iconWrapperId?: string;
  titleWrapperId?: string;
  afterWrapperId?: string;
  contentWrapperId?: string;
}
"
Types for component SlideToggle enum.ts,"/**
 * @type {enum} sizeMapping
 */

export enum ESizeMapping {
  compact = 'compact',
  default = 'default'
}
"
Types for component SlideToggle _stories argsTypes.ts,"import { ESizeMapping } from '../enum';

const argsTypes = {
  isShow: {
    description: 'Флаг-условие отображение текстового окна',
    table: {
      defaultValue: {
        summary: 'false'
      }
    }
  },
  onToggle: {
    description: 'Функция раскрытия / закрытия текстового окна'
  },
  size: {
    description: 'Размер компонента',
    table: {
      defaultValue: {
        summary: ESizeMapping.default
      }
    },
    options: Object.values(ESizeMapping),
    control: { type: 'select' }
  },
  toggleContainerShadow: {
    description: 'Необязательное свойство. Флаг-условие отображение тени текстового окна',
    table: {
      defaultValue: {
        summary: 'false'
      }
    }
  },
  children: {
    description: 'Компонент отображаемый при раскрытии компонента',
    control: { type: 'object' }
  },
  title: {
    description: 'Заголовок компонента, может быть строкой или JSX элементом',
    control: { type: 'text' }
  },
  after: {
    description: 'Дополнительный блок справа от заголовка, может быть любым ReactNode',
    control: { type: 'object' }
  },
  iconWrapperId: {
    description: 'ID для элемента обёртки иконки',
    control: { type: 'text' }
  },
  titleWrapperId: {
    description: 'ID для элемента обёртки заголовка',
    control: { type: 'text' }
  },
  afterWrapperId: {
    description: 'ID для элемента обёртки дополнительного блока действий',
    control: { type: 'text' }
  },
  contentWrapperId: {
    description: 'ID для элемента обёртки контента',
    control: { type: 'text' }
  },
  className: {
    description: 'CSS класс для настройки стилей компонента',
    control: { type: 'text' }
  }
};

export default argsTypes;
"
Codes for component SlideToggle index.tsx,"import React, { FC, useMemo } from 'react';

import { generateUUID } from '@components/declaration';
import { ESizeMapping } from '@components/SlideToggle/enum';
import clsx from 'clsx';

import { ISlideToggleProps } from './types';

import styles from './SlideToggle.module.scss';

import { IconStackCollapsed16, IconStackCollapsed24, Typography } from '..';

const SlideToggle: FC<ISlideToggleProps> = ({
  title,
  children,
  className,
  onToggle = () => {},
  isShow,
  size = ESizeMapping.default,
  after,
  toggleContainerShadow = false,
  iconWrapperId,
  titleWrapperId,
  afterWrapperId,
  contentWrapperId
}) => {
  const renderIcon = () => {
    return size === ESizeMapping.default ? (
      <IconStackCollapsed24 htmlColor=""var(--ac-subtitle-default)"" />
    ) : (
      <IconStackCollapsed16 htmlColor=""var(--ac-subtitle-default)"" />
    );
  };

  const renderTitle = () => {
    const titleId = useMemo(() => `titleId-${titleWrapperId || generateUUID()}`, [titleWrapperId]);
    const actionId = useMemo(() => `titleId-${afterWrapperId || generateUUID()}`, [afterWrapperId]);

    return (
      <div className={styles['title-container']} id={titleId}>
        {typeof title === 'string' ? (
          <Typography
            className={styles['label-wrapper']}
            variant={size === ESizeMapping.default ? 'Heading3' : 'Body1-Bold'}
            color=""primary""
          >
            {title}
          </Typography>
        ) : (
          <div className={styles['label-wrapper']}>{title}</div>
        )}
        {after && (
          <div className={styles['action-block']} id={actionId}>
            {after}
          </div>
        )}
      </div>
    );
  };

  const iconId = useMemo(() => `titleId-${iconWrapperId || generateUUID()}`, [iconWrapperId]);
  const contentId = useMemo(() => `titleId-${contentWrapperId || generateUUID()}`, [contentWrapperId]);

  return (
    <div className={clsx(styles['slide-toggle-wrapper'], className)} data-testid=""slide-toggle-wrapper"">
      <div className={clsx(styles['title-wrapper'], styles[`title-wrapper-${size}`])} onClick={onToggle}>
        <div
          className={clsx(
            styles['icon-wrapper'],
            styles[`icon-wrapper-${size}`],
            isShow && styles['icon-wrapper-show']
          )}
          id={iconId}
        >
          {renderIcon()}
        </div>
        {renderTitle()}
      </div>
      {isShow && (
        <div
          id={contentId}
          className={clsx(styles['content-wrapper'], toggleContainerShadow && styles['content-wrapper-shadow'])}
        >
          {children}
        </div>
      )}
    </div>
  );
};

export default SlideToggle;
"
Styles for component Snackbar Snackbar.module.scss,"@mixin content-helper($bg, $color) {
  background: $bg;
  color: $color;
}

.snackbar {
  position: relative;
  display: flex;
  min-height: 56px;
  box-sizing: border-box;
  max-width: 100%;
  padding: 8px 8px 8px 16px;
  align-items: center;
  gap: 8px;
  border-radius: 4px;
  box-shadow: 0 2px 4px 0 rgba(0, 0, 0, 0.1);

  &-outline:before {
    content: '';
    display: block;
    position: absolute;
    top: 0;
    left: -1px;
    width: 6px;
    height: 100%;
    border-radius: 4px 0 0 4px;
  }
}

.snackbar-outline {
  background: var(--steel-10);
}

.snackbar-dark {
  @include content-helper(var(--spectrum-sky-50), var(--unique-white));
}

.snackbar-green {
  @include content-helper(var(--spectrum-green-50), var(--unique-white));
}

.snackbar-red {
  @include content-helper(var(--spectrum-red-50), var(--unique-white));
}

.snackbar-orange {
  @include content-helper(var(--spectrum-yellow-50), var(--unique-white));
}

.snackbar-white {
  @include content-helper(var(--spectrum-sky-10), var(--steel-90));
}

.snackbar-grey {
  @include content-helper(var(--steel-30), var(--steel-90));
}

.snackbar-light-green {
  @include content-helper(var(--spectrum-green-10), var(--steel-90));
}

.snackbar-pink {
  @include content-helper(var(--spectrum-red-10), var(--steel-90));
}

.indicator-white:before {
  @include content-helper(var(--spectrum-sky-10), var(--steel-90));
}

.indicator-green:before {
  @include content-helper(var(--spectrum-green-50), var(--steel-90));
}

.indicator-red:before {
  @include content-helper(var(--spectrum-red-50), var(--steel-90));
}

.indicator-grey:before {
  @include content-helper(var(--steel-30), var(--steel-90));
}

.indicator-dark:before {
  @include content-helper(var(--spectrum-sky-50), var(--steel-90));
}

.indicator-light-green:before {
  @include content-helper(var(--spectrum-green-10), var(--steel-90));
}

.indicator-pink:before {
  @include content-helper(var(--spectrum-red-10), var(--steel-90));
}

.indicator-orange:before {
  @include content-helper(var(--spectrum-yellow-50), var(--steel-90));
}

.actions {
  display: flex;
  gap: 8px;

  .close {
    &:hover {
      background-color: unset;
    }

    &-light {
      path {
        fill: var(--unique-white);
      }
    }

    &-dark {
      path {
        fill: var(--steel-70);
      }
    }

    &-outline {
      path {
        fill: var(--steel-90);
      }
    }
  }

  .action {
    &:hover {
      background-color: unset;
    }

    &-light {
      color: var(--unique-white);
    }

    &-dark {
      color: var(--unique-bluewhite);
    }
  }
}

.text {
  &-light {
    color: var(--unique-white);
  }

  &-dark {
    color: var(--steel-90);
  }
}
"
Codes for component Snackbar index.tsx,"import React, { CSSProperties, FC, ReactNode, useEffect, useState } from 'react';

import { variantsMapping } from '@components/declaration';
import { Button, IconCloseOutlined24, Typography } from '@components/index';
import { clsx } from 'clsx';

import { ISnackbarProps } from './types';

import styles from './Snackbar.module.scss';

import { ESnackbarColors } from './enums';

/**
 * Компонент Snackbar для отображения кратковременных сообщений
 * @component
 * @param {Object} props - Свойства компонента
 * @param {ESnackbarColors} [props.color=ESnackbarColors.dark] - Цвет фона Snackbar
 * @param {variantsMapping} [props.variant=variantsMapping.solid] - Вариант отображения Snackbar
 * @param {() => void} [props.close] - Функция закрытия Snackbar
 * @param {() => void} [props.actionButton] - Функция, вызываемая при нажатии на кнопку действия
 * @param {string} [props.actionText=''] - Текст кнопки действия
 * @param {ReactNode} props.children - Содержимое Snackbar
 * @param {number} [props.autoHideDuration=0] - Время автоматического скрытия в миллисекундах
 * @param {string} [props.className] - Дополнительный CSS класс
 * @param {CSSProperties} [props.style] - Inline стили для компонента
 * @returns {JSX.Element | null} Компонент Snackbar
 */

const Snackbar: FC<ISnackbarProps> = ({
  actionButton,
  actionText = '',
  children,
  close,
  color = ESnackbarColors.dark,
  variant = variantsMapping.solid,
  autoHideDuration = 0,
  className,
  style
}: {
  color?: `${ESnackbarColors}`;
  variant?: `${variantsMapping}`;
  close?: () => void;
  actionButton?: () => void;
  actionText?: string;
  children: ReactNode;
  autoHideDuration?: number;
  className?: string;
  style?: CSSProperties;
}): JSX.Element | null => {
  const [isVisible, setIsVisible] = useState(true);
  const isOutline = variant === variantsMapping.outline;
  const isDarkVariant = [
    ESnackbarColors.dark,
    ESnackbarColors.green,
    ESnackbarColors.red,
    ESnackbarColors.orange
  ].includes(color as ESnackbarColors);

  useEffect(() => {
    if (autoHideDuration > 0) {
      const timer = setTimeout(() => {
        setIsVisible(false);
        if (close) close();
      }, autoHideDuration);
      return () => clearTimeout(timer);
    }
  }, [autoHideDuration, close]);

  if (!isVisible) return null;

  return (
    <div
      data-testid=""SNACKBAR_WRAPPER""
      className={clsx(
        styles.snackbar,
        isOutline ? styles['snackbar-outline'] : styles[`snackbar-${color}`],
        styles[`snackbar-${variant}`],
        isOutline && styles[`indicator-${color}`],
        className
      )}
      style={style}
    >
      <Typography
        variant=""Body1-Medium""
        className={clsx(isOutline || !isDarkVariant ? styles['text-dark'] : styles['text-light'])}
      >
        {children}
      </Typography>
      <div className={styles.actions}>
        {actionButton && (
          <Button
            data-testid=""SNACKBAR_ACTION""
            variant=""primary""
            fill=""clear""
            size=""m""
            onClick={actionButton}
            className={clsx(
              styles.action,
              isOutline || !isDarkVariant ? styles['action-dark'] : styles['action-light']
            )}
          >
            <Typography variant=""Body1-Bold"">{actionText.length > 0 ? actionText : 'Посмотреть'}</Typography>
          </Button>
        )}
        {close && (
          <Button
            data-testid=""SNACKBAR_CLOSE""
            variant=""primary""
            fill=""clear""
            size=""m""
            onClick={close}
            className={clsx(
              styles.close,
              !isDarkVariant ? styles['close-dark'] : styles['close-light'],
              isOutline && styles['close-outline']
            )}
            iconButton={<IconCloseOutlined24 />}
          />
        )}
      </div>
    </div>
  );
};

export default Snackbar;
"
Types for component Snackbar _stories constants.ts,"export const DEFAULT_SNACKBAR = 'Snackbar по умолчанию';
export const SNACKBAR_CLOSE = 'Snackbar с кнопкой закрыть';
export const SNACKBAR_ACTION = 'Snackbar с кнопкой действия';
export const SNACKBAR_COLOR = 'Варианты цвета Snackbar';
export const SNACKBAR_ICON = 'Snackbar с иконкой';
export const SNACKBAR_CUSTOM_ICON = 'Snackbar с кастомной иконкой';
export const SNACKBAR_OPACITY = 'Snackbar с разной прозрачностью';
"
Types for component Snackbar types.ts,"import { CSSProperties, ReactNode } from 'react';

import { variantsMapping } from '@components/declaration';

import { ESnackbarColors } from './enums';

export interface ISnackbarProps {
  /** Цвет фона Snackbar */
  color?: ESnackbarColors;

  /** Вариант отображения Snackbar */
  variant?: keyof typeof variantsMapping;

  /** Функция, вызываемая при закрытии Snackbar */
  close?: () => void;

  /** Функция, вызываемая при нажатии на кнопку действия */
  actionButton?: () => void;

  /** Текст кнопки действия */
  actionText?: string;

  /** Содержимое Snackbar */
  children: ReactNode;

  /** Время в миллисекундах, через которое Snackbar автоматически скроется */
  autoHideDuration?: number;

  /** Дополнительный CSS класс */
  className?: string;

  /** Inline стили для компонента */
  style?: CSSProperties;
}
"
Codes for component Snackbar _stories Stories.tsx,"import React, { useState } from 'react';

import Editor from '@components/_storybook/Stories/components/Editor';
import FigmaEmbed from '@components/_storybook/Stories/components/FigmaEmbed';
import Header from '@components/_storybook/Stories/components/Header';
import Properties from '@components/_storybook/Stories/components/Properties';
import Tests from '@components/_storybook/Stories/components/Tests';
import '@components/_storybook/Stories/styles.css';
import { Tabs } from '@components/index';

import styles from '@components/_storybook/Stories/Stories.module.scss';

import { ESnackbarColors } from '../enums';
import argsTypes from './argsTypes';
import {
  DEFAULT_SNACKBAR,
  SNACKBAR_ACTION,
  SNACKBAR_CLOSE,
  SNACKBAR_COLOR,
  SNACKBAR_CUSTOM_ICON,
  SNACKBAR_ICON,
  SNACKBAR_OPACITY
} from './constants';

enum TabIds {
  dev,
  design,
  tests
}

const COMPONENT_NAME = 'Snackbar';
const FIGMA_URL =
  'https://www.figma.com/file/MSMqfqJrQNaqbLe4Ctkq7n/Design-System-2.0-NLMK-(beta)-(Community)?type=design&node-id=1039%3A29074&mode=design&t=awyt3Fzj1XS6th7v-1';

const Stories = (): JSX.Element => {
  const [activeTab, setActiveTab] = useState<TabIds>(TabIds.dev);

  const isActive = (tab: TabIds) => {
    return activeTab === tab;
  };

  return (
    <div className={styles.wrapper}>
      <Header
        title={COMPONENT_NAME}
        description=""Snackbar - это компонент, который предоставляет краткое уведомление или сообщение о событии.""
        isStable
        codeLink={`https://github.com/nlmk-group/ds-2.0/tree/main/src/components/${COMPONENT_NAME}`}
        figmaLink={FIGMA_URL}
      />

      <div className={styles.tabs}>
        <Tabs>
          <Tabs.Tab label=""Разработчику"" active={isActive(TabIds.dev)} onClick={() => setActiveTab(TabIds.dev)} />
          {/* <Tabs.Tab label=""Дизайнеру"" active={isActive(TabIds.design)} onClick={() => setActiveTab(TabIds.design)} /> */}
          <Tabs.Tab label=""Тестирование"" active={isActive(TabIds.tests)} onClick={() => setActiveTab(TabIds.tests)} />
        </Tabs>
      </div>

      {activeTab == TabIds.dev && (
        <>
          <Editor
            description={DEFAULT_SNACKBAR}
            height={150}
            code={`import { Snackbar } from '@nlmk/ds-2.0';

export default App = () => (
  <Snackbar> ${DEFAULT_SNACKBAR} </Snackbar>
)
              `}
          />
          <Editor
            height={150}
            description={SNACKBAR_CLOSE}
            code={`import { Snackbar } from '@nlmk/ds-2.0';

export default App = () => (
  <Snackbar close={() => {}}> ${SNACKBAR_CLOSE} </Snackbar>
)
              `}
          />
          <Editor
            height={200}
            description={SNACKBAR_ACTION}
            code={`import { Snackbar } from '@nlmk/ds-2.0';

export default App = () => (
  <Snackbar actionButton={() => {}}> ${SNACKBAR_ACTION} </Snackbar>
)
              `}
          />
          <Editor
            description={SNACKBAR_COLOR}
            code={`import { Snackbar } from '@nlmk/ds-2.0';

const colors = [${Object.values(ESnackbarColors)
          .map(c => `""${c}""`)
          .join(', ')}]
export default App = () => (
  <>
    {colors.map(color => {
      return <Snackbar key={color} color={color}> ${SNACKBAR_COLOR} </Snackbar>
    })}
  </>
)
              `}
          />
          <Editor
            description={SNACKBAR_ICON}
            code={`import { Snackbar } from '@nlmk/ds-2.0';

const colors = [${Object.values(ESnackbarColors)
          .map(c => `""${c}""`)
          .join(', ')}];

export default App = () => (
  <>
    {colors.map(color => {
      return <Snackbar key={color} color={color} withIcon> ${SNACKBAR_ICON} </Snackbar>
    })}
  </>
)
              `}
          />
          <Editor
            description={SNACKBAR_CUSTOM_ICON}
            code={`import { Snackbar, Icon } from '@nlmk/ds-2.0';

export default App = () => (
  <Snackbar
    withIcon
    color=""dark""
    customIcon={(
      <Icon
        name='IconEducationOutlined24'
        containerSize={24}
        htmlColor=""red""
      />
    )}
  > ${SNACKBAR_CUSTOM_ICON} </Snackbar>
)
              `}
          />
          <Editor
            description={SNACKBAR_OPACITY}
            code={`import { Snackbar } from '@nlmk/ds-2.0';

export default App = () => (
  <>
  <Snackbar
    bgOpacity={100}
  >
    ${SNACKBAR_OPACITY}
  </Snackbar>
  <Snackbar
    bgOpacity={70}
    >
    ${SNACKBAR_OPACITY}
  </Snackbar>
  <Snackbar
    bgOpacity={50}
  >
    ${SNACKBAR_OPACITY}
  </Snackbar>
  <Snackbar
    bgOpacity={20}
  >
    ${SNACKBAR_OPACITY}
  </Snackbar>
</>
)
              `}
          />

          <Properties argsTypes={argsTypes} />
        </>
      )}
      {activeTab == TabIds.design && <FigmaEmbed url={FIGMA_URL} />}
      {activeTab == TabIds.tests && <Tests componentName={COMPONENT_NAME} />}
    </div>
  );
};

export default Stories;
"
Types for component Snackbar _stories argsTypes.ts,"import { variantsMapping } from '@components/declaration';

import { ESnackbarColors } from '../enums';

const argsTypes = {
  children: {
    description: 'Содержимое, которое будет отображаться на Snackbar, например текст.',
    control: { type: 'text' }
  },
  color: {
    description: 'Необязательное свойство. Цвет фона Snackbar. Значение по умолчанию - серый.',
    table: {
      defaultValue: {
        summary: ESnackbarColors.dark
      },
      type: {
        summary: Object.values(ESnackbarColors).join(' | ')
      }
    },
    options: Object.values(ESnackbarColors),
    control: { type: 'select' }
  },
  variant: {
    description: 'Вариант Snackbar',
    table: {
      defaultValue: {
        summary: variantsMapping.solid
      },
      type: {
        summary: Object.values(variantsMapping).join(' | ')
      }
    },
    options: Object.values(variantsMapping),
    control: { type: 'select' }
  },
  close: {
    description:
      'Необязательное свойство. Функция, которая будет вызываться при клике на кнопку закрытия. Если не предоставлено, кнопка закрытия не будет отображаться.',
    control: { type: 'boolean' }
  },
  actionButton: {
    description:
      'Необязательное свойство. Функция, которая будет вызываться при клике на кнопку действия. Если не предоставлено, кнопка действия не будет отображаться.',
    control: { type: 'boolean' }
  },
  actionText: {
    description:
      'Необязательное свойство. Текст для кнопки действия. Если не предоставлено, по умолчанию будет использован текст ""Посмотреть"".',
    table: {
      defaultValue: {
        summary: 'Посмотреть'
      },
      type: {
        summary: 'string'
      }
    },
    control: { type: 'text' }
  },
  autoHideDuration: {
    description:
      'Необязательное свойство. Время в миллисекундах, через которое Snackbar автоматически скроется. Если установлено в 0 или не указано, Snackbar не будет автоматически скрываться.',
    table: {
      defaultValue: {
        summary: 0
      },
      type: {
        summary: 'number'
      }
    },
    control: { type: 'number' }
  }
};

export default argsTypes;
"
Types for component Snackbar enums.ts,"/**
 * @type {enum} ESnackbarColors
 */

export enum ESnackbarColors {
  dark = 'dark',
  green = 'green',
  red = 'red',
  orange = 'orange',
  grey = 'grey',
  white = 'white',
  'light-green' = 'light-green',
  pink = 'pink'
}
"
Codes for component Spinner _stories Stories.tsx,"import React, { useState } from 'react';

import Editor from '@components/_storybook/Stories/components/Editor';
import FigmaEmbed from '@components/_storybook/Stories/components/FigmaEmbed';
import Header from '@components/_storybook/Stories/components/Header';
import Properties from '@components/_storybook/Stories/components/Properties';
import Tests from '@components/_storybook/Stories/components/Tests';
import '@components/_storybook/Stories/styles.css';
import { Tabs } from '@components/index';

import styles from '@components/_storybook/Stories/Stories.module.scss';

import argsTypes from './argsTypes';

const Stories = (): JSX.Element => {
  const [activeTab, setActiveTab] = useState(0);

  return (
    <div className={styles.wrapper}>
      <Header
        title=""Spinner""
        description=""Spinner — это компонент который используется в качестве индикатора загрузки.""
        isStable
        codeLink=""https://github.com/nlmk-group/ds-2.0/tree/main/src/components/InputRange""
        figmaLink=""https://www.figma.com/file/aTZAtKI8GYQvLF5bOK84ZH/DS2.0-Loader-%26-Overlay?node-id=2%3A10&mode=dev""
      />

      <div className={styles.tabs}>
        <Tabs>
          <Tabs.Tab label=""Разработчику"" active={0 === Number(activeTab)} onClick={() => setActiveTab(0)} />
          {/* <Tabs.Tab label=""Дизайнеру"" active={1 === Number(activeTab)} onClick={() => setActiveTab(1)} /> */}
          <Tabs.Tab label=""Тестирование"" active={2 === Number(activeTab)} onClick={() => setActiveTab(2)} />
        </Tabs>
      </div>

      {Number(activeTab) == 0 && (
        <>
          <Editor
            height={200}
            description=""Spinner состояние по умолчанию""
            code={`import { Spinner } from '@nlmk/ds-2.0';

export default  App = () => (
  <>
    <Spinner />
  </>
)
`}
          />

          <Editor
            height={250}
            description=""Spinner размера medium и large""
            code={`import { Spinner } from '@nlmk/ds-2.0';

export default  App = () => (
  <>
    <Spinner size=""m"" />
    <div/>
    <Spinner size=""l"" />
  </>
)
`}
          />

          <Editor
            height={200}
            description=""Spinner с разными цветами""
            code={`import { Spinner } from '@nlmk/ds-2.0';

export default  App = () => (
  <>
    <Spinner bgColor=""#ff6e40"" color=""#1e3d59"" />
  </>
)
`}
          />

          <Editor
            description=""Spinner где Icon, как children (JSX.Element)""
            code={`import { Spinner, IconAutoRenewReloadOutlined24 } from '@nlmk/ds-2.0';

export default  App = () => (
  <>
    <Spinner>
      <IconAutoRenewReloadOutlined24 />
    </Spinner>
  </>
)
`}
          />

          <Properties argsTypes={argsTypes} />
        </>
      )}
      {Number(activeTab) == 1 && (
        <FigmaEmbed url=""https://www.figma.com/file/aTZAtKI8GYQvLF5bOK84ZH/DS2.0-Loader-%26-Overlay?type=design&node-id=2-10&mode=design&t=VPWVvr1xxRraTKwa-0"" />
      )}
      {Number(activeTab) == 2 && <Tests componentName=""Spinner"" />}
    </div>
  );
};

export default Stories;
"
Types for component Spinner types.ts,"export enum sizes {
  EXTRA_EXTRA_LARGE = 'xxl',
  EXTRA_LARGE = 'xl',
  LARGE = 'l',
  MEDIUM = 'm'
}

export interface ISpinner {
  size?: `${sizes}`;
  color?: string;
  bgColor?: string;
  percent?: number;
  children?: JSX.Element;
}
"
Types for component Spinner _stories argsTypes.ts,"const argsTypes = {
  size: {
    description: 'Размер спиннера <b>m | l | xl | xxl</b>',
    control: { type: 'select', options: ['m', 'l', 'xl', 'xxl'] },
    table: {
      defaultValue: {
        summary: 'l'
      }
    }
  },
  color: {
    description: 'Цвет основного элемента спиннера',
    control: { type: 'text' },
    table: {
      defaultValue: {
        summary: 'var(--primary-blue-600)'
      }
    }
  },
  bgColor: {
    description: 'Цвет подложки элемента спиннера',
    control: { type: 'text' },
    table: {
      defaultValue: {
        summary: 'var(--text-grey-100)'
      }
    }
  },
  children: {
    description: 'React children элемент, может быть только компонентом Icon',
    control: { type: 'object' }
  }
};

export default argsTypes;
"
Codes for component Spinner index.tsx,"import React, { FC } from 'react';

import { ISpinner, sizes } from './types';

import styles from './Spinner.module.scss';
import { Typography } from '@components/index'

const spinnerSizes: { [key: string]: number } = { xxl: 96, xl: 56, l: 40, m: 32 };
const defaultSize = spinnerSizes[sizes.LARGE];

const Spinner: FC<ISpinner> = ({
  size = defaultSize,
  bgColor,
  color,
  percent = null,
  children
}) => {
  const spinnerSize = spinnerSizes[size] ?? defaultSize;
  const isIcon = children?.type.name.includes('Icon');
  const typographyOptionHelper = () => {
    switch(size) {
      case sizes.EXTRA_EXTRA_LARGE:
        return 'Heading3';
      case sizes.EXTRA_LARGE:
        return 'Body1-Bold';
      case sizes.LARGE:
        return 'Caption-Bold';
      case sizes.MEDIUM:
        return 'Caption-Bold';
      default:
        return 'Caption-Bold';
    }
  }
  return (
    <div className={styles['spinner-wrapper']}>
      {percent !== null && (
        <div
          className={styles['percent-wrapper']}
          style={{ color }}
        >
          <Typography variant={typographyOptionHelper()}>
            {percent < 100 ? percent : 99}%
          </Typography>
        </div>
      )}
      {!children || !isIcon ? (
        <>
          <span
            className={styles.bg}
            style={{
              width: spinnerSize,
              height: spinnerSize,
              color: bgColor
            }}
            role=""progressbar""
          >
            <svg viewBox=""22 22 44 44"">
              <circle cx=""44"" cy=""44"" r=""20"" fill=""none"" strokeWidth=""4""></circle>
            </svg>
          </span>
          <span className={styles.loader} style={{ width: spinnerSize, height: spinnerSize, color }} role=""progressbar"">
            <svg viewBox=""22 22 44 44"">
              <circle cx=""44"" cy=""44"" r=""20"" fill=""none"" strokeWidth=""4""></circle>
            </svg>
          </span>
        </>
      ) : (
        <div className={styles.icon}>{children}</div>
      )}
    </div>
  );
};

export default Spinner;
"
Styles for component Spinner Spinner.module.scss,"@keyframes animation {
  0% {
    -webkit-transform: rotate(0deg);
    -moz-transform: rotate(0deg);
    -ms-transform: rotate(0deg);
    transform: rotate(0deg);
  }

  100% {
    -webkit-transform: rotate(360deg);
    -moz-transform: rotate(360deg);
    -ms-transform: rotate(360deg);
    transform: rotate(360deg);
  }
}

.spinner-wrapper {
  position: relative;
}

.bg {
  display: inline-block;
  transition: transform 300ms cubic-bezier(0.4, 0, 0.2, 1) 0ms;
  color: var(--ac-loader-stroke-bg);
  transform: rotate(-90deg);
  svg {
    display: block;
    circle {
      stroke: currentColor;
      transition: stroke-dashoffset 300ms cubic-bezier(0.4, 0, 0.2, 1) 0ms;
    }
  }
}

@mixin animationBlock {
  display: inline-block;
  animation: 1.2s linear 0s infinite normal none running animation;
}

.icon {
  aspect-ratio: 1 / 1;
  min-height: 16px;
  @include animationBlock;
}

.loader {
  @include animationBlock;
  color: var(--ac-loader-stroke-progress);
  position: absolute;
  left: 0;
  svg {
    display: block;
    circle {
      stroke-linecap: round;
      stroke: currentColor;
      stroke-dasharray: 80px, 200px;
      stroke-dashoffset: 0;
    }
  }
}

.percent-wrapper {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  color: var(--ac-loader-amount-text);
}
"
Types for component Stepper _stories argsTypes.ts,"import { EStepState } from '../subcomponents/Step/types';

export const argsTypes = {
  className: {
    description: 'Пользовательский класс для настройки стилей Stepper.',
    control: { type: 'string' }
  },
  state: {
    description: 'Отвечает за состояние Stepper.',
    table: {
      defaultValue: {
        summary: EStepState.filled
      },
      type: {
        summary: Object.values(EStepState).join(' | ')
      }
    },
    options: Object.keys(EStepState),
    control: { type: 'select' }
  },
  stepName: {
    description: 'Название шага',
    table: {
      defaultValue: {
        summary: 'undefined'
      },
      type: {
        summary: 'string'
      }
    },
    control: { type: 'text' }
  },
  index: {
    description: 'Индекс шага (отображается + 1)',
    table: {
      defaultValue: {
        summary: 'undefined'
      },
      type: {
        summary: 'number'
      }
    },
    control: { type: 'number' }
  },
  showStep: {
    description: 'На последнем элементе выключается, чтобы не было лишнего Divider',
    table: {
      defaultValue: {
        summary: 'undefined'
      },
      type: {
        summary: 'boolean'
      }
    },
    control: { type: 'boolean' }
  },
  onClick: {
    description: 'Вызывается при клике на Stepper. Возвращает состояние (state) и индекс элемента',
    control: { type: 'string' }
  }
};

export default argsTypes;
"
Styles for component Stepper subcomponents Step Step.module.scss,".step-button {
  & > span {
    display: flex;
    align-items: center;
    flex-shrink: 0;
    gap: 2px;
  }
  .step-name {
    padding: 0 4px;
  }
}
"
Types for component Stepper subcomponents Step helpers.ts,"import { EBadgeColors } from '@components/Badge/enums';

import { EStepState } from './types';

export const StepStateToBadgeColor: Record<EStepState, EBadgeColors> = {
  [EStepState.filled]: EBadgeColors.success,
  [EStepState.focused]: EBadgeColors.primary,
  [EStepState.inProgress]: EBadgeColors.secondary,
  [EStepState.notFilled]: EBadgeColors['light-grey'],
  [EStepState.disabled]: EBadgeColors['light-grey']
};
"
Types for component Stepper subcomponents Step types.ts,"import { EBadgeColors } from '@components/Badge/enums';

export enum EStepState {
  filled = 'filled',
  focused = 'focused',
  inProgress = 'inProgress',
  notFilled = 'notFilled',
  disabled = 'disabled'
}

type StepperColorsType = {
  [key in EStepState]: EBadgeColors;
};

export const StepperColors: StepperColorsType = {
  [EStepState.filled]: EBadgeColors.success,
  [EStepState.focused]: EBadgeColors.primary,
  [EStepState.inProgress]: EBadgeColors.secondary,
  [EStepState.notFilled]: EBadgeColors.grey,
  [EStepState.disabled]: EBadgeColors.grey
};

export interface IStepProps {
  stepName: string;
  index: number;
  state: `${EStepState}`;
}
"
Types for component Stepper types.ts,"import { EStepState } from './subcomponents/Step/types';

export interface IStepperProps {
  /**
   * Состояние шага.
   */
  state: `${EStepState}`;

  /**
   * Название шага.
   */
  stepName: string;

  /**
   * Дополнительный CSS класс.
   */
  className?: string;

  /**
   * Индекс шага.
   */
  index: number;

  /**
   * Показывать ли шаг.
   */
  showStep: boolean;

  /**
   * Обработчик клика по шагу.
   */
  onClick?: (value: { state: `${EStepState}`; index: number }) => void;
}
"
Codes for component Stepper index.tsx,"import React, { FC } from 'react';

import Box from '@components/Box';
import { Divider } from '@components/index';
import clsx from 'clsx';

import { Step } from './subcomponents/Step';

import { IStepperProps } from './types';

import styles from './Stepper.module.scss';

/**
 * Компонент Stepper для отображения последовательности шагов.
 *
 * @param {IStepperProps} props
 * @param {`${EStepState}`} props.state - Состояние шага.
 * @param {string} props.stepName - Название шага.
 * @param {boolean} props.showStep - Показывать ли шаг.
 * @param {string} [props.className] - Дополнительный CSS класс.
 * @param {number} props.index - Индекс шага.
 * @param {(value: { state: `${EStepState}`, index: number }) => void} [props.onClick] - Обработчик клика по шагу.
 */
const Stepper: FC<IStepperProps> = ({ state, stepName, showStep, className, index, onClick }) => {
  return (
    <Box
      className={clsx(className, state === 'disabled' && styles.disabled)}
      alignItems=""center""
      justifyContent=""center""
      gap={8}
      width={showStep ? '100%' : 'auto'}
      onClick={() => onClick && onClick({ state: state, index: index })}
      key={index}
    >
      <Step stepName={stepName} index={index} state={state} />
      {showStep && <Divider className={styles['divider-line']} />}
    </Box>
  );
};

export default Stepper;
"
Codes for component Stepper subcomponents Step index.tsx,"import React from 'react';

import { Badge, Button, Typography } from '@components/index';

import { IStepProps } from './types';

import styles from './Step.module.scss';

import { StepStateToBadgeColor } from './helpers';

/**
 * Компонент Step для отображения конкретного шага в Stepper'e.
 *
 * @param {IStepProps} props
 * @param {string} props.stepName - Название шага.
 * @param {number} props.index - Индекс шага.
 * @param {`${EStepState}`} props.state - Состояние шага.
 */
export const Step = ({ stepName, index, state }: IStepProps) => {
  return (
    <Button fill=""clear"" variant=""black"" className={styles['step-button']} size=""s"">
      <Badge color={StepStateToBadgeColor[state]}>{index + 1}</Badge>
      <Typography variant=""Body1-Bold"" className={styles['step-name']}>
        {stepName}
      </Typography>
    </Button>
  );
};
"
Styles for component Stepper Stepper.module.scss,".step-wrapper,
.divider-line {
  width: 100%;
}

.disabled {
  opacity: 0.5;
  pointer-events: none;
}
"
Codes for component Stepper _stories Stories.tsx,"import React, { useState } from 'react';

import Editor from '@components/_storybook/Stories/components/Editor';
import FigmaEmbed from '@components/_storybook/Stories/components/FigmaEmbed';
import Header from '@components/_storybook/Stories/components/Header';
import Properties from '@components/_storybook/Stories/components/Properties';
import Tests from '@components/_storybook/Stories/components/Tests';
import '@components/_storybook/Stories/styles.css';
import { Tabs, Typography } from '@components/index';

import styles from '@components/_storybook/Stories/Stories.module.scss';

import { argsTypes } from './argsTypes';

enum TabIds {
  dev,
  design,
  tests
}

const COMPONENT_NAME = 'Stepper';
const FIGMA_URL =
  'https://www.figma.com/design/byZZI6bYz2Iv2Jst7ycZ7M/Navigation-DS-3.0?node-id=1691-27062&t=I1IeUAVDniHLRdle-0';

const Stories = (): JSX.Element => {
  const [activeTab, setActiveTab] = useState<TabIds>(TabIds.dev);

  const isActive = (tab: TabIds) => {
    return activeTab === tab;
  };

  return (
    <div className={styles.wrapper}>
      <Header
        title={COMPONENT_NAME}
        description={
          'Компонент Stepper представляет из себя пользовательный компонент, который отображает текущий Step (с помощью компонента Badge), его название и линию - Divider. По нему можно кликнуть и получить его состояние и индекс.'
        }
        isStable
        codeLink={`https://github.com/nlmk-group/ds-2.0/tree/main/src/components/${COMPONENT_NAME}`}
        figmaLink={FIGMA_URL}
      />

      <div className={styles.tabs}>
        <Tabs>
          <Tabs.Tab label=""Разработчику"" active={isActive(TabIds.dev)} onClick={() => setActiveTab(TabIds.dev)} />
          {/* <Tabs.Tab label=""Дизайнеру"" active={isActive(TabIds.design)} onClick={() => setActiveTab(TabIds.design)} /> */}
          <Tabs.Tab label=""Тестирование"" active={isActive(TabIds.tests)} onClick={() => setActiveTab(TabIds.tests)} />
        </Tabs>
      </div>

      {activeTab == TabIds.dev && (
        <>
          <Editor
            height={420}
            description=""Stepper в состоянии filled""
            code={`import { Box, Stepper } from '@nlmk/ds-2.0';

const App = () => {
  const mockSteps = [{
    state: 'filled',
    stepName: 'Filled'
  }, {
    state: 'focused',
    stepName: 'Focused'
  }, {
    state: 'inProgress',
    stepName: 'In Progress'
  }];

  return (
        <Box flexDirection=""row"" width=""100%"" gap={16}>
          {mockSteps.map((step, i) => <Stepper key={i} state={step.state} index={i} showStep={i !== mockSteps.length - 1} stepName={step.stepName} />)}
        </Box>
    )
}

export default App;
              `}
          />

          <Properties argsTypes={argsTypes} />
        </>
      )}
      {activeTab == TabIds.design && <FigmaEmbed url={FIGMA_URL} />}
      {activeTab == TabIds.tests && (
        <Typography variant=""Heading4"" color=""primary"">
          <Tests componentName={COMPONENT_NAME} />
        </Typography>
      )}
    </div>
  );
};

export default Stories;
"
Types for component Switch _stories constants.ts,"export const DEFAULT_SWITCH = 'Switch по умолчанию';
export const SWITCH_WITH_LABEL = 'Switch с текстом';
export const DISABLED_SWITCH = 'Switch заблокированный';
export const SWITCH_WITH_ICONS = 'Switch с иконками';
"
Codes for component Switch index.tsx,"import React, { FC, MouseEvent } from 'react';

import Typography from '@components/Typography';
import { clsx } from 'clsx';

import { ISwitch } from './types';

import styles from './Switch.module.scss';

const Switch: FC<ISwitch> = ({
  className = '',
  checked = false,
  onChange,
  disabled = false,
  label = '',
  activeIcon = null,
  inactiveIcon = null
}) => {
  const handleOnChange = (e: MouseEvent<HTMLDivElement>) => {
    if (onChange && !disabled) {
      onChange(e, !checked);
    }
  };

  const getTrackStyle = () => {
    if (checked) {
      return disabled ? styles['track-active-disabled'] : styles['track-active'];
    }
    return disabled ? styles['track-inactive-disabled'] : styles['track-inactive'];
  };

  return (
    <div
      className={clsx(styles.wrapper, disabled && styles.disabled, className)}
      tabIndex={!disabled ? 0 : undefined}
      aria-checked={checked}
      aria-disabled={disabled}
      role=""switch""
      data-testid=""SWITCH_WRAPPER""
    >
      <div data-testid=""CONTROLLER"" className={styles.root} onClick={handleOnChange}>
        <div data-testid=""TRACK"" className={clsx(styles['track'], getTrackStyle())}>
          <div
            data-testid=""TOUCH""
            className={clsx(
              styles.touch,
              disabled && !checked && styles['touch-disabled'],
              checked ? styles.active : styles.inactive
            )}
          >
            <div className={styles['icon-wrapper']}>
              {checked && activeIcon !== null && activeIcon}
              {!checked && inactiveIcon !== null && inactiveIcon}
            </div>
          </div>
        </div>
        <div
          data-testid=""FOCUS""
          className={clsx(styles.focus, checked ? styles['focus-active'] : styles['focus-inactive'])}
        />
      </div>
      {label.length > 0 && (
        <label className={clsx(styles.label, disabled && styles['label-disabled'])} data-testid=""LABEL"">
          <input type=""checkbox"" onClick={handleOnChange} checked={checked} className={styles.checkbox} />
          <Typography variant=""Body1-Medium"">{label}</Typography>
        </label>
      )}
    </div>
  );
};

export default Switch;
"
Codes for component Switch _stories Stories.tsx,"import React, { useState } from 'react';

import Editor from '@components/_storybook/Stories/components/Editor';
import FigmaEmbed from '@components/_storybook/Stories/components/FigmaEmbed';
import Header from '@components/_storybook/Stories/components/Header';
import Properties from '@components/_storybook/Stories/components/Properties';
import Tests from '@components/_storybook/Stories/components/Tests';
import '@components/_storybook/Stories/styles.css';
import { Tabs } from '@components/index';

import styles from '@components/_storybook/Stories/Stories.module.scss';

import argsTypes from './argsTypes';
import { DEFAULT_SWITCH, DISABLED_SWITCH, SWITCH_WITH_ICONS, SWITCH_WITH_LABEL } from './constants';

enum TabIds {
  dev,
  design,
  tests
}

const COMPONENT_NAME = 'Switch';
const FIGMA_URL =
  'https://www.figma.com/file/MSMqfqJrQNaqbLe4Ctkq7n/Design-System-2.0-NLMK-(beta)-(Community)?type=design&node-id=1039%3A29075&mode=design&t=awyt3Fzj1XS6th7v-1';

const Stories = (): JSX.Element => {
  const [activeTab, setActiveTab] = useState<TabIds>(TabIds.dev);

  const isActive = (tab: TabIds) => {
    return activeTab === tab;
  };

  return (
    <div className={styles.wrapper}>
      <Header
        title={COMPONENT_NAME}
        description=""Switch - это компонент, который реализует функциональность переключателя, часто используемого в пользовательских интерфейсах для настройки параметров, таких как включение/выключение определенных функций приложения.""
        isStable
        codeLink={`https://github.com/nlmk-group/ds-2.0/tree/main/src/components/${COMPONENT_NAME}`}
        figmaLink={FIGMA_URL}
      />

      <div className={styles.tabs}>
        <Tabs>
          <Tabs.Tab label=""Разработчику"" active={isActive(TabIds.dev)} onClick={() => setActiveTab(TabIds.dev)} />
          {/* <Tabs.Tab label=""Дизайнеру"" active={isActive(TabIds.design)} onClick={() => setActiveTab(TabIds.design)} /> */}
          <Tabs.Tab label=""Тестирование"" active={isActive(TabIds.tests)} onClick={() => setActiveTab(TabIds.tests)} />
        </Tabs>
      </div>

      {activeTab == TabIds.dev && (
        <>
          <Editor
            description={DEFAULT_SWITCH}
            code={`import { useState } from 'react'
import { Switch } from '@nlmk/ds-2.0';

export default App = () => {
  const [isChecked, setIsChecked] = useState(true);

  return (
    <Switch
      checked={isChecked}
      onChange={() => setIsChecked(!isChecked)}
    />
  )
}
              `}
          />
          <Editor
            description={DISABLED_SWITCH}
            code={`import { Switch } from '@nlmk/ds-2.0';

export default App = () => {
  return (
    <Switch
      checked={false}
      onChange={() => {}}
      disabled
    />
  )
}
              `}
          />
          <Editor
            description={SWITCH_WITH_LABEL}
            code={`import { useState } from 'react'
import { Switch } from '@nlmk/ds-2.0';

export default App = () => {
  const [isChecked, setIsChecked] = useState(false);
  const [isSecondChecked, setIsSecondChecked] = useState(true);
  const [isThirdChecked, setIsThirdChecked] = useState(false);

  return (
    <>
      <Switch
        checked={isChecked}
        onChange={() => {
          setIsChecked(!isChecked);
        }}
        label={'Не активный Switch'}
      />
      <Switch
        checked={isSecondChecked}
        onChange={() => {
          setIsSecondChecked(!isSecondChecked);
        }}
        label={'Активный Switch'}
      />
      <Switch
        checked={isThirdChecked}
        onChange={() => {
          setIsThirdChecked(!isThirdChecked);
        }}
        label={'Заблокированный Switch'}
        disabled
      />
    </>
  )
}
              `}
          />
          <Editor
            description={SWITCH_WITH_ICONS}
            code={`import { useState } from 'react'
import { Switch, Icon } from '@nlmk/ds-2.0';

export default App = () => {
  const [isChecked, setIsChecked] = useState(false);

  return (
    <Switch
      checked={isChecked}
      onChange={() => {
        setIsChecked(!isChecked);
      }}
      activeIcon={(
        <Icon
          name='IconMetallalomScrapFilled16'
          containerSize={16}
          htmlColor={'var(--text-grey-100)'}
        />
      )}
      inactiveIcon={(
        <Icon
          name='IconMetallalomScrap16'
          containerSize={16}
          htmlColor={'var(--primary-blue-600)'}
        />
      )}
    />
  )
}
              `}
          />

          <Properties argsTypes={argsTypes} />
        </>
      )}
      {activeTab == TabIds.design && <FigmaEmbed url={FIGMA_URL} />}
      {activeTab == TabIds.tests && <Tests componentName={COMPONENT_NAME} />}
    </div>
  );
};

export default Stories;
"
Types for component Switch types.ts,"import { MouseEvent } from 'react';

export interface ISwitch {
  className?: string;
  checked: boolean;
  onChange: (event: MouseEvent<Element>, checked: boolean) => void;
  disabled?: boolean;
  label?: string;
  activeIcon?: JSX.Element;
  inactiveIcon?: JSX.Element;
}
"
Types for component Switch _stories argsTypes.ts,"const argsTypes = {
  className: {
    description: 'Пользовательский класс для настройки стилей Switch.',
    control: { type: 'string' }
  },
  checked: {
    description: 'Отвечает за состояние переключателя (включен/выключен).',
    control: { type: 'boolean' },
    table: {
      defaultValue: {
        summary: 'false'
      }
    }
  },
  onChange: {
    description: 'Вызывается при изменении состояния переключателя.',
    control: { type: 'boolean' }
  },
  label: {
    description: 'Текст, отображающийся рядом с переключателем.',
    table: {
      defaultValue: {
        summary: 'Произвольный текст'
      },
      type: {
        summary: 'string'
      }
    },
    control: { type: 'text' }
  },
  disabled: {
    description: 'Отключает функциональность переключателя.',
    control: { type: 'boolean' }
  },
  inactiveIcon: {
    description: 'Иконка в не активном состоянии',
    control: { type: 'string' }
  },
  activeIcon: {
    description: 'Иконка в активном состоянии',
    control: { type: 'string' }
  }
};

export default argsTypes;
"
Styles for component Switch Switch.module.scss,"$transition-time: 0.3s;
$--7-space: 7px;
$--32-size: 32px;
$track-width: 34px;

.wrapper {
  display: flex;
  gap: 5px;
  position: relative;
}

.checkbox {
  display: none;
}

.switch-input {
  position: absolute;
  transform: translateY(-50%);
  top: 50%;
  width: 0;
  height: 0;
  z-index: 1;
  opacity: 0;
  cursor: pointer;
}

.root {
  height: var(--30-size);
  display: flex;
  align-items: center;
  padding: var(--4-space) calc(var(--2-space) * 3) var(--4-space) var(--4-space);
  z-index: 0;
  position: relative;
  box-sizing: border-box;
  flex-shrink: 0;
  vertical-align: middle;
  cursor: pointer;

  &:hover {
    .focus {
      opacity: var(--8-opacity);
      position: absolute;
      height: $--32-size;
      width: $--32-size;
      border-radius: var(--circle-radius);
    }

    .focus-active {
      left: calc(var(--12-space) + 3px);
      background: var(--ac-switch-on-focused-focus);
    }

    .focus-inactive {
      right: calc(var(--12-space) + 3px);
      opacity: var(--100-opacity);
      background: var(--ac-switch-off-focused-focus);
    }
  }
}

.disabled {
  pointer-events: none;
}

.track {
  height: calc($--7-space * 2);
  width: $track-width;
  border-radius: $--7-space;
  z-index: 1;
}

.track-active {
  background-color: var(--ac-switch-on-normal-track);
}
.track-active-disabled {
  background-color: var(--ac-switch-on-disabled-track);
}
.track-inactive {
  background-color: var(--ac-switch-off-normal-track);
}
.track-inactive-disabled {
  background-color: var(--ac-switch-off-disabled-track);
}

.touch {
  z-index: 1;
  top: 5px;
  position: absolute;
  height: var(--20-size);
  width: var(--20-size);
  border-radius: var(--circle-radius);
  transition: background $transition-time;
}

.focus-wrapper {
  position: relative;
  z-index: -2;
}

.inactive {
  background-color: var(--ac-switch-off-normal-thumb);
  height: calc(var(--20-size) - 2px);
  width: calc(var(--20-size) - 2px);
  transform: translateX(-1px);
  transition: left 150ms cubic-bezier(0.4, 0, 0.2, 1) 0ms, transform 150ms cubic-bezier(0.4, 0, 0.2, 1) 0ms;
  border-radius: var(--circle-radius);
  border: var(--1-border) solid var(--ac-switch-off-normal-stroke);
}

.touch-disabled {
  background-color: var(--ac-switch-off-disabled-thumb);
}

.active {
  background-color: var(--ac-switch-on-normal-thumb);
  transform: translateX(17px);
  transition: right 150ms cubic-bezier(0.4, 0, 0.2, 1) 0ms, transform 150ms cubic-bezier(0.4, 0, 0.2, 1) 0ms;
}

.label {
  display: flex;
  align-items: center;
  cursor: pointer;
  color: var(--text-grey-900);
}

.label-disabled {
  color: var(--text-grey-500);
}

.icon-wrapper {
  height: 100%;
  width: 100%;
  display: flex;
  align-items: center;
  justify-content: center;
}

.custom-style {
  > span {
    border: 1px solid var(--success-green-600);
    border-radius: var(--8-radius);
    padding: var(--8-space) var(--12-space);
    > span {
      background-color: var(--success-green-200);

      > span {
        background-color: var(--success-green-600);

        > div:nth-child(2) {
          &:hover {
            background: var(--success-green-500);
          }
        }
      }
    }
  }
}
"
Styles for component Tabs components Tab Tab.module.scss,".tab-wrapper {
  display: flex;
  font-family: var(--font-families-pt-root-ui);
  align-items: center;
  gap: var(--4-space);
  width: fit-content;
  height: 44px;
  cursor: pointer;
  border-bottom: var(--2-border) solid transparent;
  transition: all 1.2ms ease-in-out;
  &:hover {
    > span {
      color: var(--primary-blue-600);
    }
    svg {
      path {
        fill: var(--primary-blue-600);
      }
    }
  }
}

.tooltip {
  height: var(--16-size);
  cursor: pointer;
  > div {
    button {
      padding: 0;
    }
  }
}

.text {
  color: var(--text-grey-900);
  &:hover {
    text-decoration: none;
  }
}

.tab-active {
  border-bottom: var(--2-border) solid var(--primary-blue-600);
  cursor: text;
  transition: all ease-in-out 0.4s;
  &:hover {
    > span {
      color: var(--text-grey-900);
    }
    svg {
      path {
        fill: var(--text-grey-500);
      }
    }
  }
  .text-active {
    cursor: text;
    &:hover {
      color: var(--text-grey-900);
    }
  }
}

.badge {
  margin-left: var(--8-space);
  pointer-events: none;
}
"
Codes for component Tabs _stories Stories.tsx,"import React, { useState } from 'react';

import Editor from '@components/_storybook/Stories/components/Editor';
import FigmaEmbed from '@components/_storybook/Stories/components/FigmaEmbed';
import Header from '@components/_storybook/Stories/components/Header';
import Tests from '@components/_storybook/Stories/components/Tests';
import '@components/_storybook/Stories/styles.css';
import { Tabs } from '@components/index';

import styles from '@components/_storybook/Stories/Stories.module.scss';

const FIGMA_LINK =
  'https://www.figma.com/file/byZZI6bYz2Iv2Jst7ycZ7M/DS2.0-Navigation?type=design&node-id=1-10&mode=design&t=Oysvun6QjDqPZDKX-0';

const Stories = (): JSX.Element => {
  const [activeTab, setActiveTab] = useState(0);

  return (
    <div className={styles.wrapper}>
      <Header
        title=""Tabs""
        description=""Компонент Tabs, который объединил в себя Tab элементы. Компонент использует подход compound pattern.""
        isStable
        codeLink=""https://github.com/nlmk-group/ds-2.0/tree/main/src/components/Tabs""
        figmaLink={FIGMA_LINK}
      />

      <div className={styles.tabs}>
        <Tabs>
          <Tabs.Tab label=""Разработчику"" active={0 === Number(activeTab)} onClick={() => setActiveTab(0)} />
          {/* <Tabs.Tab label=""Дизайнеру"" active={1 === Number(activeTab)} onClick={() => setActiveTab(1)} /> */}
          <Tabs.Tab label=""Тестирование"" active={2 === Number(activeTab)} onClick={() => setActiveTab(2)} />
        </Tabs>
      </div>

      {Number(activeTab) == 0 && (
        <>
          <Editor
            height={400}
            description=""Обычное использование компонента.""
            code={`import { Tabs, Typography, Box } from '@nlmk/ds-2.0';
import { useState } from 'react';

export default  App = () => {
  const [activeTab, setActiveTab] = useState(0);

  return (
    <>
      <Tabs>
        <Tabs.Tab
          label=""Входящие""
          active={0 === Number(activeTab)}
          onClick={() => setActiveTab(0)}
        />
        <Tabs.Tab
          label=""Мои папки""
          active={1 === Number(activeTab)}
          onClick={() => setActiveTab(1)}
        />
        <Tabs.Tab
          label=""Спам""
          active={2 === Number(activeTab)}
          onClick={() => setActiveTab(2)}
          badgeNumber=""91""
        >
          <Tabs.Tooltip description=""Сюда вы можете добавить текстподсказу для компонента"">
            <Tabs.Icon
              name=""IconInfo16""
              containerSize={16}
              htmlColor=""var(--text-grey-500)""
            />
          </Tabs.Tooltip>
        </Tabs.Tab>
        <Tabs.Tab
          label=""Черновики""
          active={3 === Number(activeTab)}
          onClick={() => setActiveTab(3)}
          badgeNumber=""2""
        />
      </Tabs>

      <Box width={350}>
        {Number(activeTab) == 0 && (
          <Typography variant=""Heading4"" color=""var(--steel-90)"">
            Входящие
          </Typography>
        )}
        {Number(activeTab) == 1 && (
          <Typography variant=""Heading4"" color=""var(--steel-90)"">
            Мои папки
          </Typography>
        )}
        {Number(activeTab) == 2 && (
          <Typography variant=""Heading4"" color=""var(--steel-90)"">
            Папка с спамом
          </Typography>
        )}
        {Number(activeTab) == 3 && (
          <Typography variant=""Heading4"" color=""var(--steel-90)"">
            Черновики
          </Typography>
        )}
      </Box>
    </>
  )
}
`}
          />
        </>
      )}
      {Number(activeTab) == 1 && <FigmaEmbed url={FIGMA_LINK} />}
      {Number(activeTab) == 2 && <Tests componentName=""Tabs"" />}
    </div>
  );
};

export default Stories;
"
Types for component Tabs components Tab types.ts,"import { PropsWithChildren } from 'react';

export interface ITab extends PropsWithChildren<any> {
  label: string;
  active?: boolean;
  badgeNumber?: string;
  children?: JSX.Element;
  className?: string;
}
"
Codes for component Tabs index.tsx,"import React, { FC } from 'react';

import { TIconProps } from '@components/Icon/types';
import { Icon, Tooltip } from '@components/index';
import { ITooltipProps } from '@components/Tooltip/types';
import clsx from 'clsx';

import Tab from './components/Tab';
import { ITab } from './components/Tab/types';

import { ITabs } from './types';

import styles from './Tabs.module.scss';

const Tabs: FC<ITabs> &
  Record<'Tab', FC<ITab>> &
  Record<'Tooltip', FC<ITooltipProps>> &
  Record<'Icon', FC<TIconProps>> = ({ children, className, scrollable }) => {
    return (
      <div className={clsx({[styles.scrollable]: scrollable})}>
        <div
          className={clsx(styles['tabs-wrapper'], { [styles['tabs-wrapper__scrollable']]: scrollable }, className)}>
          {children}
        </div>
      </div>
    )
  };

Tabs.Tab = Tab;
Tabs.Tooltip = Tooltip;
Tabs.Icon = Icon;

export default Tabs;
"
Types for component Tabs types.ts,"export interface ITabs {
  children: JSX.Element | JSX.Element[];
  className?: string;
  scrollable?: boolean;
}
"
Styles for component Tabs Tabs.module.scss,".scrollable,  {
  width: 100%;
  overflow-x: auto;
  -ms-overflow-style: none;
  scrollbar-width: none;

  &::-webkit-scrollbar {
    display: none;
  }
}

.tabs-wrapper {
  border-bottom: var(--1-border) solid var(--divider-divider);
  display: flex;
  align-items: center;
  gap: var(--24-space);
  width: fit-content;

  &__scrollable {
    width: max-content;
  }
}


"
Codes for component Tabs components Tab index.tsx,"import React, { FC } from 'react';

import { Badge, Typography } from '@components/index';
import { clsx } from 'clsx';
import _get from 'lodash/get';
import { ITab } from './types';
import styles from './Tab.module.scss';

const Tab: FC<ITab> = ({
  label,
  active,
  children,
  badgeNumber,
  className,
  ...props
}) => {
  const { name: toolTipName } = _get(children, 'type') ?? {};
  const { name: iconName } = _get(children, 'props.children.props') ?? {};
  return (
    <div
      className={clsx(
        styles['tab-wrapper'],
        active && styles['tab-active'],
        className
      )}
      {...props}
    >
      <span
        className={clsx(
          styles.text,
          active && styles['text-active']
        )}
      >
        <Typography variant={active ? 'Body1-Bold' : 'Body1-Medium'}>
          {label}
        </Typography>
      </span>
      {toolTipName === 'Tooltip' && iconName === 'IconInfoOutlined16' && (
        <div className={styles.tooltip}>{children}</div>
      )}
      {badgeNumber && (
        <div className={styles.badge}>
          <Badge color='secondary'>{badgeNumber}</Badge>
        </div>
      )}
    </div>
  );
};

export default Tab;
"
Codes for component TimePicker subcomponents TimeSelector index.tsx,"import React, { forwardRef, useCallback, useEffect, useMemo, useState } from 'react';

import { TimeType } from '@components/declaration/enums';
import { Typography } from '@components/index';
import { TimeUnits } from '@components/TimePicker/helpers';
import clsx from 'clsx';
import { set } from 'date-fns';

import { ITimeSelectorProps } from './types';

import styles from './TimeSelector.module.scss';

import MeasureUnit from '../MeasureUnit';

const TimeSelector = forwardRef<HTMLDivElement, ITimeSelectorProps>(
  (
    {
      selectedTime,
      onChange,
      value,
      innerValue,
      disabled,
      isTimeWithSecondsType,
      enabledHourFrom,
      enabledHourTo,
      enabledMinuteFrom,
      enabledMinuteTo,
      ...props
    },
    ref
  ) => {
    const enabledHours = useMemo(() => {
      const start = enabledHourFrom ? enabledHourFrom(innerValue) : 0;
      const end = enabledHourTo ? enabledHourTo(innerValue) : 23;
      return Array.from({ length: (end || 23) - (start || 0) + 1 }, (_, i) => i + (start || 0));
    }, [enabledHourFrom, enabledHourTo, innerValue]);

    const enabledMinutes = useMemo(() => {
      const start = enabledMinuteFrom ? enabledMinuteFrom(innerValue) : 0;
      const end = enabledMinuteTo ? enabledMinuteTo(innerValue) : 59;
      return Array.from({ length: (end || 59) - (start || 0) + 1 }, (_, i) => i + (start || 0));
    }, [enabledMinuteFrom, enabledMinuteTo, innerValue]);

    const handleTimeClick = useCallback(
      (type: TimeType, value: number) => {
        if (selectedTime && onChange) {
          const updatedTime = set(selectedTime, { [type]: value });
          onChange(updatedTime);
        }
      },
      [onChange, selectedTime]
    );

    const [hoursContainerRef, setHoursContainerRef] = useState<null | HTMLDivElement>(null);
    const [minutesContainerRef, setMinutesContainerRef] = useState<null | HTMLDivElement>(null);
    const [secondsContainerRef, setSecondsContainerRef] = useState<null | HTMLDivElement>(null);

    useEffect(() => {
      if (value) {
        hoursContainerRef?.scrollTo(0, value.getHours() * 40);
        minutesContainerRef?.scrollTo(0, value.getMinutes() * 40);
        secondsContainerRef?.scrollTo(0, value.getSeconds() * 40);
      }
    }, [value, hoursContainerRef, minutesContainerRef, secondsContainerRef]);

    return (
      <div
        ref={ref}
        className={clsx(styles.selector, { [styles['selector-with-seconds']]: isTimeWithSecondsType })}
        {...props}
      >
        <div className={styles['selector-column']} ref={setHoursContainerRef}>
          <div className={styles['selector-column-title']}>
            <Typography variant=""Body1-Medium"" color=""var(--steel-70)"">
              {TimeUnits.hh}
            </Typography>
          </div>
          {enabledHours.map(hour => (
            <MeasureUnit
              key={hour}
              disabled={disabled}
              selected={selectedTime?.getHours() === hour}
              onClick={() => handleTimeClick(TimeType.HOURS, hour)}
            >
              {hour.toString().padStart(2, '0')}
            </MeasureUnit>
          ))}
        </div>
        <div className={styles['selector-column']} ref={setMinutesContainerRef}>
          <div className={styles['selector-column-title']}>
            <Typography variant=""Body1-Medium"" color=""var(--steel-70)"">
              {TimeUnits.mm}
            </Typography>
          </div>
          {enabledMinutes.map(minute => (
            <MeasureUnit
              key={minute}
              disabled={disabled}
              selected={selectedTime?.getMinutes() === minute}
              onClick={() => handleTimeClick(TimeType.MINUTES, minute)}
            >
              {minute.toString().padStart(2, '0')}
            </MeasureUnit>
          ))}
        </div>
        {isTimeWithSecondsType && (
          <div className={styles['selector-column']} ref={setSecondsContainerRef}>
            <Typography variant=""Body1-Medium"" className={styles['selector-column-title']}>
              {TimeUnits.ss}
            </Typography>
            {Array.from({ length: 60 }, (_, i) => i).map(second => (
              <MeasureUnit
                key={second}
                disabled={disabled}
                selected={selectedTime?.getSeconds() === second}
                onClick={() => handleTimeClick(TimeType.SECONDS, second)}
              >
                {second.toString().padStart(2, '0')}
              </MeasureUnit>
            ))}
          </div>
        )}
      </div>
    );
  }
);

export default TimeSelector;
"
Codes for component TimePicker subcomponents TimePickerInput index.tsx,"import React, { ChangeEvent, forwardRef, KeyboardEvent, useCallback, useEffect, useMemo, useState } from 'react';

import { IconScheduleTimeWatchOutlined24, Input } from '@components/index';
import InputMaskCorrect from '@components/InputMaskCorrect';
import {
  timeFormat,
  timeMask,
  timeWithSecondsFormat,
  timeWithSecondsMask
} from '@components/TimePicker/helpers';
import clsx from 'clsx';
import { format, isAfter, isValid, parse, set } from 'date-fns';
import { range } from 'lodash';

import { ITimePickerInputProps } from './types';

import styles from './TimePickerInput.module.scss';

const TimePickerInput = forwardRef<HTMLInputElement | null, ITimePickerInputProps>(
  (
    {
      className,
      disabled,
      onFocus,
      onBlur,
      onEnterKeyDown,
      onTabKeyDown,
      value,
      enabledHourFrom,
      enabledHourTo,
      enabledMinuteFrom,
      enabledMinuteTo,
      // eslint-disable-next-line @typescript-eslint/no-unused-vars
      onChange,
      isTimeType,
      isTimeWithSecondsType,
      isTimePeriodType,
      isTimePeriodWithSecondsType,
      colored,
      isOpenOnFocus,
      withIcon,
      withPicker,
      valueFrom,
      valueTo,
      label = '',
      reset,
      onReset,
      ...props
    },
    ref
  ) => {
    const [innerMaskedValue, setInnerMaskedValue] = useState('');
    const [focused, setFocused] = useState(false);
    const withPeriod = useMemo(
      () => isTimePeriodWithSecondsType || isTimePeriodType,
      [isTimePeriodType, isTimePeriodWithSecondsType]
    );

    const handleFocus = () => {
      setFocused(true);
      if (onFocus && isOpenOnFocus) {
        onFocus();
      }
    };

    const handleBlur = () => {
      setFocused(false);
      if (onBlur) {
        const newDate = computeNewDate();
        if (Array.isArray(newDate)) {
          onBlur(newDate[0], newDate[1]);
        } else {
          onBlur(newDate);
        }
      }
    };

    const handleChange = (e: ChangeEvent<HTMLInputElement>) => {
      const newValue = e.target.value;
      setInnerMaskedValue(newValue);
    };

    const handleKeyDown = (e: KeyboardEvent<HTMLInputElement | HTMLTextAreaElement>) => {
      if (e.key === 'Tab' && onTabKeyDown) {
        const newDate = computeNewDate();
        if (Array.isArray(newDate)) {
          onTabKeyDown(newDate[0], newDate[1]);
        } else {
          onTabKeyDown(newDate);
        }
      }
      if (e.key === 'Enter' && onEnterKeyDown) {
        const newDate = computeNewDate();
        if (Array.isArray(newDate)) {
          onEnterKeyDown(newDate[0], newDate[1]);
        } else {
          onEnterKeyDown(newDate);
        }
      }
    };

    useEffect(() => {
      if (!withPeriod) {
        if (!value) {
          setInnerMaskedValue('');
          return;
        }
        setInnerMaskedValue(format(value, isTimeWithSecondsType ? timeWithSecondsFormat : timeFormat));
        return;
      }
      if (withPeriod) {
        if (!valueFrom && !valueTo) {
          setInnerMaskedValue('');
          return;
        }
        const formattedValueFrom = valueFrom
          ? format(valueFrom, isTimePeriodWithSecondsType ? timeWithSecondsFormat : timeFormat)
          : '';
        const formattedValueTo = valueTo
          ? format(valueTo, isTimePeriodWithSecondsType ? timeWithSecondsFormat : timeFormat)
          : '';
        setInnerMaskedValue(`${formattedValueFrom} — ${formattedValueTo}`);
      }
    }, [isTimeType, value, isTimeWithSecondsType, valueFrom, valueTo, isTimePeriodType]);

    const mask = useMemo(() => {
      if (withPeriod) {
        return isTimePeriodWithSecondsType
          ? `${timeWithSecondsMask} — ${timeWithSecondsMask}`
          : `${timeMask} — ${timeMask}`;
      }
      return isTimeWithSecondsType ? timeWithSecondsMask : timeMask;
    }, [focused, isTimeType, isTimeWithSecondsType]);

    const icon = useMemo(() => {
      return withIcon ? (
        <div
          onClick={() => {
            if (withPicker) {
              onFocus?.();
            }
          }}
          className={clsx(styles.clock, !withPicker && styles.cursor)}
        >
          <IconScheduleTimeWatchOutlined24 />
        </div>
      ) : null;
    }, [onFocus, withIcon, withPicker]);

    const isValueMatchesTheMask = (mask: string, value: string) => mask.replace(/9/gi, '_') === value;

    const computeNewDate = useCallback((): Date | null | (Date | null)[] => {
      const currentDate = new Date();
      const hourFrom = enabledHourFrom ? Number(enabledHourFrom(currentDate)) : 0;
      const hourTo = enabledHourTo ? Number(enabledHourTo(currentDate)) : 23;
      const minuteFrom = enabledMinuteFrom ? Number(enabledMinuteFrom(currentDate)) : 0;
      const minuteTo = enabledMinuteTo ? Number(enabledMinuteTo(currentDate)) : 59;

      const enabledHoursRange = range(hourFrom, hourTo + 1);
      const enabledMinutesRange = range(minuteFrom, minuteTo + 1);

      const makeEnabledTimeRangeDate = (date: Date) => {
        const isEnabledHour = enabledHoursRange.includes(date.getHours());
        const isEnabledMinute = enabledMinutesRange.includes(date.getMinutes());
        return set(date, {
          hours: isEnabledHour ? date.getHours() : enabledHoursRange[0],
          minutes: isEnabledMinute ? date.getMinutes() : enabledMinutesRange[0]
        });
      };

      try {
        if (withPeriod) {
          const timeParts = innerMaskedValue.split(' — ');
          const times = timeParts.map(time =>
            time ? parse(time, isTimePeriodWithSecondsType ? timeWithSecondsFormat : timeFormat, currentDate) : null
          );
          const enabledTimes = times.map(time => (time ? makeEnabledTimeRangeDate(time) : null));
          if (enabledTimes.some(isValid)) {
            if (enabledTimes[0] && enabledTimes[1] && isAfter(enabledTimes[0], enabledTimes[1])) {
              return [enabledTimes[1], enabledTimes[0]];
            }
            return enabledTimes;
          }
        } else if (!innerMaskedValue.includes('_')) {
          const newTime = parse(
            innerMaskedValue,
            isTimeWithSecondsType ? timeWithSecondsFormat : timeFormat,
            currentDate
          );
          const enabledTime = makeEnabledTimeRangeDate(newTime);
          if (isValid(enabledTime)) {
            return enabledTime;
          }
        } else if (
          (isTimeType && isValueMatchesTheMask(timeMask, innerMaskedValue)) ||
          (isTimeWithSecondsType && isValueMatchesTheMask(timeWithSecondsMask, innerMaskedValue))
        ) {
          return value || null;
        }
      } catch (e) {
        return null;
      }
      return null;
    }, [
      enabledHourFrom,
      enabledHourTo,
      enabledMinuteFrom,
      enabledMinuteTo,
      innerMaskedValue,
      value,
      isTimeWithSecondsType,
      isTimeType,
      isTimePeriodWithSecondsType,
      isTimePeriodType,
      valueTo,
      valueFrom
    ]);

    return (
      <InputMaskCorrect
        mask={mask}
        value={innerMaskedValue}
        onChange={handleChange}
        onFocus={handleFocus}
        onBlur={handleBlur}
        disabled={disabled}
        formatChars={{ 9: '[0-9]' }}
      >
        {() => (
          <Input
            inputRef={ref}
            onKeyDown={handleKeyDown}
            className={clsx(className, styles.input)}
            disabled={disabled}
            label={label}
            icon={icon}
            colored={colored}
            reset={reset}
            onReset={onReset}
            {...props}
          />
        )}
      </InputMaskCorrect>
    );
  }
);

export default TimePickerInput;
"
Styles for component TimePicker subcomponents TimePickerInput TimePickerInput.module.scss,".clock {
  display: flex;
  align-items: center;
  justify-content: center;
  cursor: pointer;
  padding-right: 4px;
}

.cursor {
  cursor: default;
}

.input {
  width: 100%;
}
"
Styles for component TimePicker TimePicker.module.scss,".root {
  user-select: none;
  transition: 0.2s;
  width: 100%;
  position: relative;
}

.disabled {
  pointer-events: none;
}

.opened {
  z-index: 10;
}
"
Types for component TimePicker subcomponents TimePickerInput types.ts,"import { ENABLED_HOURS_FROM_VALUES, ENABLED_HOURS_TO_VALUES } from '@components/declaration';

type TEnabledHourFrom = typeof ENABLED_HOURS_FROM_VALUES[number] | undefined;
type TEnabledHourTo = typeof ENABLED_HOURS_TO_VALUES[number] | undefined;

export interface ITimePickerInputProps {
  value?: Date;
  valueFrom?: Date;
  valueTo?: Date;
  onChange?: (date: Date) => void;
  onFocus?: () => void;
  onBlur?: (date: Date | null, date2?: Date | null) => void;
  onEnterKeyDown?: (date: Date | null, date2?: Date | null) => void;
  onTabKeyDown?: (date: Date | null, date2?: Date | null) => void;
  disabled?: boolean;
  className?: string;
  isTimeType?: boolean;
  isTimeWithSecondsType?: boolean;
  isTimePeriodType?: boolean;
  isTimePeriodWithSecondsType?: boolean;
  enabledHourFrom?: (date: Date | undefined) => TEnabledHourFrom;
  enabledHourTo?: (date: Date | undefined) => TEnabledHourTo;
  enabledMinuteFrom?: (date: Date | undefined) => number | undefined;
  enabledMinuteTo?: (date: Date | undefined) => number | undefined;
  label?: string;
  colored?: boolean
  isOpenOnFocus?: boolean;
  withIcon?: boolean;
  withPicker?: boolean;
  /** Флаг наличия кнопки сброса */
  reset?: boolean;
  /** Обработчик сброса значения */
  onReset?: () => void;
}
"
Codes for component TimePicker subcomponents MeasureUnit index.tsx,"import React, { FC, MouseEvent } from 'react';

import { Typography } from '@components/index';
import clsx from 'clsx';

import { IMeasureUnitProps } from './types';

import styles from './MeasureUnit.module.scss';

const MeasureUnit: FC<IMeasureUnitProps> = ({ onHover, onClick, selected, disabled, children }) => {
  const handleMouseOver = (event: MouseEvent<HTMLDivElement>) => {
    if (!disabled && onHover) {
      onHover(event);
    }
  };

  const handleClick = (event: MouseEvent<HTMLDivElement>) => {
    if (!disabled && onClick) {
      onClick(event);
    }
  };

  const classNames = clsx(styles.root, {
    [styles.selected]: selected,
    [styles.disabled]: disabled
  });

  return (
    <div
      onClick={handleClick}
      className={classNames}
      onMouseOver={handleMouseOver}
      data-testid={selected ? 'selected' : undefined}
    >
      <div className={styles.wrapper}>
        <Typography variant=""Body1-Medium"">{children}</Typography>
      </div>
    </div>
  );
};

export default MeasureUnit;
"
Types for component TimePicker types.ts,"import { ENABLED_HOURS_FROM_VALUES, ENABLED_HOURS_TO_VALUES } from '@components/declaration';

type TEnabledHourFrom = typeof ENABLED_HOURS_FROM_VALUES[number] | undefined;
type TEnabledHourTo = typeof ENABLED_HOURS_TO_VALUES[number] | undefined;

export interface TTimePickerType {
  /** Уникальный идентификатор компонента */
  id?: number | string;
  /** Тип пикера времени */
  type?: 'time' | 'timeWithSeconds' | 'period' | 'periodWithSeconds';
  /** Выбранное значение времени */
  value?: Date;
  /** Обработчик изменения выбранного времени */
  onChange?: (date: Date) => void;
  /** Начальное значение времени для периода */
  valueFrom?: Date;
  /** Конечное значение времени для периода */
  valueTo?: Date;
  /** Обработчик изменения периода времени */
  onPeriodChange?: (valueFrom?: Date, valueTo?: Date) => void;
  /** Дополнительный CSS класс */
  className?: string;
  /** Функция для определения начального доступного часа */
  enabledHourFrom?: (date: Date | undefined) => TEnabledHourFrom;
  /** Функция для определения конечного доступного часа */
  enabledHourTo?: (date: Date | undefined) => TEnabledHourTo;
  /** Функция для определения начальной доступной минуты */
  enabledMinuteFrom?: (date: Date | undefined) => number;
  /** Функция для определения конечной доступной минуты */
  enabledMinuteTo?: (date: Date | undefined) => number;
  /** Флаг отключения компонента */
  disabled?: boolean;
  /** Текст метки (label) для инпута */
  label?: string;
  /** Флаг блокировки панели выбора */
  disabledPanel?: boolean;
  /** Имя поля для использования в формах */
  name?: string;
  /** Флаг использования портала для рендеринга */
  withPortal?: boolean;
  /** Флаг ошибки */
  error?: boolean;
  /** Флаг открытия пикера при фокусе */
  isOpenOnFocus?: boolean;
  /** Флаг использования псевдо-инпута */
  pseudo?: boolean;
  /** Флаг отображения иконки */
  withIcon?: boolean;
  /** Флаг использования всплывающего пикера */
  withPicker?: boolean;
  /** Флаг применения цветовых стилей */
  colored?: boolean;
  /** Флаг наличия кнопки сброса */
  reset?: boolean;
  /** Обработчик сброса значения */
  onReset?: () => void;
}

/** Тип для значений дат в периоде */
export type TDateValues = {
  /** Начальное значение даты */
  valueFrom: Date | undefined;
  /** Конечное значение даты */
  valueTo: Date | undefined;
};
"
Types for component TimePicker _stories argsTypes.ts,"export const argsTypes = {
  onChange: {
    description: 'Callback, который будет вызван при выборе времени',
    action: 'изменено время',
    control: { type: 'action' }
  },
  onPeriodChange: {
    description: 'Callback, который будет вызван при выборе времени в периоде',
    action: 'изменено период времени',
    control: { type: 'action' }
  },
  value: {
    description: 'Значение выбранного времени',
    control: { type: 'date' }
  },
  valueFrom: {
    description: 'Первое значение выбранного времени в периоде',
    control: { type: 'date' }
  },
  valueTo: {
    description: 'Второе значение выбранного времени в периоде',
    control: { type: 'date' }
  },
  type: {
    description: 'Тип пикера. Возможные варианты: time | timeWithSeconds',
    table: {
      defaultValue: {
        summary: 'time'
      },
      type: {
        summary: 'string'
      }
    },
    options: ['time', 'timeWithSeconds', 'period', 'periodWithSeconds'],
    control: { type: 'select' }
  },
  enabledHourFrom: {
    description: 'Callback для установки начального часа, доступного к выбору',
    control: { type: 'action' }
  },
  enabledHourTo: {
    description: 'Callback для установки конечного часа, доступного к выбору',
    control: { type: 'action' }
  },
  enabledMinuteFrom: {
    description: 'Callback для установки начальной минуты, доступной к выбору',
    control: { type: 'action' }
  },
  enabledMinuteTo: {
    description: 'Callback для установки конечной минуты, доступной к выбору',
    control: { type: 'action' }
  },
  disabledPanel: {
    description: 'Заблокирована только панель для выбора',
    table: {
      defaultValue: {
        summary: 'false'
      }
    },
    control: { type: 'boolean' }
  },
  name: {
    description: 'Название поля(нужно для использования пикера как нативного - без value и onChange)',
    control: { type: 'text' }
  },
  withPortal: {
    description: 'Оборачивать ли компонент в react портал (например, для корректного отображения в модальных окнах)',
    control: { type: 'boolean' }
  },
  withIcon: {
    description: 'Пропс позволяет скрывать иконку в инпуте',
    control: { type: 'boolean' }
  },
  withPicker: {
    description:
      'Пропс убирает возможность открытия всплывающего пикера выбора времени, оставляя возможность пользователю вводить его только через инпут',
    control: { type: 'boolean' }
  },
  label: {
    description: 'Label для инпута и псевдоинпута. По умолчанию label отсутствует.',
    table: {
      defaultValue: {
        summary: ''
      },
      type: {
        summary: 'string'
      }
    },
    control: { type: 'text' }
  },
  error: {
    description: 'С ошибкой или нет',
    table: {
      defaultValue: {
        summary: 'false'
      },
      type: {
        summary: 'boolean'
      }
    },
    control: { type: 'boolean' }
  },
  disabled: {
    description: 'Заблокирован ли инпут',
    table: {
      defaultValue: {
        summary: 'false'
      },
      type: {
        summary: 'boolean'
      }
    },
    control: { type: 'boolean' }
  },
  colored: {
    description: 'Условие применения стилей подсветки',
    table: {
      defaultValue: {
        summary: 'false'
      },
      type: {
        summary: 'boolean'
      }
    },
    control: { type: 'boolean' }
  },
  pseudo: {
    description: 'Свойство, позволяющее переключать элемент с default на PseudoInput',
    table: {
      defaultValue: {
        summary: 'false'
      },
      type: {
        summary: 'boolean'
      }
    },
    control: { type: 'boolean' }
  },
  onReset: {
    description: 'Callback, который будет вызван при клике по иконке сброса',
    action: 'изменено value'
  },
  reset: {
    description: 'Булевое значение для показа иконки сброса',
    control: { type: 'boolean' },
    table: {
      defaultValue: {
        summary: false
      }
    }
  }
};
"
Types for component TimePicker subcomponents TimeSelector types.ts,"import { ENABLED_HOURS_FROM_VALUES, ENABLED_HOURS_TO_VALUES } from '@components/declaration';

type TEnabledHourFrom = typeof ENABLED_HOURS_FROM_VALUES[number] | undefined;
type TEnabledHourTo = typeof ENABLED_HOURS_TO_VALUES[number] | undefined;

export interface ITimeSelectorProps {
  selectedTime?: Date;
  onChange?: (date: Date) => void;
  value?: Date;
  innerValue?: Date;
  disabled?: boolean;
  isTimeWithSecondsType?: boolean;
  enabledHourFrom?: (date: Date | undefined) => TEnabledHourFrom;
  enabledHourTo?: (date: Date | undefined) => TEnabledHourTo;
  enabledMinuteFrom?: (date: Date | undefined) => number | undefined;
  enabledMinuteTo?: (date: Date | undefined) => number | undefined;
}
"
Codes for component TimePicker _stories Stories.tsx,"import React, { useState } from 'react';

import Editor from '@components/_storybook/Stories/components/Editor';
import FigmaEmbed from '@components/_storybook/Stories/components/FigmaEmbed';
import Header from '@components/_storybook/Stories/components/Header';
import Properties from '@components/_storybook/Stories/components/Properties';
import { Tabs } from '@components/index';

import styles from '@components/_storybook/Stories/Stories.module.scss';

import { argsTypes } from './argsTypes';

const TimePickerStories = (): JSX.Element => {
  const [activeTab, setActiveTab] = useState(0);

  const timepickerDefaultCode = `import { TimePicker } from '@nlmk/ds-2.0';

const App = () => (
  <TimePicker
    value={new Date()}
    onChange={(newTime) => console.log(newTime)}
  />
);

export default App;
`;

  const timepickerWithLabelCode = `import { TimePicker } from '@nlmk/ds-2.0';

const App = () => (
  <TimePicker
    label=""Время""
    value={new Date()}
    onChange={(newTime) => console.log(newTime)}
  />
);

export default App;
`;

  const timepickerDisabledCode = `import { TimePicker } from '@nlmk/ds-2.0';

const App = () => (
  <TimePicker
    disabled
    value={new Date()}
    onChange={(newTime) => console.log(newTime)}
  />
);

export default App;
`;

  return (
    <div className={styles.wrapper}>
      <Header
        title=""TimePicker""
        description=""TimePicker позволяет пользователям выбирать время или период времени. Поддерживает различные форматы и диапазоны времени.""
        isStable
        codeLink=""https://github.com/nlmk-group/ds-2.0/tree/main/src/components/TimePicker""
        figmaLink=""https://www.figma.com/file/MSMqfqJrQNaqbLe4Ctkq7n/Design-System-2.0-NLMK-(beta)-(Community)?type=design&node-id=1036%3A20847&mode=design&t=awyt3Fzj1XS6th7v-1""
      />

      <div className={styles.tabs}>
        <Tabs>
          <Tabs.Tab label=""Разработчику"" active={0 === Number(activeTab)} onClick={() => setActiveTab(0)} />
          {/* <Tabs.Tab label=""Дизайнеру"" active={1 === Number(activeTab)} onClick={() => setActiveTab(1)} /> */}
          <Tabs.Tab label=""Тестирование"" active={2 === Number(activeTab)} onClick={() => setActiveTab(2)} />
        </Tabs>
      </div>

      {Number(activeTab) === 0 && (
        <>
          <Editor
            height={250}
            description=""Основной TimePicker. Позволяет выбирать время.""
            code={timepickerDefaultCode}
          />
          <Editor height={250} description=""TimePicker с лейблом."" code={timepickerWithLabelCode} />
          <Editor
            height={250}
            description=""Отключенный TimePicker. Не доступен для взаимодействия.""
            code={timepickerDisabledCode}
          />
          <Properties argsTypes={argsTypes} />
        </>
      )}
      {Number(activeTab) === 1 && (
        <FigmaEmbed url=""https://www.figma.com/file/MSMqfqJrQNaqbLe4Ctkq7n/Design-System-2.0-NLMK-(beta)-(Community)?type=design&node-id=1036%3A20847&mode=design&t=awyt3Fzj1XS6th7v-1"" />
      )}
    </div>
  );
};

export default TimePickerStories;
"
Codes for component TimePicker index.tsx,"import React, { FC, useCallback, useEffect, useMemo, useState } from 'react';
import ReactDOM from 'react-dom';
import { usePopper } from 'react-popper';

import { generateUUID, TWO_DIGIT_FORMAT, useUpdatedValues } from '@components/declaration';
import { ClickAwayListener, PseudoInput } from '@components/index';
import clsx from 'clsx';
import { isEqual, set } from 'date-fns';

import { TDateValues, TTimePickerType } from './types';

import styles from './TimePicker.module.scss';

import TimePickerInput from './subcomponents/TimePickerInput';
import TimeSelector from './subcomponents/TimeSelector';

/**
 * Компонент TimePicker для выбора времени в различных форматах.
 * @component
 * @param {Object} props - Свойства компонента TimePicker.
 * @param {number|string} [props.id] - Уникальный идентификатор компонента.
 * @param {'time'|'timeWithSeconds'|'period'|'periodWithSeconds'} [props.type='time'] - Тип пикера времени.
 * @param {string} [props.name] - Имя поля для использования в формах.
 * @param {function} [props.enabledHourFrom] - Функция для определения начального доступного часа.
 * @param {function} [props.enabledHourTo] - Функция для определения конечного доступного часа.
 * @param {function} [props.enabledMinuteFrom] - Функция для определения начальной доступной минуты.
 * @param {function} [props.enabledMinuteTo] - Функция для определения конечной доступной минуты.
 * @param {Date} [props.value] - Выбранное значение времени.
 * @param {function} [props.onChange] - Обработчик изменения выбранного времени.
 * @param {Date} [props.valueFrom] - Начальное значение времени для периода.
 * @param {Date} [props.valueTo] - Конечное значение времени для периода.
 * @param {function} [props.onPeriodChange] - Обработчик изменения периода времени.
 * @param {string} [props.className] - Дополнительный CSS класс.
 * @param {boolean} [props.disabledPanel=false] - Флаг блокировки панели выбора.
 * @param {boolean} [props.withPortal=false] - Флаг использования портала для рендеринга.
 * @param {boolean} [props.colored=false] - Флаг применения цветовых стилей.
 * @param {boolean} [props.pseudo=false] - Флаг использования псевдо-инпута.
 * @param {boolean} [props.isOpenOnFocus=false] - Флаг открытия пикера при фокусе.
 * @param {boolean} [props.withIcon=true] - Флаг отображения иконки.
 * @param {boolean} [props.withPicker=true] - Флаг использования всплывающего пикера.
 * @param {string} [props.label=''] - Текст метки (label) для инпута.
 * @param {boolean} [props.reset=false] - Флаг наличия кнопки сброса.
 * @param {function} [props.onReset] - Обработчик сброса значения.
 * @returns {JSX.Element} Компонент TimePicker.
 */
const TimePicker: FC<TTimePickerType> = ({
  id,
  type = 'time',
  name,
  enabledHourFrom,
  enabledHourTo,
  enabledMinuteFrom,
  enabledMinuteTo,
  value: externalValue,
  onChange: outerOnChange,
  valueFrom: outerValueFrom,
  valueTo: outerValueTo,
  onPeriodChange: outerOnPeriodChange,
  className,
  disabledPanel = false,
  withPortal = false,
  colored = false,
  pseudo = false,
  isOpenOnFocus = false,
  withIcon = true,
  withPicker = true,
  label = '',
  reset,
  onReset,
  ...restInputProps
}) => {
  const isTimeType = useMemo(() => type === 'time', [type]);
  const isTimeWithSecondsType = useMemo(() => type === 'timeWithSeconds', [type]);
  const isTimePeriodType = useMemo(() => type === 'period', [type]);
  const isTimePeriodWithSecondsType = useMemo(() => type === 'periodWithSeconds', [type]);

  const [isOpenOnInputFocus, setOpenOnFocus] = useState<boolean>(isOpenOnFocus);
  const [isOpen, setOpen] = useState(false);
  const [inputRef, setInputRef] = useState<null | HTMLInputElement>(null);
  const [calendarRef, setCalendarRef] = useState<null | HTMLDivElement>(null);
  id = useMemo(() => `TimePicker-${(id && id.toString()) || generateUUID()}`, [id]);
  const effectiveWithPicker = isTimePeriodType || isTimePeriodWithSecondsType ? false : withPicker;

  const {
    value: { valueFrom, valueTo },
    onChange: innerOnPeriodChange
  } = useUpdatedValues<TDateValues>(
    useMemo(() => ({ valueFrom: outerValueFrom, valueTo: outerValueTo }), [outerValueFrom, outerValueTo]),
    useCallback((a: TDateValues, b: TDateValues) => {
      if (!a.valueFrom || !b.valueFrom) {
        return a.valueFrom === b.valueFrom;
      }
      if (!a.valueTo || !b.valueTo) {
        return a.valueTo === b.valueTo;
      }
      return isEqual(a.valueFrom, b.valueFrom) && isEqual(a.valueTo, b.valueTo);
    }, [])
  );

  const { value, onChange: innerOnChange } = useUpdatedValues<Date | undefined>(externalValue);

  const [innerValue, setInnerOnChange] = useState(value);
  const [selectedTime, setSelectedTime] = useState(new Date());

  useEffect(() => {
    if (value) {
      setInnerOnChange(value);
      setSelectedTime(value);
    }
  }, [value]);

  useEffect(() => {
    if (isOpenOnFocus || !withIcon) {
      setOpenOnFocus(true);
    }
  }, [isOpenOnFocus, withIcon]);

  const onChange = useCallback(
    (date: Date) => {
      innerOnChange(date);
      outerOnChange?.(date);
    },
    [innerOnChange, outerOnChange]
  );

  const onPeriodChange = useCallback(
    (valueFrom?: Date, valueTo?: Date) => {
      if (outerOnPeriodChange) {
        outerOnPeriodChange(valueFrom, valueTo);
      }
      if (valueFrom || valueTo) {
        innerOnPeriodChange({ valueFrom, valueTo });
      }
    },
    [innerOnPeriodChange, outerOnPeriodChange]
  );

  const outerValue = useMemo(() => {
    return value && new Date(value);
  }, [value]);

  const handleClose = useCallback(() => {
    setOpen(false);
  }, []);

  const handleFocus = useCallback(() => {
    setOpen(true);
  }, []);

  const pseudoTime = useMemo(() => {
    if (!value) return '';

    const timeOptions: Intl.DateTimeFormatOptions = isTimeWithSecondsType
      ? { hour: TWO_DIGIT_FORMAT, minute: TWO_DIGIT_FORMAT, second: TWO_DIGIT_FORMAT }
      : { hour: TWO_DIGIT_FORMAT, minute: TWO_DIGIT_FORMAT };

    return value.toLocaleTimeString([], timeOptions);
  }, [value, isTimeWithSecondsType]);

  const { styles: popperStyles, attributes } = usePopper(inputRef, calendarRef, {
    placement: 'bottom-start'
  });

  const handleSetValues = useCallback(
    (isBlur?: boolean) => (date: any, date2: any) => {
      if (isOpen && isBlur) {
        return;
      }
      inputRef?.blur();
      if ((isTimePeriodType || isTimePeriodWithSecondsType) && onPeriodChange) {
        onPeriodChange(date || undefined, date2 || undefined);
      } else if (onChange) {
        onChange(date);
      }
      setOpen(false);
    },
    [inputRef, isOpen, onChange, onPeriodChange, isTimePeriodType]
  );

  const handleAccept = useCallback(() => {
    if (onChange && innerValue) {
      const newDate = set(innerValue, {
        hours: selectedTime.getHours(),
        minutes: selectedTime.getMinutes(),
        ...(isTimeWithSecondsType && { seconds: selectedTime.getSeconds() })
      });
      onChange(newDate);
    }
    handleClose();
    return;
  }, [onChange, innerValue, selectedTime, isTimeWithSecondsType]);

  const renderTimePickerPanel = () => (
    <ClickAwayListener
      onClickAway={() => {
        if (!isOpenOnInputFocus) {
          handleAccept();
        }
      }}
    >
      <div className={styles.opened} ref={setCalendarRef} style={popperStyles.popper} {...attributes.popper}>
        <TimeSelector
          isTimeWithSecondsType={isTimeWithSecondsType}
          disabled={disabledPanel}
          enabledHourFrom={enabledHourFrom}
          enabledHourTo={enabledHourTo}
          enabledMinuteFrom={enabledMinuteFrom}
          enabledMinuteTo={enabledMinuteTo}
          value={value}
          selectedTime={selectedTime}
          onChange={setSelectedTime}
        />
      </div>
    </ClickAwayListener>
  );

  const renderTimepicker = () => (
    <div
      className={clsx(styles.root, className, restInputProps.disabled && styles.disabled, isOpen && styles.opened)}
      id={id as string}
    >
      {name && ['time', 'timeWithSeconds'].includes(type) && (
        <input type=""hidden"" name={name} value={value?.toISOString()} />
      )}
      <TimePickerInput
        ref={setInputRef}
        value={outerValue}
        valueFrom={valueFrom}
        valueTo={valueTo}
        isTimeType={isTimeType}
        isTimeWithSecondsType={isTimeWithSecondsType}
        isTimePeriodType={isTimePeriodType}
        isTimePeriodWithSecondsType={isTimePeriodWithSecondsType}
        onChange={onChange}
        enabledHourFrom={enabledHourFrom}
        enabledHourTo={enabledHourTo}
        enabledMinuteFrom={enabledMinuteFrom}
        enabledMinuteTo={enabledMinuteTo}
        isOpenOnFocus={isOpenOnInputFocus}
        onEnterKeyDown={handleSetValues(false)}
        onTabKeyDown={handleSetValues(false)}
        onBlur={handleSetValues(true)}
        onFocus={handleFocus}
        colored={colored}
        withIcon={withIcon}
        withPicker={effectiveWithPicker}
        label={label}
        reset={reset}
        onReset={onReset}
        {...restInputProps}
      />
      {isOpen &&
        effectiveWithPicker &&
        (!withPortal ? (
          <>{renderTimePickerPanel()}</>
        ) : (
          ReactDOM.createPortal(<>{renderTimePickerPanel()}</>, document.getElementById('root') as HTMLElement)
        ))}
    </div>
  );

  if (pseudo) return <PseudoInput label={label}>{pseudoTime}</PseudoInput>;

  if (isOpenOnInputFocus)
    return (
      <ClickAwayListener
        onClickAway={() => {
          handleAccept();
        }}
      >
        {renderTimepicker()}
      </ClickAwayListener>
    );
  else return <>{renderTimepicker()}</>;
};

export default TimePicker;
"
Types for component TimePicker subcomponents MeasureUnit types.ts,"import { MouseEvent, MouseEventHandler, ReactNode } from 'react';

export interface IMeasureUnitProps {
  selected?: boolean;
  disabled?: boolean;
  onClick?: MouseEventHandler<HTMLDivElement> | undefined;
  onHover?: (event: MouseEvent<HTMLDivElement>) => void;
  children?: ReactNode;
  disableTimeChange?: boolean;
}
"
Styles for component TimePicker subcomponents TimeSelector TimeSelector.module.scss,".selector {
  display: grid;
  height: 280px;
  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.25);
  padding: 12px 16px 0 16px;
  margin-top: 8px;
  gap: 4px;
  overflow: hidden;
  scroll-behavior: smooth;
  position: relative;
  z-index: 10;
  top: 0;
  left: 0;
  border-radius: 4px;
  background-color: var(--steel-10);
  width: 80px;
  grid-template-columns: repeat(3, 40px);

  &-with-seconds {
    width: 120px;
  }

  &-column {
    display: grid;
    grid-template-columns: 1fr;
    overflow: auto;
    scroll-behavior: smooth;

    &::-webkit-scrollbar {
      display: none;
    }

    scrollbar-width: none;

    &-title {
      position: sticky;
      top: 0;
      color: var(--steel-70);
      font-variant-numeric: tabular-nums lining-nums;
      background: var(--steel-10);
      display: flex;
      align-items: center;
      justify-content: center;
      width: 40px;
      height: 48px;
      z-index: 1;
    }
  }
}
"
Styles for component TimePicker subcomponents MeasureUnit MeasureUnit.module.scss,".root {
  width: 40px;
  height: 40px;
  cursor: pointer;
}

.wrapper {
  cursor: pointer;
  color: var(--steel-90);
  background-color: var(--steel-10);
  border-radius: var(--circle-radius);
  border: 1px solid transparent;
  width: 100%;
  height: 100%;
  display: flex;
  align-items: center;
  justify-content: center;
  box-sizing: border-box;
  transition: 0.3s;

  &:hover {
    background-color: var(--steel-30);
  }
}

.selected {
  .wrapper {
    background-color: var(--brand-sapphire-50);
    color: var(--unique-white);
    cursor: default;

    &:hover {
      opacity: 0.5;
    }
  }
}

.disabled {
  cursor: not-allowed;
  pointer-events: none;
  opacity: 0.5;
}
"
Codes for component ToggleButtonGroup ToggleButton WithIcon.tsx,"import React, { FC, useContext } from 'react';

import { IconArticleOutlined24 } from '@components/.';
import { clsx } from 'clsx';

import styles from '../ToggleButtonGroup.module.scss';

import { ButtonGroupProperties } from '..';
import { IButtonGroupProperties, IWithIcon } from '../types';

export const WithIcon: FC<IWithIcon> = ({ htmlColor = 'var(--text-grey-900)', children = null }) => {
  const { size } = useContext<IButtonGroupProperties>(ButtonGroupProperties);
  return (
    <div data-testid=""ICON"" className={clsx(styles['icon-wrapper'], styles[`icon-${size}`])}>
      {children !== null ? children : <IconArticleOutlined24 htmlColor={htmlColor} />}
    </div>
  );
};

export default WithIcon;
"
Codes for component ToggleButtonGroup ToggleButton WithLabel.tsx,"import React, { FC, ReactElement } from 'react';
import styles from '../ToggleButtonGroup.module.scss';
import { Typography } from '@components/index';

export const WithLabel: FC<{children: string | ReactElement}> = ({ children }) => {

  return (
    <div className={styles['label-wrapper']}>
      <Typography variant='Body1-Bold'>
        {children}
      </Typography>
    </div>
  )
}

export default WithLabel
"
Codes for component ToggleButtonGroup index.tsx,"import React, { Children, cloneElement, createContext, isValidElement, ReactNode, useEffect, useState } from 'react';

import { clsx } from 'clsx';

import { IButtonGroupProperties, IToggleButtonGroup, IToggleButtonGroupItemWithProps } from './types';

import styles from './ToggleButtonGroup.module.scss';

import { sizeMapping, statusMapping } from './enums';
import ToggleButton from './ToggleButton';

export const ButtonGroupProperties = createContext<IButtonGroupProperties>({
  size: sizeMapping.default,
  status: statusMapping.default,
  disabled: false
});

const ToggleButtonGroup = ({
  className = '',
  size = sizeMapping.default,
  status = statusMapping.default,
  disabled = false,
  children
}: IToggleButtonGroup) => {
  const [activeId, setActiveId] = useState<number | null>(null);
  const [childrenWithProps, setChildrenWithProps] = useState<ReactNode | ReactNode[]>(null);

  const handleToggle = (index: number) => {
    setActiveId(activeId === index ? null : index);
  };

  useEffect(() => {
    setChildrenWithProps(
      Children.map(children, (child, index) => {
        if (isValidElement(child)) {
          if (child.props.active) {
            setActiveId(index)
          }
          return cloneElement(child, {
            active: activeId === index,
            isLast: index === Children.toArray(children).length - 1,
            toggleButton: () => handleToggle(index)
          } as IToggleButtonGroupItemWithProps);
        }
        return child;
      })
    );
  }, [activeId]);

  const defaultProperties = {
    size,
    status,
    disabled
  };

  return (
    <ButtonGroupProperties.Provider value={defaultProperties}>
      <div className={clsx(styles.wrapper, className)} data-testid=""TOGGLE_BUTTON_WRAPPER"">
        {childrenWithProps}
      </div>
    </ButtonGroupProperties.Provider>
  );
};

ToggleButtonGroup.Button = ToggleButton;

export default ToggleButtonGroup;
"
Types for component ToggleButtonGroup enums.ts,"/**
 * @type {enum} sizeMapping
 * @type {enum} statusMapping
 */

export enum sizeMapping {
  compact = 'compact',
  default = 'default'
}

export enum statusMapping {
  default = 'default',
  success = 'success',
  warning = 'warning',
  error = 'error'
}
"
Types for component ToggleButtonGroup types.ts,"import { MouseEventHandler, ReactNode } from 'react';
import { sizeMapping, statusMapping } from './enums';

export type SizeType = `${sizeMapping}`;
export type StatusType = `${statusMapping}`;

export interface IToggleButtonGroup {
  className?: string;
  status?: StatusType;
  size?: SizeType;
  disabled?: boolean;
  children: ReactNode;
}

export interface IToggleButtonGroupItemWithProps {
  className?: string;
  status?: StatusType;
  disabled?: boolean;
  onClick?: MouseEventHandler<HTMLDivElement> | null;
  active?: boolean;
  toggleButton?: ()=>void;
  isLast?: boolean;
  children: ReactNode;
}

export interface IButtonGroupProperties {
  size: SizeType;
  status: StatusType;
  disabled: boolean;
}

export interface IButtonProperties {
  status: StatusType;
  active: boolean;
}

export interface IWithIcon {
  htmlColor?: string;
  children?: ReactNode;
}
"
Codes for component ToggleButtonGroup ToggleButton WithBadge.tsx,"import React, { FC, useContext } from 'react';
import { clsx } from 'clsx';
import {
  sizeMapping
  // statusMapping
} from '../enums';
import styles from '../ToggleButtonGroup.module.scss';
import Badge from '@components/Badge';
import {
  // colorsMapping
  sizesMapping
} from '@components/declaration';
import {
  IButtonGroupProperties
  // IButtonProperties
} from '../types';
import { ButtonGroupProperties } from '..';
// import { ButtonProperties } from '.';
import { IBadgeProps } from '@components/Badge/types';

const WithBadge: FC<IBadgeProps> = (props) => {
  const defaultProps = useContext<IButtonGroupProperties>(ButtonGroupProperties);
  // const btnProps = useContext<IButtonProperties>(ButtonProperties);
  // const badgeType = btnProps.status || defaultProps.status;
  
  // const badgeColorHelper = () => {
  //   // if (btnProps.active) return colorsMapping.grey;
  //   if (badgeType === statusMapping.default) return colorsMapping.primary
  //   else return badgeType
  // }

  const newProps = {
    ...props,
    variant: props.variant === undefined
      ? 'solid'
      : props.variant,
    color: props.color === undefined
      ? 'secondary'
      : props.color
    // color: badgeColorHelper()
  };

  return (
    <div
      data-testid='BADGE'
      className={clsx(
        styles['badge-wrapper']
      )}
    >
      <Badge
        {...newProps}
        size={sizesMapping[defaultProps.size === sizeMapping.compact ? 's' : 'm']}
      />
    </div>
  )
}

export default WithBadge"
Types for component ToggleButtonGroup _stories constants.ts,"export const DEFAULT_TOGGLE_BUTTON = 'Toggle Button по умолчанию';
export const TOGGLE_BUTTON_TOOLTIP = 'Toggle Button с тултипами';
export const TOGGLE_BUTTON_ICON = 'Toggle Button с иконками';
export const TOGGLE_BUTTON_BADGE = 'Toggle Button с бейджами';
export const TOGGLE_BUTTON_SIZES = 'Toggle Button с разными размерами';
export const TOGGLE_BUTTON_COLOR_OPTIONS = 'Toggle Button с разными цветами заливки';
export const TOGGLE_BUTTON_OPTIONS = 'Toggle Button с разными кнопками и иконками';
"
Types for component ToggleButtonGroup _stories argsTypes.ts,"import { sizeMapping, statusMapping } from '../enums';

export const buttonGroupItemsArgsTypes = {
  label: {
    description: 'Строка, которая будет отображаться на кнопке-переключателе.',
    table: {
      defaultValue: {
        summary: 'Type<string>, required'
      }
    }
  },
  active: {
    description:
      'Необязательный свойство. Булево значение, указывающее, является ли кнопка-переключатель активной по умолчанию',
    table: {
      defaultValue: {
        summary: 'boolean'
      }
    }
  },
  disabled: {
    description: 'Необязательный свойство. Флаг-условие блокировки доступа к копке',
    table: {
      defaultValue: {
        summary: 'boolean'
      }
    }
  },
  status: {
    description:
      'Строка, указывающая статус кнопки-переключателя. Это свойство необязательно, и если оно не указано, будет использоваться значение по умолчанию из statusMapping.',
    table: {
      defaultValue: {
        summary: statusMapping.default
      },
      type: {
        summary: 'string'
      }
    },
    options: Object.values(statusMapping),
    control: { type: 'select' }
  },
  withIcon: {
    description:
      'Необязательное свойство. Флаг, указывающий, следует ли отображать иконку слева от названия кнопки. Если значение равно true, иконка будет отображаться, если false - иконка не будет отображаться. Значение по умолчанию - false.',
    table: {
      defaultValue: {
        summary: 'false'
      }
    }
  },
  customIcon: {
    description: 'Необязательное свойство. Пользовательская иконка для отображения слева от названия кнопки.',
    control: { type: 'string' }
  },
  action: {
    description: 'Необязательное свойство. Функция, которая будет вызываться при клике на кнопку.',
    control: { type: 'boolean' }
  },
  actionNumber: {
    description: 'Необязательное свойство. Число, представляющее количество уведомлений, которые будут отображаться.',
    control: { type: 'number' }
  }
};

export const argsTypes = {
  className: {
    description: 'В компонент можно передать альтернативные стили',
    control: { type: 'string' }
  },
  status: {
    description:
      'Необязательный атрибут. Строка, указывающая статус кнопкок-переключателей. Это свойство необязательно, и если оно не указано, будет использоваться значение по умолчанию из statusMapping. В btnGroup могут быть переданы кнопки с собственными значениями status.',
    table: {
      defaultValue: {
        summary: statusMapping.default
      },
      type: {
        summary: 'string'
      }
    },
    options: Object.values(statusMapping),
    control: { type: 'select' }
  },
  size: {
    description:
      'Необязательный атрибут. Cтрока, указывающая размер кнопок-переключателей в группе. Это свойство необязательно, и если оно не указано, будет использоваться значение по умолчанию из sizeMapping.',
    table: {
      defaultValue: {
        summary: sizeMapping.default
      },
      type: {
        summary: 'string'
      }
    },
    options: Object.values(sizeMapping),
    control: { type: 'select' }
  },
  disabled: {
    description: 'Необязательный свойство. Флаг-условие блокировки доступа к копке',
    table: {
      defaultValue: {
        summary: 'false'
      }
    },
    control: { type: 'boolean' }
  }
};
"
Codes for component ToggleButtonGroup ToggleButton WithTooltip.tsx,"import React, { FC, useContext } from 'react';
import { clsx } from 'clsx';
import styles from '../ToggleButtonGroup.module.scss'
import { Tooltip } from '@components/index';
import { ITooltipProps } from '@components/Tooltip/types';
import { IButtonGroupProperties } from '../types';
import { ButtonGroupProperties } from '..';

const WithTooltip: FC<ITooltipProps> = (props) => {
  const { placement } = props;
  const { size } = useContext<IButtonGroupProperties>(ButtonGroupProperties);
  const compactSideHelperStyle = size === 'compact'
    ? styles['tooltip-compact-side-helper']
    : styles['tooltip-side-helper'];

  const compactTopHelperStyle = (
    placement === 'top'
    || placement === undefined
  ) && size === 'compact';
  
  const compactBottomHelperStyle = placement === 'bottom' && size === 'compact';

  return (
    <Tooltip
      {...props}
      className={clsx(
        size === 'compact' && styles['tooltip-compact'],
        (placement === 'left' || placement === 'right') && compactSideHelperStyle,
        compactTopHelperStyle && styles['tooltip-compact-top-helper'],
        compactBottomHelperStyle && styles['tooltip-compact-bottom-helper']
      )}
    />
  )
}

export default WithTooltip"
Codes for component ToggleButtonGroup ToggleButton index.tsx,"import React, { createContext, MouseEvent, useContext } from 'react';

import { Divider } from '@components/index';
import { clsx } from 'clsx';

import styles from '../ToggleButtonGroup.module.scss';

import { statusMapping } from '../enums';
import { ButtonGroupProperties } from '../index';
import { IButtonGroupProperties, IButtonProperties, IToggleButtonGroupItemWithProps } from '../types';
import WithBadge from './WithBadge';
import WithIcon from './WithIcon';
import WithLabel from './WithLabel';
import WithTooltip from './WithTooltip';

export const ButtonProperties = createContext<IButtonProperties>({
  status: statusMapping.default,
  active: false
});

const ToggleButton = ({
  className,
  onClick = () => void 0,
  status,
  disabled = false,
  active = false,
  children,
  isLast = false,
  toggleButton = () => void 0
}: IToggleButtonGroupItemWithProps) => {
  // cannot use FC for props type
  // because Compound Pattern does not work with it
  const defaultProps = useContext<IButtonGroupProperties>(ButtonGroupProperties);
  const handleClick = (e: MouseEvent<HTMLDivElement>) => {
    toggleButton();
    if (onClick !== null) onClick(e);
  };

  const btnProps = {
    status: status || defaultProps.status,
    active
  };

  return (
    <ButtonProperties.Provider value={btnProps}>
      <div
        onClick={handleClick}
        data-testid=""TOGGLE_BUTTON""
        className={clsx(
          styles['btn-wrapper'],
          styles[`btn-size-${defaultProps.size}`],
          styles[`btn-${status || defaultProps.status}`],
          active && styles[`btn-active-${status || defaultProps.status}`],
          (defaultProps.disabled || disabled) && styles['btn-disabled'],
          className
        )}
      >
        {children}
      </div>
      {!isLast && (
        <div className={styles['divider-wrapper']}>
          <Divider type=""vertical"" className={styles[`divider-color-${status || defaultProps.status}`]} />
        </div>
      )}
    </ButtonProperties.Provider>
  );
};

export default ToggleButton;

ToggleButton.Label = WithLabel;
ToggleButton.Tooltip = WithTooltip;
ToggleButton.Icon = WithIcon;
ToggleButton.Badge = WithBadge;
"
Styles for component ToggleButtonGroup ToggleButtonGroup.module.scss,"@mixin icon-size($size) {
  svg {
    width: var(--#{$size}-size);
    height: var(--#{$size}-size);
  }
}

@mixin btn-helper($color, $bg) {
  color: $color;
  background: $bg;

  path {
    fill: $color;
  }
}

@mixin divider-helper($b-color) {
  margin: 0;

  & > div {
    border-right-color: $b-color;
  }
}

.wrapper {
  border-radius: var(--4-radius);
  border: var(--1-border) solid var(--text-grey-200);
  background: var(--background-light-grey);
  width: fit-content;
  display: flex;
}

.btn-wrapper {
  cursor: pointer;
  display: flex;
  gap: var(--4-space);
  border-radius: 3px;
  transition: all 0.03s ease-out;
}

.icon-wrapper {
  display: flex;
  align-items: center;
}

.icon-default {
  @include icon-size(24);
}

.icon-compact {
  @include icon-size(16);
}

.badge-wrapper {
  margin: auto 0;
}

.label-wrapper {
  margin: auto 0;
}

.divider-wrapper {
  height: var(--24-size);
  margin: auto 0;
}

.divider-color-default {
  @include divider-helper(var(--ac-toggle-button-default-default-stroke))
}
.divider-color-success {
  @include divider-helper(var(--ac-toggle-button-success-default-stroke))
}
.divider-color-warning {
  @include divider-helper(var(--ac-toggle-button-warning-default-stroke))
}
.divider-color-error {
  @include divider-helper(var(--ac-toggle-button-error-default-stroke))
}

.btn-disabled {
  opacity: 0.5;
  cursor: default;
  pointer-events: none;
}

.btn-size-default {
  padding: var(--8-space);
}

.btn-size-compact {
  padding: 3px var(--8-space);
}

.btn-default {
  @include btn-helper(
    var(--ac-toggle-button-default-default-text),
    transparent
  );

  path {
    fill: var(--ac-icon-blue);
  }

  &:hover {
    @include btn-helper(
      var(--ac-toggle-button-default-hover-text),
      var(--ac-toggle-button-default-hover-bg)
    )
  }

  &:active {
    @include btn-helper(
      var(--ac-toggle-button-default-active-text),
      var(--ac-toggle-button-default-active-bg)
    )
  }
}

.btn-active-default {
  @include btn-helper(
    var(--ac-toggle-button-default-active-text),
    var(--ac-toggle-button-default-active-bg)
  )
}

.btn-success {
  @include btn-helper(
    var(--ac-toggle-button-success-default-text),
    transparent
  );

  path {
    fill: var(--ac-icon-success);
  }

  &:hover {
    @include btn-helper(
      var(--ac-toggle-button-success-hover-text),
      var(--ac-toggle-button-success-hover-bg)
    )
  }

  &:active {
    @include btn-helper(
      var(--ac-toggle-button-success-active-text),
      var(--ac-toggle-button-success-active-bg)
    )
  }
}

.btn-active-success {
  @include btn-helper(
    var(--ac-toggle-button-success-active-text),
    var(--ac-toggle-button-success-active-bg)
  )
}

.btn-warning {
  @include btn-helper(
    var(--ac-toggle-button-warning-default-text),
    transparent
  );

  path {
    fill: var(--ac-icon-warning);
  }

  &:hover {
    @include btn-helper(
      var(--ac-toggle-button-warning-hover-text),
      var(--ac-toggle-button-warning-hover-bg)
    )
  }

  &:active {
    @include btn-helper(
      var(--ac-toggle-button-warning-active-text),
      var(--ac-toggle-button-warning-active-bg)
    )
  }
}

.btn-active-warning {
  @include btn-helper(
      var(--ac-toggle-button-warning-active-text),
      var(--ac-toggle-button-warning-active-bg)
    )
}

.btn-error {
  @include btn-helper(
    var(--ac-toggle-button-error-default-text),
    transparent
  );

  path {
    fill: var(--ac-icon-error);
  }

  &:hover {
    @include btn-helper(
      var(--ac-toggle-button-error-hover-text),
      var(--ac-toggle-button-error-hover-bg)
    )
  }

  &:active {
    @include btn-helper(
      var(--ac-toggle-button-error-active-text),
      var(--ac-toggle-button-error-active-bg)
    )
  }
}

.btn-active-error {
  @include btn-helper(
    var(--ac-toggle-button-error-active-text),
    var(--ac-toggle-button-error-active-bg)
  )
}

.test-class-wrapper {
  border-color: var(--primary-blue-900);
}

.test-class-btn {
  background-color: var(--primary-blue-500);
}

.tooltip-side-helper {
  div:nth-child(2) {
    bottom: unset;
    transform: translateY(-30%);
  }
}

.tooltip-compact {
  div:nth-child(2) {
    padding: calc(var(--12-space) / 2) var(--8-space);
  }
}

.tooltip-compact-side-helper {
  div:nth-child(2) {
    bottom: unset;
    transform: translateY(-25%);
  }
}

.tooltip-compact-top-helper {
  div:nth-child(2) {
    bottom: calc(var(--24-space) + var(--2-space))!important;
  }
}

.tooltip-compact-bottom-helper {
  div:nth-child(2) {
    top: calc(var(--24-space) + var(--2-space))!important;
  }
}
"
Codes for component ToggleButtonGroup _stories Stories.tsx,"import React, { useState } from 'react';

import Editor from '@components/_storybook/Stories/components/Editor';
import FigmaEmbed from '@components/_storybook/Stories/components/FigmaEmbed';
import Header from '@components/_storybook/Stories/components/Header';
import Properties from '@components/_storybook/Stories/components/Properties';
import Tests from '@components/_storybook/Stories/components/Tests';
import '@components/_storybook/Stories/styles.css';
import { Tabs } from '@components/index';

import styles from '@components/_storybook/Stories/Stories.module.scss';

import { sizeMapping, statusMapping } from '../enums';
import { argsTypes } from './argsTypes';
import {
  DEFAULT_TOGGLE_BUTTON,
  TOGGLE_BUTTON_BADGE,
  TOGGLE_BUTTON_COLOR_OPTIONS,
  TOGGLE_BUTTON_ICON,
  TOGGLE_BUTTON_OPTIONS,
  TOGGLE_BUTTON_SIZES,
  TOGGLE_BUTTON_TOOLTIP
} from './constants';

enum TabIds {
  dev,
  design,
  tests
}

const COMPONENT_NAME = 'ToggleButtonGroup';
const FIGMA_URL =
  'https://www.figma.com/file/2bgeOS0URFNqFO1m1bnyvg/DS2.0-Buttons?type=design&node-id=3302-7747&mode=design&t=v2uTZplRrFW7s4RK-0';

const Stories = (): JSX.Element => {
  const [activeTab, setActiveTab] = useState<TabIds>(TabIds.dev);

  const isActive = (tab: TabIds) => {
    return activeTab === tab;
  };

  return (
    <div className={styles.wrapper}>
      <Header
        title={COMPONENT_NAME}
        description=""Компонент ToggleButtonGroup - это набор кнопок, из которых пользователь может выбрать только одну.""
        isStable
        codeLink={`https://github.com/nlmk-group/ds-2.0/tree/main/src/components/${COMPONENT_NAME}`}
        figmaLink={FIGMA_URL}
      />

      <div className={styles.tabs}>
        <Tabs>
          <Tabs.Tab label=""Разработчику"" active={isActive(TabIds.dev)} onClick={() => setActiveTab(TabIds.dev)} />
          {/* <Tabs.Tab label=""Дизайнеру"" active={isActive(TabIds.design)} onClick={() => setActiveTab(TabIds.design)} /> */}
          <Tabs.Tab label=""Тестирование"" active={isActive(TabIds.tests)} onClick={() => setActiveTab(TabIds.tests)} />
        </Tabs>
      </div>

      {activeTab == TabIds.dev && (
        <>
          <Editor
            height={400}
            description={DEFAULT_TOGGLE_BUTTON}
            code={`import { ToggleButtonGroup } from '@nlmk/ds-2.0';
import { useState } from 'react';

const { Button } = ToggleButtonGroup;

export default App = () => {
  const [count, setCount] = useState(0)

  return (
    <ToggleButtonGroup>
      <Button onClick={() => setCount(count+1)}>
        <Button.Label>
          Plus {count}
        </Button.Label>
      </Button>
      <Button onClick={() => alert('Count is '+ count)}>
        <Button.Label>
          Check result
        </Button.Label>
      </Button>
      <Button onClick={() => setCount(count-1)}>
        <Button.Label>
          Minus {count}
        </Button.Label>
      </Button>
    </ToggleButtonGroup>
  )
}
`}
          />

          <Editor
            height={400}
            description={TOGGLE_BUTTON_TOOLTIP}
            code={`import { ToggleButtonGroup } from '@nlmk/ds-2.0';

const { Button } = ToggleButtonGroup;

export default App = () => {
  return (
    <ToggleButtonGroup>
      <Button>
        <Button.Tooltip description='Add one to count' placement='bottom'>
          <Button.Label>
            Plus
          </Button.Label>
        </Button.Tooltip>
      </Button>

      <Button>
        <Button.Tooltip description='Check count value' placement='bottom'>
          <Button.Label>
              Check result
            </Button.Label>
        </Button.Tooltip>
      </Button>

      <Button>
        <Button.Tooltip description='Subtract one from count' placement='bottom'>
          <Button.Label>
            Minus
          </Button.Label>
        </Button.Tooltip>
      </Button>
    </ToggleButtonGroup>
  )
}
`}
          />

          <Editor
            height={400}
            description={TOGGLE_BUTTON_SIZES}
            code={`import { ToggleButtonGroup, Divider } from '@nlmk/ds-2.0';

const { Button } = ToggleButtonGroup;

export default App = () => {
  return (
    <div
      style={{
        display: 'flex',
        flexDirection: 'column',
        gap: '12px'
      }}
    >
      <ToggleButtonGroup size=""${sizeMapping.default}"">
        <Button onClick={() => alert('First option')}>
          <Button.Icon/>
        </Button>
        <Button onClick={() => alert('Second option')}>
          <Button.Icon/>
        </Button>
      </ToggleButtonGroup>

      <Divider dashed />

      <ToggleButtonGroup size=""${sizeMapping.compact}"">
        <Button onClick={() => alert('First option')}>
          <Button.Icon/>
        </Button>
        <Button onClick={() => alert('Second option')}>
          <Button.Icon/>
        </Button>
      </ToggleButtonGroup>
    </div>
  )
}
`}
          />

          <Editor
            height={400}
            description={TOGGLE_BUTTON_ICON}
            code={`import { ToggleButtonGroup, IconAddPlusCircleOutlined24, IconDeleteMinusOutlined24 } from '@nlmk/ds-2.0';
import { useState } from 'react';

const { Button } = ToggleButtonGroup;

export default App = () => {
  const [count, setCount] = useState(0)
  return (
    <ToggleButtonGroup>
      <Button onClick={() => setCount(count+1)}>
        <Button.Icon>
          <IconAddPlusCircleOutlined24 />
        </Button.Icon>
        <Button.Label>
          Plus {count}
        </Button.Label>
      </Button>
      <Button onClick={() => alert('Count is '+ count)}>
        <Button.Icon/>
        <Button.Label>
          Check result
        </Button.Label>
      </Button>
      <Button onClick={() => setCount(count-1)}>
        <Button.Icon>
          <IconDeleteMinusOutlined24 />
        </Button.Icon>
        <Button.Label>
          Minus {count}
        </Button.Label>
      </Button>
    </ToggleButtonGroup>
  )
}
`}
          />

          <Editor
            height={400}
            description={TOGGLE_BUTTON_BADGE}
            code={`import { ToggleButtonGroup, IconAddPlusCircleOutlined24, IconDeleteMinusOutlined24 } from '@nlmk/ds-2.0';
import { useState } from 'react';

const { Button } = ToggleButtonGroup;

export default App = () => {
  const [count, setCount] = useState(0)
  return (
    <ToggleButtonGroup>
      <Button onClick={() => setCount(count+1)}>
        <Button.Icon>
          <IconAddPlusCircleOutlined24 />
        </Button.Icon>
        <Button.Label>
          Plus
        </Button.Label>
        <Button.Badge>
          {count}
        </Button.Badge>
      </Button>
      <Button onClick={() => alert('Count is '+ count)}>
        <Button.Icon/>
        <Button.Label>
          Check result
        </Button.Label>
        <Button.Badge>
          {count}
        </Button.Badge>
      </Button>
      <Button onClick={() => setCount(count-1)}>
        <Button.Icon>
          <IconDeleteMinusOutlined24 />
        </Button.Icon>
        <Button.Label>
          Minus
        </Button.Label>
        <Button.Badge>
          {count}
        </Button.Badge>
      </Button>
    </ToggleButtonGroup>
  )
}
`}
          />

          <Editor
            height={400}
            description={TOGGLE_BUTTON_OPTIONS}
            code={`import { ToggleButtonGroup, Divider } from '@nlmk/ds-2.0';

const { Button } = ToggleButtonGroup;

export default App = () => {
  return (
    <div
      style={{
        display: 'flex',
        flexDirection: 'column',
        gap: '12px'
      }}
    >
      <ToggleButtonGroup status=""${statusMapping.default}"">
        <Button onClick={() => alert('First option')}>
          <Button.Icon/>
        </Button>
        <Button onClick={() => alert('Second option')}>
          <Button.Icon/>
        </Button>
      </ToggleButtonGroup>

      <Divider dashed />

      <ToggleButtonGroup status=""${statusMapping.error}"">
        <Button onClick={() => alert('First option')}>
          <Button.Icon/>
        </Button>
        <Button onClick={() => alert('Second option')}>
          <Button.Icon/>
        </Button>
      </ToggleButtonGroup>

      <Divider dashed />

      <ToggleButtonGroup status=""${statusMapping.warning}"">
        <Button onClick={() => alert('First option')}>
          <Button.Icon/>
        </Button>
        <Button onClick={() => alert('Second option')}>
          <Button.Icon/>
        </Button>
      </ToggleButtonGroup>

      <Divider dashed />

      <ToggleButtonGroup status=""${statusMapping.success}"">
        <Button onClick={() => alert('First option')}>
          <Button.Icon/>
        </Button>
        <Button onClick={() => alert('Second option')}>
          <Button.Icon/>
        </Button>
      </ToggleButtonGroup>
    </div>
  )
}
`}
          />

          <Editor
            height={400}
            description={TOGGLE_BUTTON_COLOR_OPTIONS}
            code={`import { ToggleButtonGroup, IconAddPlusCircleOutlined24, IconDeleteMinusOutlined24 } from '@nlmk/ds-2.0';
import { useState } from 'react';

const { Button } = ToggleButtonGroup;

export default App = () => {
  const [count, setCount] = useState(0)
  return (
    <ToggleButtonGroup status=""default"">
      <Button onClick={() => setCount(count+1)} status=""success"">
        <Button.Icon>
          <IconAddPlusCircleOutlined24 />
        </Button.Icon>
        <Button.Label>
          Plus
        </Button.Label>
        <Button.Badge>
          {(count + 1).toString()}
        </Button.Badge>
      </Button>
      <Button onClick={() => alert('Count is '+ count)}>
        <Button.Icon/>
        <Button.Label>
          Check result
        </Button.Label>
        <Button.Badge>
          {count.toString()}
        </Button.Badge>
      </Button>
      <Button onClick={() => setCount(count-1)} status=""error"">
        <Button.Icon>
          <IconDeleteMinusOutlined24 />
        </Button.Icon>
        <Button.Label>
          Minus
        </Button.Label>
        <Button.Badge>
          {(count - 1).toString()}
        </Button.Badge>
      </Button>
    </ToggleButtonGroup>
  )
}
`}
          />

          <Properties argsTypes={argsTypes} />
        </>
      )}
      {activeTab == TabIds.design && <FigmaEmbed url={FIGMA_URL} />}
      {activeTab == TabIds.tests && <Tests componentName={COMPONENT_NAME} />}
    </div>
  );
};

export default Stories;
"
Codes for component Tooltip index.tsx,"import React, { FC } from 'react';
import { Tooltip as ReactTooltip, TooltipRefProps } from 'react-tooltip';

import { generateUUID } from '@components/declaration';
import clsx from 'clsx';

import { ITooltipProps } from './types';

import styles from './Tooltip.module.scss';

import { Typography } from '..';
import { ETooltipBehaviorType, ETooltipPlacementType } from './enums';
import ReactDOM from 'react-dom';

export const TooltipPortal: FC<ITooltipProps> = ({ children, ...props }) => {
  return ReactDOM.createPortal(
    <div{...props}>
      {children}
    </div>,
    document.body
  );
};

const Tooltip: FC<ITooltipProps> = ({
  title,
  description,
  className,
  children,
  behavior = ETooltipBehaviorType.hover,
  placement = ETooltipPlacementType.top,
  render,
  clickable = false,
  popupClassName
}) => {
  const tooltipRef = React.useRef<TooltipRefProps>(null);

  const handleFocus = () => {
    behavior === ETooltipBehaviorType.focus && tooltipRef.current?.open();
  };

  const handleBlur = () => {
    behavior === ETooltipBehaviorType.focus && tooltipRef.current?.close();
  };

  const handleClick = () => {
    if (behavior === ETooltipBehaviorType.click && tooltipRef?.current?.isOpen) {
      tooltipRef.current?.close();
    }
  }

  const renderTitle = (title: string): JSX.Element => {
    return (
      <Typography className={styles['tooltip-title']} variant=""Caption-Bold"">
        {title}
      </Typography>
    );
  };

  const renderDescription = (description: string): JSX.Element => {
    return (
      <Typography className={styles['tooltip-description']} variant=""Caption-Medium"">
        {description}
      </Typography>
    );
  };

  const tooltipId = generateUUID();

  const hasContent = title || description || render;

  if (!hasContent) {
    return <>{children}</>;
  }

  return (
    <div className={clsx(styles.tooltip, className)}>
      <div
        className={styles['tooltip-target']}
        onFocus={handleFocus}
        onBlur={handleBlur}
        onClick={handleClick}
        data-tooltip-id={tooltipId}
      >
        {children}
      </div>
      <TooltipPortal>
        <ReactTooltip
          ref={tooltipRef}
          id={tooltipId}
          openOnClick={behavior === ETooltipBehaviorType.click}
          place={placement}
          className={clsx(styles['tooltip-wrapper'], popupClassName)}
          classNameArrow={styles['arrow-styling']}
          clickable={clickable}
        >
          {title && renderTitle(title)}
          {description && renderDescription(description)}
          {render && <>{render}</>}
        </ReactTooltip>
      </TooltipPortal>
    </div>
  );
};

export default Tooltip;
"
Styles for component Tooltip Tooltip.module.scss,"@mixin content-mixin {
  width: 100%;
  margin: 0;
  padding: 0;
}

.tooltip {
  font: var(--font-families-pt-root-ui);
  position: relative;
  display: inline-block;
  width: auto;

  &-target {
    display: inline-block;
    border: none;
    background: inherit;
    font-size: inherit;
    color: inherit;
    outline: inherit;
    cursor: inherit;
    padding: 0;
  }

  &-container {
    position: absolute;
    display: flex;
    left: 50%;
    bottom: var(--tooltip-placement);
    margin: 0;
    padding: 8px 12px;
    align-items: center;
    width: max-content;
    z-index: 1000;
    color: var(--ac-tooltip-text);
    background-color: var(--ac-tooltip-bg);
    border-radius: var(--4-radius);
    transform: translateX(-50%);
    pointer-events: none;

    &--top {
      bottom: var(--tooltip-placement);
    }

    &--bottom {
      bottom: unset !important;
      top: var(--tooltip-placement);
    }

    &--left {
      left: unset;
      bottom: auto;
      right: var(--tooltip-placement);
      transform: translateX(0);
      margin-right: 0;
      margin-top: var(--4-space);
      width: max-content;
    }

    &--right {
      bottom: auto;
      left: var(--tooltip-placement);
      transform: translateX(0);
      margin-left: 0;
      margin-top: var(--4-space);
      width: max-content;
    }
  }

  &-content {
    position: relative;
    display: flex;
    flex-direction: column;
    grid-gap: 8px;
  }

  &-title {
    @include content-mixin;
  }

  &-description {
    @include content-mixin;
  }

  &-list {
    padding-left: 6px;

    &-item {
      width: 100%;
      margin: 0;
      padding: 0;
    }
  }

  &-transition {
    &-enter {
      opacity: 0;
    }

    &-enter-active {
      transition: all 200ms;
      opacity: 1;
    }

    &-exit {
      opacity: 1;
    }

    &-exit-active {
      transition: all 200ms;
      opacity: 0;
    }
  }
}

.tooltip-wrapper {
  display: flex;
  flex-direction: column;
  gap: var(--8-space);
  width: max-content;
  pointer-events: none;
  z-index: 10000;
}

.tooltip .tooltip-wrapper {
  border-radius: var(--4-radius);
  background-color: var(--ac-tooltip-bg);
  color: var(--ac-tooltip-text);
  padding: var(--8-space) var(--12-space);
}

.arrow-styling {
  display: none;
}
"
Types for component index.ts,"/** Компоненты */
export { default as AttachFiles } from './AttachFiles';
export { default as File } from './AttachFiles/subcomponents/File';
export { default as Accordion } from './Accordion';
export { default as Alert } from './Alert';
export { default as Avatar } from './Avatar';
export { default as Input } from './Input';
export { default as ErrorPage } from './ErrorPage';
export { default as List } from './List';
export { default as Link } from './Link';
export { default as ListItem } from './ListItem';
export { default as Select } from './Select';
export { default as PseudoInput } from './PseudoInput';
export { default as Radio } from './Radio';
export { default as Box } from './Box';
export { default as Grid } from './Grid';
export { default as Button } from './Button';
export { default as Badge } from './Badge';
export { default as Breadcrumbs } from './Breadcrumbs';
export { default as Card } from './Card';
export { default as Chip } from './Chip';
export { default as DragAndDrop } from './DragAndDrop';
export { default as Checkbox } from './Checkbox';
export { default as Typography } from './Typography';
export { default as Tooltip } from './Tooltip';
export { default as Icon } from './Icon';
export { default as IconContainer } from './Icon/subcomponent/IconContainer';
export { default as ThemeSwitcher } from './ThemeSwitcher';
export { default as DatePicker } from './DatePicker';
export { default as DateTime } from './DateTime';
export { default as InputRange } from './InputRange';
export { default as InputSlider } from './InputSlider';
export { default as SkeletonLoader } from './SkeletonLoader';
export { default as Spinner } from './Spinner';
export { default as Tabs } from './Tabs';
export { default as ClickAwayListener } from './ClickAwayListener';
export { default as ProgressBar } from './ProgressBar';
export { default as Divider } from './Divider';
export { default as Snackbar } from './Snackbar';
export { default as Header } from './Header';
export { default as Switch } from './Switch';
export { default as TimePicker } from './TimePicker';
export { default as ToggleButtonGroup } from './ToggleButtonGroup';
export { default as SegmentButtonGroup } from './SegmentButtonGroup';
export { default as ImagePicture } from './ImagePicture';
export { default as Modal } from './Modal';
export { default as Sidebar } from './Sidebar';
export { default as SlideToggle } from './SlideToggle';
export { default as MenuItem } from './Sidebar';
export { default as SubmenuItem } from './Sidebar';
export { default as Scrollbar } from './Scrollbar';
export { default as Drawer } from './Drawer';
export { default as Dropdown } from './Dropdown';
export { default as DropdownMenuItem } from './Dropdown/subcomponents/DropdownMenuItem';
export { default as SimpleSelect } from './SimpleSelect';
export { default as OptionItem } from './SimpleSelect/subcomponents/OptionItem';
export { default as Stepper } from './Stepper';
export * from './ThemeSwitcher';
export * from './Icon/IconsDirectory';

/** Хуки */
export * from './Theme/hooks';
"
Types for component Tooltip types.ts,"import { ReactNode } from 'react';

import { ETooltipBehaviorType, ETooltipPlacementType } from './enums';

export type TooltipBehaviorType = `${ETooltipBehaviorType}`;

export type TooltipPlacementType = `${ETooltipPlacementType}`;

export interface ITooltipProps {
  className?: string;
  popupClassName?: string;
  behavior?: TooltipBehaviorType;
  placement?: TooltipPlacementType;
  children: ReactNode;
  render?: ReactNode;
  title?: string;
  description?: string;
  clickable?: boolean;
}
"
Codes for component Tooltip _stories Stories.tsx,"import React, { useState } from 'react';

import Editor from '@components/_storybook/Stories/components/Editor';
import FigmaEmbed from '@components/_storybook/Stories/components/FigmaEmbed';
import Header from '@components/_storybook/Stories/components/Header';
import Properties from '@components/_storybook/Stories/components/Properties';
import Tests from '@components/_storybook/Stories/components/Tests';
import '@components/_storybook/Stories/styles.css';
import { Tabs } from '@components/index';

import styles from '@components/_storybook/Stories/Stories.module.scss';

import argsTypes from './argsTypes';

const style = `{{
  display: 'flex',
  flexDirection: 'column',
  justifyContent: 'center',
  gap: '12px',
  padding: '30px',
  margin: '0 auto',
  height: '180px',
  color: 'var(--text-grey-900)'
}}`;

const Stories = (): JSX.Element => {
  const [activeTab, setActiveTab] = useState(0);

  return (
    <div className={styles.wrapper}>
      <Header
        title=""Tooltip""
        description=""Компонент-подсказка, появляющийся при определенном взаимодействии с дочерним элементом компонента (по умолчанию: при наведении курсора). Tooltip рассчитан не только на работу с простой информацией (текст) с единой стилизацией, но и на визуализацию подсказок, содержащих нестандартную информацию (списки, картинки, таблицы).""
        isStable
        codeLink=""https://github.com/nlmk-group/ds-2.0/tree/main/src/components/InputRange""
        figmaLink=""https://www.figma.com/file/MSMqfqJrQNaqbLe4Ctkq7n/Design-System-2.0-NLMK-(beta)-(Community)?type=design&node-id=1039%3A43759&mode=design&t=awyt3Fzj1XS6th7v-1""
      />

      <div className={styles.tabs}>
        <Tabs>
          <Tabs.Tab label=""Разработчику"" active={0 === Number(activeTab)} onClick={() => setActiveTab(0)} />
          {/* <Tabs.Tab label=""Дизайнеру"" active={1 === Number(activeTab)} onClick={() => setActiveTab(1)} /> */}
          <Tabs.Tab label=""Тестирование"" active={2 === Number(activeTab)} onClick={() => setActiveTab(2)} />
        </Tabs>
      </div>

      {Number(activeTab) == 0 && (
        <>
          <Editor
            description=""Тултип по умолчанию c описанием.""
            code={`import { Tooltip, Button } from '@nlmk/ds-2.0';

export default  App = () => (
  <div style=${style}>
    <Tooltip description=""Сюда вы можете добавить текст/подсказу для компонента"">
      <Button variant=""secondary"">Наведи на меня курсор!</Button>
    </Tooltip>
  </div>
)
`}
          />

          <Editor
            description=""Тултип с разными вариантами расположения.""
            code={`import { Tooltip, Button } from '@nlmk/ds-2.0';

export default  App = () => (
  <div style=${style}>
    <Tooltip placement=""top"" description=""Tooltip on top"">
      <Button variant=""secondary"">Наведи, тултип будет сверху!</Button>
    </Tooltip>
    <Tooltip placement=""bottom"" description=""Tooltip on bottom"">
      <Button variant=""secondary"">Наведи, тултип будет снизу!</Button>
    </Tooltip>
    <Tooltip placement=""left"" description=""Tooltip on left"">
      <Button variant=""secondary"">Наведи, тултип будет слева!</Button>
    </Tooltip>
    <Tooltip placement=""right"" description=""Tooltip on right"">
      <Button variant=""secondary"">Наведи, тултип будет справа!</Button>
    </Tooltip>
  </div>
)
`}
          />

          <Editor
            description=""Тултип с вариантами поведения на отображение.""
            code={`import { Tooltip, Button } from '@nlmk/ds-2.0';

export default  App = () => (
  <div style=${style}>
    <Tooltip
      placement=""top""
      behavior=""hover""
      description=""Tooltip on hover""
    >
      <Button variant=""secondary"">Тултип появится при наведении!</Button>
    </Tooltip>
    <Tooltip
      placement=""top""
      behavior=""click""
      description=""Tooltip on click""
    >
      <Button variant=""secondary"">Тултип появится при клике!</Button>
    </Tooltip>
    <Tooltip
      placement=""top""
      behavior=""focus""
      description=""Tooltip on focus""
    >
      <Button variant=""secondary"">Тултип появится при фокусе!</Button>
    </Tooltip>
  </div>
)
`}
          />

          <Editor
            description=""По умолчанию Тултип не открывается вокруг disabled элементов. Для того чтобы Тултип открывался корректно в этом случае, нужно оборачиваемый элемент обернуть простым элементом-оберткой, например span.""
            code={`import { Tooltip, Button } from '@nlmk/ds-2.0';

export default  App = () => (
  <div style=${style}>
    <Tooltip description=""Сюда вы можете добавить текст/подсказу для компонента"">
      <span>
        <Button variant=""secondary"" disabled>
          Наведи на меня курсор!
        </Button>
      </span>
    </Tooltip>
  </div>
)
`}
          />

          <Editor
            height={600}
            description=""Тултип с кастомной JSX разметкой внутри""
            code={`import { Tooltip, Button, Typography, Icon, Box } from '@nlmk/ds-2.0';

const RenderCustom = () => {
  return (
    <div>
    <Box color=""var(--ac-tooltip-text)"" gap=""var(--8-size)"" alignItems=""center"" paddingSpace=""xs"">
      <Icon name=""IconDoneCheckOutlined16"" color=""success""/>
      <Typography variant=""Caption-Medium"">Первый пункт</Typography>
    </Box>
      <Box color=""var(--ac-tooltip-text)"" gap=""var(--8-size)"" alignItems=""center"" paddingSpace=""xs"">
        <Icon name=""IconDoneCheckOutlined16"" color=""success""/>
        <Typography variant=""Caption-Medium"">Второй пункт</Typography>
      </Box>
        <Box color=""var(--ac-tooltip-text)"" gap=""var(--8-size)"" alignItems=""center"" paddingSpace=""xs"">
        <Icon name=""IconDoneCheckOutlined16"" color=""success""/>
        <Typography variant=""Caption-Medium"">Третий пункт</Typography>
      </Box>
    </div>
  );
};

export default  App = () =>(
  <div style=${style}>
    <Tooltip
      behavior=""click""
      title=""Заголовок тултипа с кастомным элементом""
      description=""за добавление кастомного элемента отвечает prop - render""
      render={<RenderCustom/>}
    >
      <Button variant=""secondary"">
        Нажми на меня для появления тултипа!
      </Button>
    </Tooltip>
  </div>
)
`}
          />

          <Properties argsTypes={argsTypes} />
        </>
      )}
      {Number(activeTab) == 1 && (
        <FigmaEmbed url=""https://www.figma.com/file/MSMqfqJrQNaqbLe4Ctkq7n/Design-System-2.0-NLMK-(beta)-(Community)?type=design&node-id=1039%3A43759&mode=design&t=awyt3Fzj1XS6th7v-1"" />
      )}
      {Number(activeTab) == 2 && <Tests componentName=""Tooltip"" />}
    </div>
  );
};

export default Stories;
"
Types for component Tooltip _stories argsTypes.ts,"import { ETooltipBehaviorType, ETooltipPlacementType } from '../enums';

export const argsTypes = {
  title: {
    description: 'Заголовок',
    control: { type: 'text' }
  },
  description: {
    description: 'Обычный текст внутри тултипа',
    control: { type: 'text' }
  },
  behavior: {
    description: 'Поведение тултипа',
    table: {
      defaultValue: {
        summary: ETooltipBehaviorType.hover
      }
    },
    options: Object.values(ETooltipBehaviorType),
    control: { type: 'select' }
  },
  placement: {
    description: 'Расположение тултипа',
    table: {
      defaultValue: {
        summary: ETooltipPlacementType.top
      }
    },
    options: Object.values(ETooltipPlacementType),
    control: { type: 'select' }
  },
  clickable: {
    description: 'Отвечает за кликабельность тултипа.',
    control: { type: 'boolean' },
    table: {
      defaultValue: {
        summary: 'false'
      }
    }
  },
  render: {
    description: 'Кастомный ReactNode элемент внутри тултипа'
  },
  className: {
    description: 'Дополнительные классы для стилизации компонента'
  }
};

export default argsTypes;
"
Types for component Tooltip enums.ts,"/**
 * @type {enum} ETooltipBehaviorType
 * @type {enum} ETooltipPlacementType
 */

export enum ETooltipBehaviorType {
  hover = 'hover',
  click = 'click',
  focus = 'focus'
}

export enum ETooltipPlacementType {
  top = 'top',
  'top-start' = 'top-start',
  'top-end' = 'top-end',
  bottom = 'bottom',
  'bottom-start' = 'bottom-start',
  'bottom-end' = 'bottom-end',
  left = 'left',
  'left-start' = 'left-start',
  'left-end' = 'left-end',
  right = 'right',
  'right-start' = 'right-start',
  'right-end' = 'right-end',
}"
Types for component Typography enums.ts,"export enum ETypographyVariants {
  'Heading1' = 'Heading1',
  'Heading2' = 'Heading2',
  'Heading3' = 'Heading3',
  'Heading4' = 'Heading4',
  'Subheading1' = 'Subheading1',
  'Subheading2' = 'Subheading2',
  'Subheading2-Medium' = 'Subheading2-Medium',
  'Subheading3' = 'Subheading3',
  'Subheading3-Medium' = 'Subheading3-Medium',
  'Body' = 'Body',
  'Body-Medium' = 'Body-Medium',
  'Body-Bold' = 'Body-Bold',
  'Body1' = 'Body1',
  'Body1-Medium' = 'Body1-Medium',
  'Body1Table-Medium' = 'Body1Table-Medium',
  'Body1Mono-Medium' = 'Body1Mono-Medium',
  'Body1Mono-Bold' = 'Body1Mono-Bold',
  'Body1-Bold' = 'Body1-Bold',
  'Body2' = 'Body2',
  'Body2-Medium' = 'Body2-Medium',
  'Body2Mono-Medium' = 'Body2Mono-Medium',
  'Body2Mono-Bold' = 'Body2Mono-Bold',
  'Body2-Bold' = 'Body2-Bold',
  'Caption' = 'Caption',
  'Caption-Medium' = 'Caption-Medium',
  'Caption-Bold' = 'Caption-Bold',
  'CaptionMono' = 'CaptionMono',
  'CaptionMono-Medium' = 'CaptionMono-Medium',
  'CaptionMono-Bold' = 'CaptionMono-Bold',
  'Additional-Bold' = 'Additional-Bold'
}
"
Types for component Typography types.ts,"import { CSSProperties, HTMLAttributes, ReactNode } from 'react';

import { ETypographyVariants } from './enums';

export interface ITypographyProps extends HTMLAttributes<HTMLSpanElement> {
  variant?: `${ETypographyVariants}`;
  children: ReactNode;
  className?: string;
  color?: CSSProperties['color'];
  style?: CSSProperties;
}
"
Styles for component Typography Typography.module.scss,"@mixin typography-properties($args...) {
  $font-family: nth($args, 1);
  $font-size: nth($args, 2);
  $font-weight: nth($args, 3);
  $line-height: nth($args, 4);
  $letter-spacing: nth($args, 5);
  $text-decoration: nth($args, 6);
  font-family: $font-family;
  font-size: $font-size;
  font-weight: $font-weight;
  line-height: $line-height;
  letter-spacing: $letter-spacing;
  text-decoration: $text-decoration;
  overflow-wrap: break-word;
}

.typography {
  display: block;
  margin-block-start: 0;
  margin-block-end: 0;
  margin-inline-start: 0;
  margin-inline-end: 0;
  font-variant-numeric: tabular-nums lining-nums;
  color: inherit;
}

.typography--variant-Heading1 {
  @include typography-properties(
    var(--heading1-48-fontFamily),
    var(--heading1-48-fontSize),
    var(--heading1-48-fontWeight),
    var(--heading1-48-lineHeight),
    var(--heading1-48-letterSpacing),
    var(--heading1-48-textDecoration)
  );
}

.typography--variant-Heading2 {
  @include typography-properties(
    var(--heading2-32-fontFamily),
    var(--heading2-32-fontSize),
    var(--heading2-32-fontWeight),
    var(--heading2-32-lineHeight),
    var(--heading2-32-letterSpacing),
    var(--heading2-32-textDecoration)
  );
}

.typography--variant-Heading3 {
  @include typography-properties(
    var(--heading3-24-fontFamily),
    var(--heading3-24-fontSize),
    var(--heading3-24-fontWeight),
    var(--heading3-24-lineHeight),
    var(--heading3-24-letterSpacing),
    var(--heading3-24-textDecoration)
  );
}

.typography--variant-Heading4 {
  @include typography-properties(
    var(--heading4-20-fontFamily),
    var(--heading4-20-fontSize),
    var(--heading4-20-fontWeight),
    var(--heading4-20-lineHeight),
    var(--heading4-20-letterSpacing),
    var(--heading4-20-textDecoration)
  );
}

.typography--variant-Subheading1 {
  @include typography-properties(
    var(--subheading1-32-fontFamily),
    var(--subheading1-32-fontSize),
    var(--subheading1-32-fontWeight),
    var(--subheading1-32-lineHeight),
    var(--subheading1-32-letterSpacing),
    var(--subheading1-32-textDecoration)
  );
}

.typography--variant-Subheading2 {
  @include typography-properties(
    var(--subheading2-24-fontFamily),
    var(--subheading2-24-fontSize),
    var(--subheading2-24-fontWeight),
    var(--subheading2-24-lineHeight),
    var(--subheading2-24-letterSpacing),
    var(--subheading2-24-textDecoration)
  );
}

.typography--variant-Subheading2-Medium {
  @include typography-properties(
    var(--subheading2-medium-24-fontFamily),
    var(--subheading2-medium-24-fontSize),
    var(--subheading2-medium-24-fontWeight),
    var(--subheading2-medium-24-lineHeight),
    var(--subheading2-medium-24-letterSpacing),
    var(--subheading2-medium-24-textDecoration)
  );
}

.typography--variant-Subheading3 {
  @include typography-properties(
    var(--subheading3-20-fontFamily),
    var(--subheading3-20-fontSize),
    var(--subheading3-20-fontWeight),
    var(--subheading3-20-lineHeight),
    var(--subheading3-20-letterSpacing),
    var(--subheading3-20-textDecoration)
  );
}

.typography--variant-Subheading3-Medium {
  @include typography-properties(
    var(--subheading3-medium-20-fontFamily),
    var(--subheading3-medium-20-fontSize),
    var(--subheading3-medium-20-fontWeight),
    var(--subheading3-medium-20-lineHeight),
    var(--subheading3-medium-20-letterSpacing),
    var(--subheading3-medium-20-textDecoration)
  );
}

.typography--variant-Body {
  @include typography-properties(
    var(--body-18-fontFamily),
    var(--body-18-fontSize),
    var(--body-18-fontWeight),
    var(--body-18-lineHeight),
    var(--body-18-letterSpacing),
    var(--body-18-textDecoration)
  );
}

.typography--variant-Body-Medium {
  @include typography-properties(
    var(--body-medium-18-fontFamily),
    var(--body-medium-18-fontSize),
    var(--body-medium-18-fontWeight),
    var(--body-medium-18-lineHeight),
    var(--body-medium-18-letterSpacing),
    var(--body-medium-18-textDecoration)
  );
}

.typography--variant-Body-Bold {
  @include typography-properties(
    var(--body-bold-18-fontFamily),
    var(--body-bold-18-fontSize),
    var(--body-bold-18-fontWeight),
    var(--body-bold-18-lineHeight),
    var(--body-bold-18-letterSpacing),
    var(--body-bold-18-textDecoration)
  );
}

.typography--variant-Body1 {
  @include typography-properties(
    var(--body1-16-fontFamily),
    var(--body1-16-fontSize),
    var(--body1-16-fontWeight),
    var(--body1-16-lineHeight),
    var(--body1-16-letterSpacing),
    var(--body1-16-textDecoration)
  );
}

.typography--variant-Body1-Medium {
  @include typography-properties(
    var(--body1-medium-16-fontFamily),
    var(--body1-medium-16-fontSize),
    var(--body1-medium-16-fontWeight),
    var(--body1-medium-16-lineHeight),
    var(--body1-medium-16-letterSpacing),
    var(--body1-medium-16-textDecoration)
  );
}

.typography--variant-Body1Table-Medium {
  @include typography-properties(
    var(--body1-table-medium-16-fontFamily),
    var(--body1-table-medium-16-fontSize),
    var(--body1-table-medium-16-fontWeight),
    var(--body1-table-medium-16-lineHeight),
    var(--body1-table-medium-16-letterSpacing),
    var(--body1-table-medium-16-textDecoration)
  );
}

.typography--variant-Body1-Bold {
  @include typography-properties(
    var(--body1-bold-16-fontFamily),
    var(--body1-bold-16-fontSize),
    var(--body1-bold-16-fontWeight),
    var(--body1-bold-16-lineHeight),
    var(--body1-bold-16-letterSpacing),
    var(--body1-bold-16-textDecoration)
  );
}

.typography--variant-Body1Mono-Medium {
  @include typography-properties(
    var(--body1-mono-medium-16-fontFamily),
    var(--body1-mono-medium-16-fontSize),
    var(--body1-mono-medium-16-fontWeight),
    var(--body1-mono-medium-16-lineHeight),
    var(--body1-mono-medium-16-letterSpacing),
    var(--body1-mono-medium-16-textDecoration)
  );
}

.typography--variant-Body1Mono-Bold {
  @include typography-properties(
    var(--body1-mono-bold-16-fontFamily),
    var(--body1-mono-bold-16-fontSize),
    var(--body1-mono-bold-16-fontWeight),
    var(--body1-mono-bold-16-lineHeight),
    var(--body1-mono-bold-16-letterSpacing),
    var(--body1-mono-bold-16-textDecoration)
  );
}

.typography--variant-Body2 {
  @include typography-properties(
    var(--body2-14-fontFamily),
    var(--body2-14-fontSize),
    var(--body2-14-fontWeight),
    var(--body2-14-lineHeight),
    var(--body2-14-letterSpacing),
    var(--body2-14-textDecoration)
  );
}

.typography--variant-Body2-Medium {
  @include typography-properties(
    var(--body2-medium-14-fontFamily),
    var(--body2-medium-14-fontSize),
    var(--body2-medium-14-fontWeight),
    var(--body2-medium-14-lineHeight),
    var(--body2-medium-14-letterSpacing),
    var(--body2-medium-14-textDecoration)
  );
}

.typography--variant-Body2-Bold {
  @include typography-properties(
    var(--body2-bold-14-fontFamily),
    var(--body2-bold-14-fontSize),
    var(--body2-bold-14-fontWeight),
    var(--body2-bold-14-lineHeight),
    var(--body2-bold-14-letterSpacing),
    var(--body2-bold-14-textDecoration)
  );
}

.typography--variant-Body2Mono-Medium {
  @include typography-properties(
    var(--body2-mono-medium-14-fontFamily),
    var(--body2-mono-medium-14-fontSize),
    var(--body2-mono-medium-14-fontWeight),
    var(--body2-mono-medium-14-lineHeight),
    var(--body2-mono-medium-14-letterSpacing),
    var(--body2-mono-medium-14-textDecoration)
  );
}

.typography--variant-Body2Mono-Bold {
  @include typography-properties(
    var(--body2-mono-bold-14-fontFamily),
    var(--body2-mono-bold-14-fontSize),
    var(--body2-mono-bold-14-fontWeight),
    var(--body2-mono-bold-14-lineHeight),
    var(--body2-mono-bold-14-letterSpacing),
    var(--body2-mono-bold-14-textDecoration)
  );
}

.typography--variant-Caption {
  @include typography-properties(
    var(--caption-12-fontFamily),
    var(--caption-12-fontSize),
    var(--caption-12-fontWeight),
    var(--caption-12-lineHeight),
    var(--caption-12-letterSpacing),
    var(--caption-12-textDecoration)
  );
}

.typography--variant-Caption-Medium {
  @include typography-properties(
    var(--caption-medium-12-fontFamily),
    var(--caption-medium-12-fontSize),
    var(--caption-medium-12-fontWeight),
    var(--caption-medium-12-lineHeight),
    var(--caption-medium-12-letterSpacing),
    var(--caption-medium-12-textDecoration)
  );
}

.typography--variant-Caption-Bold {
  @include typography-properties(
    var(--caption-bold-12-fontFamily),
    var(--caption-bold-12-fontSize),
    var(--caption-bold-12-fontWeight),
    var(--caption-bold-12-lineHeight),
    var(--caption-bold-12-letterSpacing),
    var(--caption-bold-12-textDecoration)
  );
}

.typography--variant-CaptionMono {
  @include typography-properties(
    var(--caption-mono-12-fontFamily),
    var(--caption-mono-12-fontSize),
    var(--caption-mono-12-fontWeight),
    var(--caption-mono-12-lineHeight),
    var(--caption-mono-12-letterSpacing),
    var(--caption-mono-12-textDecoration)
  );
}

.typography--variant-CaptionMono-Medium {
  @include typography-properties(
    var(--caption-mono-medium-12-fontFamily),
    var(--caption-mono-medium-12-fontSize),
    var(--caption-mono-medium-12-fontWeight),
    var(--caption-mono-medium-12-lineHeight),
    var(--caption-mono-medium-12-letterSpacing),
    var(--caption-mono-medium-12-textDecoration)
  );
}

.typography--variant-CaptionMono-Bold {
  @include typography-properties(
    var(--caption-mono-bold-12-fontFamily),
    var(--caption-mono-bold-12-fontSize),
    var(--caption-mono-bold-12-fontWeight),
    var(--caption-mono-bold-12-lineHeight),
    var(--caption-mono-bold-12-letterSpacing),
    var(--caption-mono-bold-12-textDecoration)
  );
}

.typography--variant-Additional-Bold {
  @include typography-properties(
    var(--additional-bold-9-fontFamily),
    var(--additional-bold-9-fontSize),
    var(--additional-bold-9-fontWeight),
    var(--additional-bold-9-lineHeight),
    var(--additional-bold-9-letterSpacing),
    var(--additional-bold-9-textDecoration)
  );
}
"
Types for component Typography _stories argsTypes.ts,"const spanAttributes = [
  'class',
  'id',
  'style',
  'title',
  'lang',
  'dir',
  'data',
  'aria',
  'tabindex',
  'hidden',
  'accesskey',
  'draggable',
  'spellcheck',
  'contenteditable'
];
const list = [
  'Heading1',
  'Subheading1',
  'Heading2',
  'Subheading2',
  'Subheading2-Medium',
  'Heading3',
  'Subheading3',
  'Subheading3-Medium',
  'Heading4',
  'Body',
  'Body-Medium',
  'Body1',
  'Body1-Medium',
  'Body1Mono-Medium',
  'Body1Mono-Bold',
  'Body1-Bold',
  'Body2',
  'Body2-Medium',
  'Body2Mono-Medium',
  'Body2Mono-Bold',
  'Body2-Bold',
  'Caption',
  'Caption-Medium',
  'Caption-Bold',
  'CaptionMono',
  'CaptionMono-Medium',
  'CaptionMono-Bold'
];

export const argsTypes = {
  '*': {
    description: `У компонента есть возможность принимать все атрибуты, которые есть у span элемента – <b>${spanAttributes.join(
      ' | '
    )}</b>`,
    table: {
      defaultValue: {
        summary: '–'
      },
      type: {
        summary: '–'
      }
    }
  },
  'variant': {
    description: `Вариант текста - <b>${list.join(' | ')}</b>`,
    table: {
      defaultValue: {
        summary: 'Body1'
      },
      type: {
        summary: '–'
      }
    },
    control: { type: 'select' }
  },
  'color': {
    description: 'Цвет текста',
    table: {
      defaultValue: {
        summary: '–'
      },
      type: {
        summary: 'string'
      }
    },
    control: { type: 'color' }
  }
};
"
Codes for component Typography index.tsx,"import React, { CSSProperties, FC, ReactNode } from 'react';

import clsx from 'clsx';

import { ITypographyProps } from './types';

import styles from './Typography.module.scss';

import { ETypographyVariants } from './enums';

/**
 * Компонент Typography для стилизованного отображения текста.
 * @component
 * @param {Object} props - Свойства компонента Typography.
 * @param {ETypographyVariants} [props.variant=ETypographyVariants.Body1] - Вариант типографики.
 * @param {React.ReactNode} props.children - Текстовое содержимое.
 * @param {string} [props.className] - Дополнительный CSS класс.
 * @param {CSSProperties['color']} [props.color] - Цвет текста.
 * @param {CSSProperties} [props.style] - Дополнительные встроенные стили.
 * @returns {JSX.Element} Компонент Typography.
 */

const Typography: FC<ITypographyProps> = ({
  variant = ETypographyVariants.Body1,
  children,
  className,
  color,
  style,
  ...props
}: {
  variant?: `${ETypographyVariants}`;
  children: ReactNode;
  className?: string;
  color?: CSSProperties['color'];
  style?: CSSProperties;
}): JSX.Element => {
  const variantClass = styles[`typography--variant-${variant}`];

  return (
    <span
      data-testid=""typography-wrapper""
      className={clsx(variantClass, styles.typography, className)}
      style={{ color, ...style }}
      {...props}
    >
      {children}
    </span>
  );
};

export default Typography;
"
Codes for component Typography _stories Stories.tsx,"import React, { useState } from 'react';

import Editor from '@components/_storybook/Stories/components/Editor';
import FigmaEmbed from '@components/_storybook/Stories/components/FigmaEmbed';
import Header from '@components/_storybook/Stories/components/Header';
import Properties from '@components/_storybook/Stories/components/Properties';
import Tests from '@components/_storybook/Stories/components/Tests';
import '@components/_storybook/Stories/styles.css';
import { Tabs } from '@components/index';

import styles from '@components/_storybook/Stories/Stories.module.scss';

import { argsTypes } from './argsTypes';

enum TabIds {
  dev,
  design,
  tests
}

const COMPONENT_NAME = 'Typography';
const FIGMA_URL =
  'https://www.figma.com/file/MSMqfqJrQNaqbLe4Ctkq7n/Design-System-2.0-NLMK-(beta)-(Community)?type=design&node-id=1027%3A18324&mode=design&t=awyt3Fzj1XS6th7v-1';

const Stories = (): JSX.Element => {
  const [activeTab, setActiveTab] = useState<TabIds>(TabIds.dev);

  const isActive = (tab: TabIds) => {
    return activeTab === tab;
  };

  return (
    <div className={styles.wrapper}>
      <Header
        title={COMPONENT_NAME}
        description={`Компонент для стандартизации текста и относящимся к нему свойствам стилизации.`}
        isStable
        codeLink={`https://github.com/nlmk-group/ds-2.0/tree/main/src/components/${COMPONENT_NAME}`}
        figmaLink={FIGMA_URL}
      />

      <div className={styles.tabs}>
        <Tabs>
          <Tabs.Tab label=""Разработчику"" active={isActive(TabIds.dev)} onClick={() => setActiveTab(TabIds.dev)} />
          {/* <Tabs.Tab label=""Дизайнеру"" active={isActive(TabIds.design)} onClick={() => setActiveTab(TabIds.design)} /> */}
          <Tabs.Tab label=""Тестирование"" active={isActive(TabIds.tests)} onClick={() => setActiveTab(TabIds.tests)} />
        </Tabs>
      </div>

      {activeTab == TabIds.dev && (
        <>
          <Editor
            height={200}
            description=""Типография по умолчанию""
            code={`import { Typography } from '@nlmk/ds-2.0';

export default App = () => (
  <Typography>
    Default Typography Component
  </Typography>
)
              `}
          />
          <Editor
            height={400}
            description=""Элементы типографии представляют собой текст с обязательно примененными
            стилями: размером шрифта (font-size), величиной пространства между строками
            (line-height) и жирностью шрифта (font-weight). Также в таблице представлены
            пояснения для целевого использования объектов типографии.""
            code={`import { Typography } from '@nlmk/ds-2.0';

  const rows = [
    {
      title: 'Heading1',
      fontSize: 48,
      lineHeight: 56,
      fontWeight: 700,
      description: 'Заголовок'
    },
    {
      title: 'Subheading1',
      fontSize: 32,
      lineHeight: 40,
      fontWeight: 400,
      description: 'Подзаголовок'
    },
    {
      title: 'Heading2',
      fontSize: 32,
      lineHeight: 40,
      fontWeight: 700,
      description: 'Заголовок'
    },
    {
      title: 'Subheading2',
      fontSize: 24,
      lineHeight: 32,
      fontWeight: 400,
      description: 'Подзаголовок'
    },
    {
      title: 'Subheading2-Medium',
      fontSize: 24,
      lineHeight: 32,
      fontWeight: 500,
      description: 'Подзаголовок'
    },
    {
      title: 'Heading3',
      fontSize: 24,
      lineHeight: 32,
      fontWeight: 700,
      description: 'Заголовок'
    },
    {
      title: 'Subheading3',
      fontSize: 20,
      lineHeight: 28,
      fontWeight: 400,
      description: 'Подзаголовок'
    },
    {
      title: 'Subheading3-Medium',
      fontSize: 20,
      lineHeight: 28,
      fontWeight: 500,
      description: 'Подзаголовок'
    },
    {
      title: 'Heading4',
      fontSize: 20,
      lineHeight: 28,
      fontWeight: 700,
      description: 'Заголовок'
    },
    {
      title: 'Body',
      fontSize: 18,
      lineHeight: 24,
      fontWeight: 400,
      description: ''
    },
    {
      title: 'Body-Medium',
      fontSize: 18,
      lineHeight: 24,
      fontWeight: 500,
      description: ''
    },
    {
      title: 'Body-Bold',
      fontSize: 18,
      lineHeight: 24,
      fontWeight: 700,
      description: ''
    },
    {
      title: 'Body1',
      fontSize: 16,
      lineHeight: 22,
      fontWeight: 400,
      description: 'Текст контента тонкий'
    },
    {
      title: 'Body1-Medium',
      fontSize: 16,
      lineHeight: 22,
      fontWeight: 500,
      description: 'Текст инпутов, ячеек таблиц, контента'
    },
    {
      title: 'Body1Table-Medium',
      fontSize: 16,
      lineHeight: 16,
      fontWeight: 500,
      description: 'Текст для ячеек таблиц 40px и 32px'
    },
    {
      title: 'Body1Mono-Medium',
      fontSize: 16,
      lineHeight: 22,
      fontWeight: 500,
      description: 'Текст для цифр в ячейках таблиц'
    },
    {
      title: 'Body1Mono-Bold',
      fontSize: 16,
      lineHeight: 22,
      fontWeight: 700,
      description: 'Жирный текст для цифр в ячейках таблиц'
    },
    {
      title: 'Body1-Bold',
      fontSize: 16,
      lineHeight: 22,
      fontWeight: 700,
      description: 'Текст в кнопках, жирный текст у активных элементов'
    },
    {
      title: 'Body2',
      fontSize: 14,
      lineHeight: 18,
      fontWeight: 400,
      description: 'Текст контента тонкий'
    },
    {
      title: 'Body2-Medium',
      fontSize: 14,
      lineHeight: 18,
      fontWeight: 500,
      description: 'Текст инпутов, ячеек таблиц, контента'
    },
    {
      title: 'Body2Mono-Medium',
      fontSize: 14,
      lineHeight: 18,
      fontWeight: 500,
      description: 'Текст для цифр в ячейках таблиц'
    },
    {
      title: 'Body2Mono-Bold',
      fontSize: 14,
      lineHeight: 18,
      fontWeight: 700,
      description: 'Жирный текст для цифр в ячейках таблиц'
    },
    {
      title: 'Body2-Bold',
      fontSize: 14,
      lineHeight: 18,
      fontWeight: 700,
      description: 'Текст в кнопках, жирный текст у активных элементов'
    },
    {
      title: 'Caption',
      fontSize: 12,
      lineHeight: 16,
      fontWeight: 400,
      description: 'Текст мелкий для подписей, шкал графиков'
    },
    {
      title: 'Caption-Medium',
      fontSize: 12,
      lineHeight: 16,
      fontWeight: 500,
      description: 'Текст мелкий для подписей, шкал графиков'
    },
    {
      title: 'Caption-Bold',
      fontSize: 12,
      lineHeight: 16,
      fontWeight: 700,
      description: 'Текст мелкий для подписей, шкал графиков'
    },
    {
      title: 'CaptionMono',
      fontSize: 12,
      lineHeight: 16,
      fontWeight: 400,
      description: 'Моноширинное начертание для числовых данных'
    },
    {
      title: 'CaptionMono-Medium',
      fontSize: 12,
      lineHeight: 16,
      fontWeight: 500,
      description: 'Моноширинное начертание для числовых данных'
    },
    {
      title: 'CaptionMono-Bold',
      fontSize: 12,
      lineHeight: 16,
      fontWeight: 700,
      description: 'Моноширинное начертание для числовых данных'
    },
    {
      title: 'Additional-Bold',
      fontSize: 9,
      lineHeight: 12,
      fontWeight: 700,
      description: 'Жирный текст для Badge XS'
    }
  ];

export default App = () => (
  <>
  {rows.map(variant => (
    <div key={variant.title}>
      <Typography variant={variant.title} color=""primary"">
        {variant.title}
      </Typography>
      <Typography color=""primary"">
        {variant.fontSize} - {variant.lineHeight}
      </Typography>
      <Typography color=""primary"">{variant.fontWeight}</Typography>
      <Typography color=""primary"">{variant.description}</Typography>
    </div>
  ))}
  </>
)
              `}
          />

          <Properties argsTypes={argsTypes} />
        </>
      )}
      {activeTab == TabIds.design && <FigmaEmbed url={FIGMA_URL} />}
      {activeTab == TabIds.tests && <Tests componentName={COMPONENT_NAME} />}
    </div>
  );
};

export default Stories;
"
