Document Purpose,Content
Codes for components TimePicker index.tsx,"import React, { FC, useCallback, useEffect, useMemo, useState } from 'react';
import ReactDOM from 'react-dom';
import { usePopper } from 'react-popper';

import { generateUUID, TWO_DIGIT_FORMAT, useUpdatedValues } from '@components/declaration';
import { ClickAwayListener, PseudoInput } from '@components/index';
import clsx from 'clsx';
import { isEqual, set } from 'date-fns';

import { TDateValues, TTimePickerType } from './types';

import styles from './TimePicker.module.scss';

import TimePickerInput from './subcomponents/TimePickerInput';
import TimeSelector from './subcomponents/TimeSelector';

/**
 * Компонент TimePicker для выбора времени в различных форматах.
 * @component
 * @param {Object} props - Свойства компонента TimePicker.
 * @param {number|string} [props.id] - Уникальный идентификатор компонента.
 * @param {'time'|'timeWithSeconds'|'period'|'periodWithSeconds'} [props.type='time'] - Тип пикера времени.
 * @param {string} [props.name] - Имя поля для использования в формах.
 * @param {function} [props.enabledHourFrom] - Функция для определения начального доступного часа.
 * @param {function} [props.enabledHourTo] - Функция для определения конечного доступного часа.
 * @param {function} [props.enabledMinuteFrom] - Функция для определения начальной доступной минуты.
 * @param {function} [props.enabledMinuteTo] - Функция для определения конечной доступной минуты.
 * @param {Date} [props.value] - Выбранное значение времени.
 * @param {function} [props.onChange] - Обработчик изменения выбранного времени.
 * @param {Date} [props.valueFrom] - Начальное значение времени для периода.
 * @param {Date} [props.valueTo] - Конечное значение времени для периода.
 * @param {function} [props.onPeriodChange] - Обработчик изменения периода времени.
 * @param {string} [props.className] - Дополнительный CSS класс.
 * @param {boolean} [props.disabledPanel=false] - Флаг блокировки панели выбора.
 * @param {boolean} [props.withPortal=false] - Флаг использования портала для рендеринга.
 * @param {boolean} [props.colored=false] - Флаг применения цветовых стилей.
 * @param {boolean} [props.pseudo=false] - Флаг использования псевдо-инпута.
 * @param {boolean} [props.isOpenOnFocus=false] - Флаг открытия пикера при фокусе.
 * @param {boolean} [props.withIcon=true] - Флаг отображения иконки.
 * @param {boolean} [props.withPicker=true] - Флаг использования всплывающего пикера.
 * @param {string} [props.label=''] - Текст метки (label) для инпута.
 * @param {boolean} [props.reset=false] - Флаг наличия кнопки сброса.
 * @param {function} [props.onReset] - Обработчик сброса значения.
 * @returns {JSX.Element} Компонент TimePicker.
 */
const TimePicker: FC<TTimePickerType> = ({
  id,
  type = 'time',
  name,
  enabledHourFrom,
  enabledHourTo,
  enabledMinuteFrom,
  enabledMinuteTo,
  value: externalValue,
  onChange: outerOnChange,
  valueFrom: outerValueFrom,
  valueTo: outerValueTo,
  onPeriodChange: outerOnPeriodChange,
  className,
  disabledPanel = false,
  withPortal = false,
  colored = false,
  pseudo = false,
  isOpenOnFocus = false,
  withIcon = true,
  withPicker = true,
  label = '',
  reset,
  onReset,
  ...restInputProps
}) => {
  const isTimeType = useMemo(() => type === 'time', [type]);
  const isTimeWithSecondsType = useMemo(() => type === 'timeWithSeconds', [type]);
  const isTimePeriodType = useMemo(() => type === 'period', [type]);
  const isTimePeriodWithSecondsType = useMemo(() => type === 'periodWithSeconds', [type]);

  const [isOpenOnInputFocus, setOpenOnFocus] = useState<boolean>(isOpenOnFocus);
  const [isOpen, setOpen] = useState(false);
  const [inputRef, setInputRef] = useState<null | HTMLInputElement>(null);
  const [calendarRef, setCalendarRef] = useState<null | HTMLDivElement>(null);
  id = useMemo(() => `TimePicker-${(id && id.toString()) || generateUUID()}`, [id]);
  const effectiveWithPicker = isTimePeriodType || isTimePeriodWithSecondsType ? false : withPicker;

  const {
    value: { valueFrom, valueTo },
    onChange: innerOnPeriodChange
  } = useUpdatedValues<TDateValues>(
    useMemo(() => ({ valueFrom: outerValueFrom, valueTo: outerValueTo }), [outerValueFrom, outerValueTo]),
    useCallback((a: TDateValues, b: TDateValues) => {
      if (!a.valueFrom || !b.valueFrom) {
        return a.valueFrom === b.valueFrom;
      }
      if (!a.valueTo || !b.valueTo) {
        return a.valueTo === b.valueTo;
      }
      return isEqual(a.valueFrom, b.valueFrom) && isEqual(a.valueTo, b.valueTo);
    }, [])
  );

  const { value, onChange: innerOnChange } = useUpdatedValues<Date | undefined>(externalValue);

  const [innerValue, setInnerOnChange] = useState(value);
  const [selectedTime, setSelectedTime] = useState(new Date());

  useEffect(() => {
    if (value) {
      setInnerOnChange(value);
      setSelectedTime(value);
    }
  }, [value]);

  useEffect(() => {
    if (isOpenOnFocus || !withIcon) {
      setOpenOnFocus(true);
    }
  }, [isOpenOnFocus, withIcon]);

  const onChange = useCallback(
    (date: Date) => {
      innerOnChange(date);
      outerOnChange?.(date);
    },
    [innerOnChange, outerOnChange]
  );

  const onPeriodChange = useCallback(
    (valueFrom?: Date, valueTo?: Date) => {
      if (outerOnPeriodChange) {
        outerOnPeriodChange(valueFrom, valueTo);
      }
      if (valueFrom || valueTo) {
        innerOnPeriodChange({ valueFrom, valueTo });
      }
    },
    [innerOnPeriodChange, outerOnPeriodChange]
  );

  const outerValue = useMemo(() => {
    return value && new Date(value);
  }, [value]);

  const handleClose = useCallback(() => {
    setOpen(false);
  }, []);

  const handleFocus = useCallback(() => {
    setOpen(true);
  }, []);

  const pseudoTime = useMemo(() => {
    if (!value) return '';

    const timeOptions: Intl.DateTimeFormatOptions = isTimeWithSecondsType
      ? { hour: TWO_DIGIT_FORMAT, minute: TWO_DIGIT_FORMAT, second: TWO_DIGIT_FORMAT }
      : { hour: TWO_DIGIT_FORMAT, minute: TWO_DIGIT_FORMAT };

    return value.toLocaleTimeString([], timeOptions);
  }, [value, isTimeWithSecondsType]);

  const { styles: popperStyles, attributes } = usePopper(inputRef, calendarRef, {
    placement: 'bottom-start'
  });

  const handleSetValues = useCallback(
    (isBlur?: boolean) => (date: any, date2: any) => {
      if (isOpen && isBlur) {
        return;
      }
      inputRef?.blur();
      if ((isTimePeriodType || isTimePeriodWithSecondsType) && onPeriodChange) {
        onPeriodChange(date || undefined, date2 || undefined);
      } else if (onChange) {
        onChange(date);
      }
      setOpen(false);
    },
    [inputRef, isOpen, onChange, onPeriodChange, isTimePeriodType]
  );

  const handleAccept = useCallback(() => {
    if (onChange && innerValue) {
      const newDate = set(innerValue, {
        hours: selectedTime.getHours(),
        minutes: selectedTime.getMinutes(),
        ...(isTimeWithSecondsType && { seconds: selectedTime.getSeconds() })
      });
      onChange(newDate);
    }
    handleClose();
    return;
  }, [onChange, innerValue, selectedTime, isTimeWithSecondsType]);

  const renderTimePickerPanel = () => (
    <ClickAwayListener
      onClickAway={() => {
        if (!isOpenOnInputFocus) {
          handleAccept();
        }
      }}
    >
      <div className={styles.opened} ref={setCalendarRef} style={popperStyles.popper} {...attributes.popper}>
        <TimeSelector
          isTimeWithSecondsType={isTimeWithSecondsType}
          disabled={disabledPanel}
          enabledHourFrom={enabledHourFrom}
          enabledHourTo={enabledHourTo}
          enabledMinuteFrom={enabledMinuteFrom}
          enabledMinuteTo={enabledMinuteTo}
          value={value}
          selectedTime={selectedTime}
          onChange={setSelectedTime}
        />
      </div>
    </ClickAwayListener>
  );

  const renderTimepicker = () => (
    <div
      className={clsx(styles.root, className, restInputProps.disabled && styles.disabled, isOpen && styles.opened)}
      id={id as string}
    >
      {name && ['time', 'timeWithSeconds'].includes(type) && (
        <input type=""hidden"" name={name} value={value?.toISOString()} />
      )}
      <TimePickerInput
        ref={setInputRef}
        value={outerValue}
        valueFrom={valueFrom}
        valueTo={valueTo}
        isTimeType={isTimeType}
        isTimeWithSecondsType={isTimeWithSecondsType}
        isTimePeriodType={isTimePeriodType}
        isTimePeriodWithSecondsType={isTimePeriodWithSecondsType}
        onChange={onChange}
        enabledHourFrom={enabledHourFrom}
        enabledHourTo={enabledHourTo}
        enabledMinuteFrom={enabledMinuteFrom}
        enabledMinuteTo={enabledMinuteTo}
        isOpenOnFocus={isOpenOnInputFocus}
        onEnterKeyDown={handleSetValues(false)}
        onTabKeyDown={handleSetValues(false)}
        onBlur={handleSetValues(true)}
        onFocus={handleFocus}
        colored={colored}
        withIcon={withIcon}
        withPicker={effectiveWithPicker}
        label={label}
        reset={reset}
        onReset={onReset}
        {...restInputProps}
      />
      {isOpen &&
        effectiveWithPicker &&
        (!withPortal ? (
          <>{renderTimePickerPanel()}</>
        ) : (
          ReactDOM.createPortal(<>{renderTimePickerPanel()}</>, document.getElementById('root') as HTMLElement)
        ))}
    </div>
  );

  if (pseudo) return <PseudoInput label={label}>{pseudoTime}</PseudoInput>;

  if (isOpenOnInputFocus)
    return (
      <ClickAwayListener
        onClickAway={() => {
          handleAccept();
        }}
      >
        {renderTimepicker()}
      </ClickAwayListener>
    );
  else return <>{renderTimepicker()}</>;
};

export default TimePicker;
"
Codes for components TimePicker _stories Stories.tsx,"import React, { useState } from 'react';

import Editor from '@components/_storybook/Stories/components/Editor';
import FigmaEmbed from '@components/_storybook/Stories/components/FigmaEmbed';
import Header from '@components/_storybook/Stories/components/Header';
import Properties from '@components/_storybook/Stories/components/Properties';
import { Tabs } from '@components/index';

import styles from '@components/_storybook/Stories/Stories.module.scss';

import { argsTypes } from './argsTypes';

const TimePickerStories = (): JSX.Element => {
  const [activeTab, setActiveTab] = useState(0);

  const timepickerDefaultCode = `import { TimePicker } from '@nlmk/ds-2.0';

const App = () => (
  <TimePicker
    value={new Date()}
    onChange={(newTime) => console.log(newTime)}
  />
);

export default App;
`;

  const timepickerWithLabelCode = `import { TimePicker } from '@nlmk/ds-2.0';

const App = () => (
  <TimePicker
    label=""Время""
    value={new Date()}
    onChange={(newTime) => console.log(newTime)}
  />
);

export default App;
`;

  const timepickerDisabledCode = `import { TimePicker } from '@nlmk/ds-2.0';

const App = () => (
  <TimePicker
    disabled
    value={new Date()}
    onChange={(newTime) => console.log(newTime)}
  />
);

export default App;
`;

  return (
    <div className={styles.wrapper}>
      <Header
        title=""TimePicker""
        description=""TimePicker позволяет пользователям выбирать время или период времени. Поддерживает различные форматы и диапазоны времени.""
        isStable
        codeLink=""https://github.com/nlmk-group/ds-2.0/tree/main/src/components/TimePicker""
        figmaLink=""https://www.figma.com/file/MSMqfqJrQNaqbLe4Ctkq7n/Design-System-2.0-NLMK-(beta)-(Community)?type=design&node-id=1036%3A20847&mode=design&t=awyt3Fzj1XS6th7v-1""
      />

      <div className={styles.tabs}>
        <Tabs>
          <Tabs.Tab label=""Разработчику"" active={0 === Number(activeTab)} onClick={() => setActiveTab(0)} />
          {/* <Tabs.Tab label=""Дизайнеру"" active={1 === Number(activeTab)} onClick={() => setActiveTab(1)} /> */}
          <Tabs.Tab label=""Тестирование"" active={2 === Number(activeTab)} onClick={() => setActiveTab(2)} />
        </Tabs>
      </div>

      {Number(activeTab) === 0 && (
        <>
          <Editor
            height={250}
            description=""Основной TimePicker. Позволяет выбирать время.""
            code={timepickerDefaultCode}
          />
          <Editor height={250} description=""TimePicker с лейблом."" code={timepickerWithLabelCode} />
          <Editor
            height={250}
            description=""Отключенный TimePicker. Не доступен для взаимодействия.""
            code={timepickerDisabledCode}
          />
          <Properties argsTypes={argsTypes} />
        </>
      )}
      {Number(activeTab) === 1 && (
        <FigmaEmbed url=""https://www.figma.com/file/MSMqfqJrQNaqbLe4Ctkq7n/Design-System-2.0-NLMK-(beta)-(Community)?type=design&node-id=1036%3A20847&mode=design&t=awyt3Fzj1XS6th7v-1"" />
      )}
    </div>
  );
};

export default TimePickerStories;
"
Codes for components Snackbar index.tsx,"import React, { CSSProperties, FC, ReactNode, useEffect, useState } from 'react';

import { variantsMapping } from '@components/declaration';
import { Button, IconCloseOutlined24, Typography } from '@components/index';
import { clsx } from 'clsx';

import { ISnackbarProps } from './types';

import styles from './Snackbar.module.scss';

import { ESnackbarColors } from './enums';

/**
 * Компонент Snackbar для отображения кратковременных сообщений
 * @component
 * @param {Object} props - Свойства компонента
 * @param {ESnackbarColors} [props.color=ESnackbarColors.dark] - Цвет фона Snackbar
 * @param {variantsMapping} [props.variant=variantsMapping.solid] - Вариант отображения Snackbar
 * @param {() => void} [props.close] - Функция закрытия Snackbar
 * @param {() => void} [props.actionButton] - Функция, вызываемая при нажатии на кнопку действия
 * @param {string} [props.actionText=''] - Текст кнопки действия
 * @param {ReactNode} props.children - Содержимое Snackbar
 * @param {number} [props.autoHideDuration=0] - Время автоматического скрытия в миллисекундах
 * @param {string} [props.className] - Дополнительный CSS класс
 * @param {CSSProperties} [props.style] - Inline стили для компонента
 * @returns {JSX.Element | null} Компонент Snackbar
 */

const Snackbar: FC<ISnackbarProps> = ({
  actionButton,
  actionText = '',
  children,
  close,
  color = ESnackbarColors.dark,
  variant = variantsMapping.solid,
  autoHideDuration = 0,
  className,
  style
}: {
  color?: `${ESnackbarColors}`;
  variant?: `${variantsMapping}`;
  close?: () => void;
  actionButton?: () => void;
  actionText?: string;
  children: ReactNode;
  autoHideDuration?: number;
  className?: string;
  style?: CSSProperties;
}): JSX.Element | null => {
  const [isVisible, setIsVisible] = useState(true);
  const isOutline = variant === variantsMapping.outline;
  const isDarkVariant = [
    ESnackbarColors.dark,
    ESnackbarColors.green,
    ESnackbarColors.red,
    ESnackbarColors.orange
  ].includes(color as ESnackbarColors);

  useEffect(() => {
    if (autoHideDuration > 0) {
      const timer = setTimeout(() => {
        setIsVisible(false);
        if (close) close();
      }, autoHideDuration);
      return () => clearTimeout(timer);
    }
  }, [autoHideDuration, close]);

  if (!isVisible) return null;

  return (
    <div
      data-testid=""SNACKBAR_WRAPPER""
      className={clsx(
        styles.snackbar,
        isOutline ? styles['snackbar-outline'] : styles[`snackbar-${color}`],
        styles[`snackbar-${variant}`],
        isOutline && styles[`indicator-${color}`],
        className
      )}
      style={style}
    >
      <Typography
        variant=""Body1-Medium""
        className={clsx(isOutline || !isDarkVariant ? styles['text-dark'] : styles['text-light'])}
      >
        {children}
      </Typography>
      <div className={styles.actions}>
        {actionButton && (
          <Button
            data-testid=""SNACKBAR_ACTION""
            variant=""primary""
            fill=""clear""
            size=""m""
            onClick={actionButton}
            className={clsx(
              styles.action,
              isOutline || !isDarkVariant ? styles['action-dark'] : styles['action-light']
            )}
          >
            <Typography variant=""Body1-Bold"">{actionText.length > 0 ? actionText : 'Посмотреть'}</Typography>
          </Button>
        )}
        {close && (
          <Button
            data-testid=""SNACKBAR_CLOSE""
            variant=""primary""
            fill=""clear""
            size=""m""
            onClick={close}
            className={clsx(
              styles.close,
              !isDarkVariant ? styles['close-dark'] : styles['close-light'],
              isOutline && styles['close-outline']
            )}
            iconButton={<IconCloseOutlined24 />}
          />
        )}
      </div>
    </div>
  );
};

export default Snackbar;
"
Codes for components Snackbar _stories Stories.tsx,"import React, { useState } from 'react';

import Editor from '@components/_storybook/Stories/components/Editor';
import FigmaEmbed from '@components/_storybook/Stories/components/FigmaEmbed';
import Header from '@components/_storybook/Stories/components/Header';
import Properties from '@components/_storybook/Stories/components/Properties';
import Tests from '@components/_storybook/Stories/components/Tests';
import '@components/_storybook/Stories/styles.css';
import { Tabs } from '@components/index';

import styles from '@components/_storybook/Stories/Stories.module.scss';

import { ESnackbarColors } from '../enums';
import argsTypes from './argsTypes';
import {
  DEFAULT_SNACKBAR,
  SNACKBAR_ACTION,
  SNACKBAR_CLOSE,
  SNACKBAR_COLOR,
  SNACKBAR_CUSTOM_ICON,
  SNACKBAR_ICON,
  SNACKBAR_OPACITY
} from './constants';

enum TabIds {
  dev,
  design,
  tests
}

const COMPONENT_NAME = 'Snackbar';
const FIGMA_URL =
  'https://www.figma.com/file/MSMqfqJrQNaqbLe4Ctkq7n/Design-System-2.0-NLMK-(beta)-(Community)?type=design&node-id=1039%3A29074&mode=design&t=awyt3Fzj1XS6th7v-1';

const Stories = (): JSX.Element => {
  const [activeTab, setActiveTab] = useState<TabIds>(TabIds.dev);

  const isActive = (tab: TabIds) => {
    return activeTab === tab;
  };

  return (
    <div className={styles.wrapper}>
      <Header
        title={COMPONENT_NAME}
        description=""Snackbar - это компонент, который предоставляет краткое уведомление или сообщение о событии.""
        isStable
        codeLink={`https://github.com/nlmk-group/ds-2.0/tree/main/src/components/${COMPONENT_NAME}`}
        figmaLink={FIGMA_URL}
      />

      <div className={styles.tabs}>
        <Tabs>
          <Tabs.Tab label=""Разработчику"" active={isActive(TabIds.dev)} onClick={() => setActiveTab(TabIds.dev)} />
          {/* <Tabs.Tab label=""Дизайнеру"" active={isActive(TabIds.design)} onClick={() => setActiveTab(TabIds.design)} /> */}
          <Tabs.Tab label=""Тестирование"" active={isActive(TabIds.tests)} onClick={() => setActiveTab(TabIds.tests)} />
        </Tabs>
      </div>

      {activeTab == TabIds.dev && (
        <>
          <Editor
            description={DEFAULT_SNACKBAR}
            height={150}
            code={`import { Snackbar } from '@nlmk/ds-2.0';

export default App = () => (
  <Snackbar> ${DEFAULT_SNACKBAR} </Snackbar>
)
              `}
          />
          <Editor
            height={150}
            description={SNACKBAR_CLOSE}
            code={`import { Snackbar } from '@nlmk/ds-2.0';

export default App = () => (
  <Snackbar close={() => {}}> ${SNACKBAR_CLOSE} </Snackbar>
)
              `}
          />
          <Editor
            height={200}
            description={SNACKBAR_ACTION}
            code={`import { Snackbar } from '@nlmk/ds-2.0';

export default App = () => (
  <Snackbar actionButton={() => {}}> ${SNACKBAR_ACTION} </Snackbar>
)
              `}
          />
          <Editor
            description={SNACKBAR_COLOR}
            code={`import { Snackbar } from '@nlmk/ds-2.0';

const colors = [${Object.values(ESnackbarColors)
          .map(c => `""${c}""`)
          .join(', ')}]
export default App = () => (
  <>
    {colors.map(color => {
      return <Snackbar key={color} color={color}> ${SNACKBAR_COLOR} </Snackbar>
    })}
  </>
)
              `}
          />
          <Editor
            description={SNACKBAR_ICON}
            code={`import { Snackbar } from '@nlmk/ds-2.0';

const colors = [${Object.values(ESnackbarColors)
          .map(c => `""${c}""`)
          .join(', ')}];

export default App = () => (
  <>
    {colors.map(color => {
      return <Snackbar key={color} color={color} withIcon> ${SNACKBAR_ICON} </Snackbar>
    })}
  </>
)
              `}
          />
          <Editor
            description={SNACKBAR_CUSTOM_ICON}
            code={`import { Snackbar, Icon } from '@nlmk/ds-2.0';

export default App = () => (
  <Snackbar
    withIcon
    color=""dark""
    customIcon={(
      <Icon
        name='IconEducationOutlined24'
        containerSize={24}
        htmlColor=""red""
      />
    )}
  > ${SNACKBAR_CUSTOM_ICON} </Snackbar>
)
              `}
          />
          <Editor
            description={SNACKBAR_OPACITY}
            code={`import { Snackbar } from '@nlmk/ds-2.0';

export default App = () => (
  <>
  <Snackbar
    bgOpacity={100}
  >
    ${SNACKBAR_OPACITY}
  </Snackbar>
  <Snackbar
    bgOpacity={70}
    >
    ${SNACKBAR_OPACITY}
  </Snackbar>
  <Snackbar
    bgOpacity={50}
  >
    ${SNACKBAR_OPACITY}
  </Snackbar>
  <Snackbar
    bgOpacity={20}
  >
    ${SNACKBAR_OPACITY}
  </Snackbar>
</>
)
              `}
          />

          <Properties argsTypes={argsTypes} />
        </>
      )}
      {activeTab == TabIds.design && <FigmaEmbed url={FIGMA_URL} />}
      {activeTab == TabIds.tests && <Tests componentName={COMPONENT_NAME} />}
    </div>
  );
};

export default Stories;
"
Codes for components Grid _stories Stories.tsx,"import React, { useState } from 'react';

import Editor from '@components/_storybook/Stories/components/Editor';
import FigmaEmbed from '@components/_storybook/Stories/components/FigmaEmbed';
import Header from '@components/_storybook/Stories/components/Header';
import Properties from '@components/_storybook/Stories/components/Properties';
import Tests from '@components/_storybook/Stories/components/Tests';
import '@components/_storybook/Stories/styles.css';
import { Tabs } from '@components/index';

import styles from '@components/_storybook/Stories/Stories.module.scss';

import { argsTypes } from './argsTypes';

const FIGMA_LINK =
  'https://www.figma.com/file/UrNaiI72SjVg0aHW6NYVCi/DS2.0-Grid?type=design&node-id=207-40301&mode=design&t=H6uAggyoryLoFprh-0';

const gridExampleCode = `import { Grid, Box } from '@nlmk/ds-2.0';

const App = () => (
    <Grid borderRadius=""var(--4-border)"" st={{ width: ""100%"", padding: 0 }}>
      {Array.from({ length: 3 }, (_, index) => (
        <Box
          key={index}
          px=""var(--8-space)""
          py=""var(--16-space)""
          borderRadius=""var(--4-border)""
          background=""var(--primary-blue-400)""
          st={{ flex: '1' }}
        >
          Контент {index + 1}
        </Box>
      ))}
    </Grid>
);
export default App;
`;

const equalWidthColumnsCode = `import { Grid, Box } from '@nlmk/ds-2.0';

const App = () => (
    <Grid borderRadius=""var(--4-border)"">
      <Grid.Row borderRadius=""var(--4-border)"" background=""var(--error-red-100)"">
        <Grid.Column borderRadius=""var(--4-border)"" background=""var(--primary-blue-400)"" width=""50%"">
          <Box
            st={{ flex: '1' }}
            px=""var(--8-space)""
            py=""var(--16-space)""
            borderRadius=""var(--4-border)""
            background=""var(--primary-blue-400)""
          >
            1 из 2
          </Box>
        </Grid.Column>
        <Grid.Column borderRadius=""var(--4-border)"" background=""var(--primary-blue-400)"" width=""50%"">
          <Box
            st={{ flex: '1' }}
            px=""var(--8-space)""
            py=""var(--16-space)""
            borderRadius=""var(--4-border)""
            background=""var(--primary-blue-400)""
          >
            2 из 2
          </Box>
        </Grid.Column>
      </Grid.Row>
      <Grid.Row borderRadius=""var(--4-border)"" background=""var(--error-red-100)"">
        <Grid.Column borderRadius=""var(--4-border)"" background=""var(--primary-blue-400)"" width=""33.33%"">
          <Box
            st={{ flex: '1' }}
            px=""var(--8-space)""
            py=""var(--16-space)""
            borderRadius=""var(--4-border)""
            background=""var(--primary-blue-400)""
          >
            1 из 3
          </Box>
        </Grid.Column>
        <Grid.Column borderRadius=""var(--4-border)"" background=""var(--primary-blue-400)"" width=""33.33%"">
          <Box
            st={{ flex: '1' }}
            px=""var(--8-space)""
            py=""var(--16-space)""
            borderRadius=""var(--4-border)""
            background=""var(--primary-blue-400)""
          >
            2 из 3
          </Box>
        </Grid.Column>
        <Grid.Column borderRadius=""var(--4-border)"" background=""var(--primary-blue-400)"" width=""33.33%"">
          <Box
            st={{ flex: '1' }}
            px=""var(--8-space)""
            py=""var(--16-space)""
            borderRadius=""var(--4-border)""
            background=""var(--primary-blue-400)""
          >
            3 из 3
          </Box>
        </Grid.Column>
      </Grid.Row>
    </Grid>
);
export default App;
`;

const settingOneColumnWidthCode = `import { Grid, Box } from '@nlmk/ds-2.0';

const App = () => (
    <Grid borderRadius=""var(--4-border)"">
      <Grid.Row borderRadius=""var(--4-border)"" background=""var(--error-red-100)"">
        <Grid.Column borderRadius=""var(--4-border)"" background=""var(--primary-blue-400)"">
          <Box
            st={{ flex: '1' }}
            px=""var(--8-space)""
            py=""var(--16-space)""
            borderRadius=""var(--4-border)""
            background=""var(--primary-blue-400)""
          >
            1 из 3
          </Box>
        </Grid.Column>
        <Grid.Column borderRadius=""var(--4-border)"" background=""var(--primary-blue-400)"" width=""50%"">
          <Box
            st={{ flex: '1' }}
            px=""var(--8-space)""
            py=""var(--16-space)""
            borderRadius=""var(--4-border)""
            background=""var(--primary-blue-400)""
          >
            2 из 3 (шире)
          </Box>
        </Grid.Column>
        <Grid.Column borderRadius=""var(--4-border)"" background=""var(--primary-blue-400)"">
          <Box
            st={{ flex: '1' }}
            px=""var(--8-space)""
            py=""var(--16-space)""
            borderRadius=""var(--4-border)""
            background=""var(--primary-blue-400)""
          >
            3 из 3
          </Box>
        </Grid.Column>
      </Grid.Row>
      <Grid.Row borderRadius=""var(--4-border)"" background=""var(--error-red-100)"">
        <Grid.Column borderRadius=""var(--4-border)"" background=""var(--primary-blue-400)"">
          <Box
            st={{ flex: '1' }}
            px=""var(--8-space)""
            py=""var(--16-space)""
            borderRadius=""var(--4-border)""
            background=""var(--primary-blue-400)""
          >
            1 из 3
          </Box>
        </Grid.Column>
        <Grid.Column borderRadius=""var(--4-border)"" background=""var(--primary-blue-400)"" width=""58.33%"">
          <Box
            st={{ flex: '1' }}
            px=""var(--8-space)""
            py=""var(--16-space)""
            borderRadius=""var(--4-border)""
            background=""var(--primary-blue-400)""
          >
            2 из 3 (шире)
          </Box>
        </Grid.Column>
        <Grid.Column borderRadius=""var(--4-border)"" background=""var(--primary-blue-400)"">
          <Box
            st={{ flex: '1' }}
            px=""var(--8-space)""
            py=""var(--16-space)""
            borderRadius=""var(--4-border)""
            background=""var(--primary-blue-400)""
          >
            3 из 3
          </Box>
        </Grid.Column>
      </Grid.Row>
    </Grid>
);
export default App;
`;

const variableWidthContentCode = `import { Grid, Box } from '@nlmk/ds-2.0';

const App = () => (
    <Grid borderRadius=""var(--4-border)"">
      <Grid.Row borderRadius=""var(--4-border)"" background=""var(--error-red-100)"">
        <Grid.Column borderRadius=""var(--4-border)"" background=""var(--primary-blue-400)"" width=""16.67%"">
          <Box
            st={{ flex: '1' }}
            px=""var(--8-space)""
            py=""var(--16-space)""
            borderRadius=""var(--4-border)""
            background=""var(--primary-blue-400)""
          >
            1 из 3
          </Box>
        </Grid.Column>
        <Grid.Column borderRadius=""var(--4-border)"" background=""var(--primary-blue-400)"" width=""auto"">
          <Box
            st={{ flex: '1' }}
            px=""var(--8-space)""
            py=""var(--16-space)""
            borderRadius=""var(--4-border)""
            background=""var(--primary-blue-400)""
          >
            Переменная ширина контента
          </Box>
        </Grid.Column>
        <Grid.Column borderRadius=""var(--4-border)"" background=""var(--primary-blue-400)"" width=""16.67%"">
          <Box
            st={{ flex: '1' }}
            px=""var(--8-space)""
            py=""var(--16-space)""
            borderRadius=""var(--4-border)""
            background=""var(--primary-blue-400)""
          >
            3 из 3
          </Box>
        </Grid.Column>
      </Grid.Row>
      <Grid.Row borderRadius=""var(--4-border)"" background=""var(--error-red-100)"">
        <Grid.Column borderRadius=""var(--4-border)"" background=""var(--primary-blue-400)"">
          <Box
            st={{ flex: '1' }}
            px=""var(--8-space)""
            py=""var(--16-space)""
            borderRadius=""var(--4-border)""
            background=""var(--primary-blue-400)""
          >
            1 из 3
          </Box>
        </Grid.Column>
        <Grid.Column borderRadius=""var(--4-border)"" background=""var(--primary-blue-400)"" width=""auto"">
          <Box
            st={{ flex: '1' }}
            px=""var(--8-space)""
            py=""var(--16-space)""
            borderRadius=""var(--4-border)""
            background=""var(--primary-blue-400)""
          >
            Переменная ширина контента
          </Box>
        </Grid.Column>
        <Grid.Column borderRadius=""var(--4-border)"" background=""var(--primary-blue-400)"" width=""16.67%"">
          <Box
            st={{ flex: '1' }}
            px=""var(--8-space)""
            py=""var(--16-space)""
            borderRadius=""var(--4-border)""
            background=""var(--primary-blue-400)""
          >
            3 из 3
          </Box>
        </Grid.Column>
      </Grid.Row>
    </Grid>
);
export default App;
`;

const equalWidthMultiRowCode = `import { Grid, Box } from '@nlmk/ds-2.0';

const App = () => (
    <Grid borderRadius=""var(--4-border)"">
      <Grid.Row borderRadius=""var(--4-border)"" background=""var(--error-red-100)"">
        <Grid.Column borderRadius=""var(--4-border)"" background=""var(--primary-blue-400)"">
          <Box
            st={{ flex: '1' }}
            px=""var(--8-space)""
            py=""var(--16-space)""
            borderRadius=""var(--4-border)""
            background=""var(--primary-blue-400)""
          >
            Колонка
          </Box>
        </Grid.Column>
        <Grid.Column borderRadius=""var(--4-border)"" background=""var(--primary-blue-400)"">
          <Box
            st={{ flex: '1' }}
            px=""var(--8-space)""
            py=""var(--16-space)""
            borderRadius=""var(--4-border)""
            background=""var(--primary-blue-400)""
          >
            Колонка
          </Box>
        </Grid.Column>
        <Grid.Row borderRadius=""var(--4-border)"" background=""var(--error-red-100)"" width=""100%"" />
        <Grid.Column borderRadius=""var(--4-border)"" background=""var(--primary-blue-400)"">
          <Box
            st={{ flex: '1' }}
            px=""var(--8-space)""
            py=""var(--16-space)""
            borderRadius=""var(--4-border)""
            background=""var(--primary-blue-400)""
          >
            Колонка
          </Box>
        </Grid.Column>
        <Grid.Column borderRadius=""var(--4-border)"" background=""var(--primary-blue-400)"">
          <Box
            st={{ flex: '1' }}
            px=""var(--8-space)""
            py=""var(--16-space)""
            borderRadius=""var(--4-border)""
            background=""var(--primary-blue-400)""
          >
            Колонка
          </Box>
        </Grid.Column>
      </Grid.Row>
    </Grid>
);
export default App;
`;

const verticalAlignmentCode = `import { Grid, Box } from '@nlmk/ds-2.0';

const App = () => (
    <Grid borderRadius=""var(--4-border)"">
      <Grid.Row borderRadius=""var(--4-border)"" background=""var(--error-red-100)"" alignItems=""start"">
        <Grid.Column borderRadius=""var(--4-border)"" background=""var(--primary-blue-400)"">
          <Box
            st={{ flex: '1' }}
            px=""var(--8-space)""
            py=""var(--16-space)""
            borderRadius=""var(--4-border)""
            background=""var(--primary-blue-400)""
          >
            Одна из трех колонок
          </Box>
        </Grid.Column>
        <Grid.Column borderRadius=""var(--4-border)"" background=""var(--primary-blue-400)"">
          <Box
            st={{ flex: '1' }}
            px=""var(--8-space)""
            py=""var(--16-space)""
            borderRadius=""var(--4-border)""
            background=""var(--primary-blue-400)""
          >
            Одна из трех колонок
          </Box>
        </Grid.Column>
        <Grid.Column borderRadius=""var(--4-border)"" background=""var(--primary-blue-400)"">
          <Box
            st={{ flex: '1' }}
            px=""var(--8-space)""
            py=""var(--16-space)""
            borderRadius=""var(--4-border)""
            background=""var(--primary-blue-400)""
          >
            Одна из трех колонок
          </Box>
        </Grid.Column>
      </Grid.Row>
      <Grid.Row borderRadius=""var(--4-border)"" background=""var(--error-red-100)"" alignItems=""center"">
        <Grid.Column borderRadius=""var(--4-border)"" background=""var(--primary-blue-400)"">
          <Box
            st={{ flex: '1' }}
            px=""var(--8-space)""
            py=""var(--16-space)""
            borderRadius=""var(--4-border)""
            background=""var(--primary-blue-400)""
          >
            Одна из трех колонок
          </Box>
        </Grid.Column>
        <Grid.Column borderRadius=""var(--4-border)"" background=""var(--primary-blue-400)"">
          <Box
            st={{ flex: '1' }}
            px=""var(--8-space)""
            py=""var(--16-space)""
            borderRadius=""var(--4-border)""
            background=""var(--primary-blue-400)""
          >
            Одна из трех колонок
          </Box>
        </Grid.Column>
        <Grid.Column borderRadius=""var(--4-border)"" background=""var(--primary-blue-400)"">
          <Box
            st={{ flex: '1' }}
            px=""var(--8-space)""
            py=""var(--16-space)""
            borderRadius=""var(--4-border)""
            background=""var(--primary-blue-400)""
          >
            Одна из трех колонок
          </Box>
        </Grid.Column>
      </Grid.Row>
      <Grid.Row borderRadius=""var(--4-border)"" background=""var(--error-red-100)"" alignItems=""end"">
        <Grid.Column borderRadius=""var(--4-border)"" background=""var(--primary-blue-400)"">
          <Box
            st={{ flex: '1' }}
            px=""var(--8-space)""
            py=""var(--16-space)""
            borderRadius=""var(--4-border)""
            background=""var(--primary-blue-400)""
          >
            Одна из трех колонок
          </Box>
        </Grid.Column>
        <Grid.Column borderRadius=""var(--4-border)"" background=""var(--primary-blue-400)"">
          <Box
            st={{ flex: '1' }}
            px=""var(--8-space)""
            py=""var(--16-space)""
            borderRadius=""var(--4-border)""
            background=""var(--primary-blue-400)""
          >
            Одна из трех колонок
          </Box>
        </Grid.Column>
        <Grid.Column borderRadius=""var(--4-border)"" background=""var(--primary-blue-400)"">
          <Box
            st={{ flex: '1' }}
            px=""var(--8-space)""
            py=""var(--16-space)""
            borderRadius=""var(--4-border)""
            background=""var(--primary-blue-400)""
          >
            Одна из трех колонок
          </Box>
        </Grid.Column>
      </Grid.Row>
    </Grid>
);
export default App;
`;

const horizontalAlignmentCode = `import { Grid, Box } from '@nlmk/ds-2.0';

const App = () => (
    <Grid borderRadius=""var(--4-border)"">
      <Grid.Row borderRadius=""var(--4-border)"" background=""var(--error-red-100)"" justifyContent=""center"">
        <Grid.Column borderRadius=""var(--4-border)"" background=""var(--primary-blue-400)"" width=""33.33%"">
          <Box
            st={{ flex: '1' }}
            px=""var(--8-space)""
            py=""var(--16-space)""
            borderRadius=""var(--4-border)""
            background=""var(--primary-blue-400)""
          >
            Одна из двух колонок
          </Box>
        </Grid.Column>
        <Grid.Column borderRadius=""var(--4-border)"" background=""var(--primary-blue-400)"" width=""33.33%"">
          <Box
            st={{ flex: '1' }}
            px=""var(--8-space)""
            py=""var(--16-space)""
            borderRadius=""var(--4-border)""
            background=""var(--primary-blue-400)""
          >
            Одна из двух колонок
          </Box>
        </Grid.Column>
      </Grid.Row>
      <Grid.Row borderRadius=""var(--4-border)"" background=""var(--error-red-100)"" justifyContent=""space-around"">
        <Grid.Column borderRadius=""var(--4-border)"" background=""var(--primary-blue-400)"" width=""33.33%"">
          <Box
            st={{ flex: '1' }}
            px=""var(--8-space)""
            py=""var(--16-space)""
            borderRadius=""var(--4-border)""
            background=""var(--primary-blue-400)""
          >
            Одна из двух колонок
          </Box>
        </Grid.Column>
        <Grid.Column borderRadius=""var(--4-border)"" background=""var(--primary-blue-400)"" width=""33.33%"">
          <Box
            st={{ flex: '1' }}
            px=""var(--8-space)""
            py=""var(--16-space)""
            borderRadius=""var(--4-border)""
            background=""var(--primary-blue-400)""
          >
            Одна из двух колонок
          </Box>
        </Grid.Column>
      </Grid.Row>
      <Grid.Row borderRadius=""var(--4-border)"" background=""var(--error-red-100)"" justifyContent=""space-between"">
        <Grid.Column borderRadius=""var(--4-border)"" background=""var(--primary-blue-400)"" width=""33.33%"">
          <Box
            st={{ flex: '1' }}
            px=""var(--8-space)""
            py=""var(--16-space)""
            borderRadius=""var(--4-border)""
            background=""var(--primary-blue-400)""
          >
            Одна из двух колонок
          </Box>
        </Grid.Column>
        <Grid.Column borderRadius=""var(--4-border)"" background=""var(--primary-blue-400)"" width=""33.33%"">
          <Box
            st={{ flex: '1' }}
            px=""var(--8-space)""
            py=""var(--16-space)""
            borderRadius=""var(--4-border)""
            background=""var(--primary-blue-400)""
          >
            Одна из двух колонок
          </Box>
        </Grid.Column>
      </Grid.Row>
    </Grid>
);
export default App;
`;

const columnWrappingCode = `import { Grid, Box } from '@nlmk/ds-2.0';

const App = () => (
    <Grid borderRadius=""var(--4-border)"">
      <Grid.Row borderRadius=""var(--4-border)"" background=""var(--error-red-100)"">
        <Grid.Column borderRadius=""var(--4-border)"" background=""var(--primary-blue-400)"" width=""75%"">
          <Box
            st={{ flex: '1' }}
            px=""var(--8-space)""
            py=""var(--16-space)""
            borderRadius=""var(--4-border)""
            background=""var(--primary-blue-400)""
          >
            .col-9
          </Box>
        </Grid.Column>
        <Grid.Column borderRadius=""var(--4-border)"" background=""var(--primary-blue-400)"" width=""33.33%"">
          <Box
            st={{ flex: '1' }}
            px=""var(--8-space)""
            py=""var(--16-space)""
            borderRadius=""var(--4-border)""
            background=""var(--primary-blue-400)""
          >
            .col-4
          </Box>
          <br />
          <Box
            st={{ flex: '1' }}
            px=""var(--8-space)""
            py=""var(--16-space)""
            borderRadius=""var(--4-border)""
            background=""var(--primary-blue-400)""
          >
            Поскольку 9 + 4 = 13 &gt; 12, этот div шириной 4 колонки переносится на новую строку как единое целое.
          </Box>
        </Grid.Column>
        <Grid.Column borderRadius=""var(--4-border)"" background=""var(--primary-blue-400)"" width=""50%"">
          <Box
            st={{ flex: '1' }}
            px=""var(--8-space)""
            py=""var(--16-space)""
            borderRadius=""var(--4-border)""
            background=""var(--primary-blue-400)""
          >
            .col-6
          </Box>
          <br />
          <Box
            st={{ flex: '1' }}
            px=""var(--8-space)""
            py=""var(--16-space)""
            borderRadius=""var(--4-border)""
            background=""var(--primary-blue-400)""
          >
            Последующие колонки продолжаются на новой строке.
          </Box>
        </Grid.Column>
      </Grid.Row>
    </Grid>
);
export default App;
`;

const columnBreaksCode = `import { Grid, Box } from '@nlmk/ds-2.0';

const App = () => (
    <Grid borderRadius=""var(--4-border)"">
      <Grid.Row borderRadius=""var(--4-border)"" background=""var(--error-red-100)"">
        <Grid.Column borderRadius=""var(--4-border)"" background=""var(--primary-blue-400)"" width=""50%"">
          <Box
            st={{ flex: '1' }}
            px=""var(--8-space)""
            py=""var(--16-space)""
            borderRadius=""var(--4-border)""
            background=""var(--primary-blue-400)""
          >
            .col-6
          </Box>
        </Grid.Column>
        <Grid.Column borderRadius=""var(--4-border)"" background=""var(--primary-blue-400)"" width=""50%"">
          <Box
            st={{ flex: '1' }}
            px=""var(--8-space)""
            py=""var(--16-space)""
            borderRadius=""var(--4-border)""
            background=""var(--primary-blue-400)""
          >
            .col-6
          </Box>
        </Grid.Column>
        <Grid.Row borderRadius=""var(--4-border)"" background=""var(--error-red-100)"" width=""100%"" />
        <Grid.Column borderRadius=""var(--4-border)"" background=""var(--primary-blue-400)"" width=""50%"">
          <Box
            st={{ flex: '1' }}
            px=""var(--8-space)""
            py=""var(--16-space)""
            borderRadius=""var(--4-border)""
            background=""var(--primary-blue-400)""
          >
            .col-6
          </Box>
        </Grid.Column>
        <Grid.Column borderRadius=""var(--4-border)"" background=""var(--primary-blue-400)"" width=""50%"">
          <Box
            st={{ flex: '1' }}
            px=""var(--8-space)""
            py=""var(--16-space)""
            borderRadius=""var(--4-border)""
            background=""var(--primary-blue-400)""
          >
            .col-6
          </Box>
        </Grid.Column>
      </Grid.Row>
    </Grid>
);
export default App;
`;

const Stories = (): JSX.Element => {
  const [activeTab, setActiveTab] = useState(0);

  return (
    <div className={styles.wrapper}>
      <Header
        title=""Grid""
        description=""Компонент Grid представляет собой универсальный контейнер, используемый для позиционирования внутренних компонентов/элементов: горизонтальный или вертикальный. Он обладает различными пропсами, что делает Grid инструментом для создания структурированного и адаптивного интерфейса.""
        isStable
        codeLink=""https://github.com/nlmk-group/ds-2.0/tree/main/src/components/Grid""
        figmaLink={FIGMA_LINK}
      />

      <div className={styles.tabs}>
        <Tabs>
          <Tabs.Tab label=""Разработчику"" active={0 === Number(activeTab)} onClick={() => setActiveTab(0)} />
          {/* <Tabs.Tab label=""Дизайнеру"" active={1 === Number(activeTab)} onClick={() => setActiveTab(1)} /> */}
          <Tabs.Tab label=""Тестирование"" active={2 === Number(activeTab)} onClick={() => setActiveTab(2)} />
        </Tabs>
      </div>

      {Number(activeTab) === 0 && (
        <>
          <Editor
            height={500}
            description=""Большинство свойств стилей можно настраивать через пропсы компонента. Также все свойства доступны через пропс st.""
            code={gridExampleCode}
          />
          <Editor height={500} description=""Колонки равной ширины"" code={equalWidthColumnsCode} />
          <Editor height={500} description=""Установка ширины одной колонки"" code={settingOneColumnWidthCode} />
          <Editor height={500} description=""Переменная ширина контента"" code={variableWidthContentCode} />
          <Editor
            height={500}
            description=""Колонки равной ширины с несколькими строками""
            code={equalWidthMultiRowCode}
          />
          <Editor height={500} description=""Вертикальное выравнивание"" code={verticalAlignmentCode} />
          <Editor height={500} description=""Горизонтальное выравнивание"" code={horizontalAlignmentCode} />
          <Editor height={500} description=""Перенос колонок"" code={columnWrappingCode} />
          <Editor height={500} description=""Разрывы колонок"" code={columnBreaksCode} />
          <Properties argsTypes={argsTypes} />
        </>
      )}
      {Number(activeTab) === 1 && <FigmaEmbed url={FIGMA_LINK} />}
      {Number(activeTab) === 2 && <Tests componentName=""Grid"" />}
    </div>
  );
};

export default Stories;
"
Codes for components Grid index.tsx,"import React from 'react';

import Box from '@components/Box';
import { IGrid } from '@components/Grid/types';

import { GridColumn, GridRow } from './subcomponents';

const Grid = ({ children, ...props }: IGrid) => {
  return <Box {...props}>{children}</Box>;
};

Grid.Column = GridColumn;
Grid.Row = GridRow;

export default Grid;
"
Codes for components Link _stories Stories.tsx,"import React, { useState } from 'react';

import Editor from '@components/_storybook/Stories/components/Editor';
import FigmaEmbed from '@components/_storybook/Stories/components/FigmaEmbed';
import Header from '@components/_storybook/Stories/components/Header';
import Properties from '@components/_storybook/Stories/components/Properties';
import Tests from '@components/_storybook/Stories/components/Tests';
import { Tabs } from '@components/index';

import styles from '@components/_storybook/Stories/Stories.module.scss';

import { argsTypes } from './argsTypes';

const LinkStories = (): JSX.Element => {
  const [activeTab, setActiveTab] = useState(0);

  const linkDefaultCode = `import { Link } from '@nlmk/ds-2.0';

const App = () => (
  <Link href=""https://www.w3schools.com/"">Ссылка</Link>
);

export default App;
`;

  const linkDisabledCode = `import { Link } from '@nlmk/ds-2.0';

const App = () => (
  <Link href=""https://www.w3schools.com/""
    disabled
  >
    Заблокированная ссылка
  </Link>
);

export default App;
`;

  const linkWithIconCode = `import { Link, Icon } from '@nlmk/ds-2.0';

const App = () => (
  <Link href=""https://www.w3schools.com/""
    leftIcon={<Icon name='IconBunkerOutlined16' />}
    rightIcon={<Icon name='IconBunkerOutlined16' />
  }>
    Ссылка с иконками
  </Link>
);

export default App;
`;

  return (
    <div className={styles.wrapper}>
      <Header
        title=""Link""
        description=""Link компонент позволяет пользователям переходить по заданным ссылкам. Он поддерживает иконки, разные размеры и состояния, такие как disabled.""
        isStable
        codeLink=""https://github.com/nlmk-group/ds-2.0/tree/main/src/components/Link""
        figmaLink=""https://www.figma.com/file/MSMqfqJrQNaqbLe4Ctkq7n/Design-System-2.0-NLMK-(beta)-(Community)?type=design&node-id=1039%3A25756&mode=design&t=awyt3Fzj1XS6th7v-1""
      />

      <div className={styles.tabs}>
        <Tabs>
          <Tabs.Tab label=""Разработчику"" active={0 === Number(activeTab)} onClick={() => setActiveTab(0)} />
          {/* <Tabs.Tab label=""Дизайнеру"" active={1 === Number(activeTab)} onClick={() => setActiveTab(1)} /> */}
          <Tabs.Tab label=""Тестирование"" active={2 === Number(activeTab)} onClick={() => setActiveTab(2)} />
        </Tabs>
      </div>

      {Number(activeTab) === 0 && (
        <>
          <Editor
            height={200}
            description=""Основная ссылка. Стандартное использование компонента Link.""
            code={linkDefaultCode}
          />
          <Editor
            height={220}
            description=""Отключенная ссылка. Пользователь не может взаимодействовать с ссылкой.""
            code={linkDisabledCode}
          />
          <Editor description=""Ссылка с иконками с обеих сторон текста."" code={linkWithIconCode} />
          <Properties argsTypes={argsTypes} />
        </>
      )}

      {Number(activeTab) === 1 && (
        <FigmaEmbed url=""https://www.figma.com/file/MSMqfqJrQNaqbLe4Ctkq7n/Design-System-2.0-NLMK-(beta)-(Community)?type=design&node-id=1039%3A25756&mode=design&t=awyt3Fzj1XS6th7v-1"" />
      )}
      {Number(activeTab) === 2 && <Tests componentName=""Link"" />}
    </div>
  );
};

export default LinkStories;
"
Codes for components Link index.tsx,"import React, { FC } from 'react';

import Typography from '@components/Typography';
import { ETypographyVariants } from '@components/Typography/enums';
import { clsx } from 'clsx';

import { ILink } from './types';

import styles from './Link.module.scss';

import { sizeMapping, targetMapping } from './enums';
import { getTypography } from './helpers';

const Link: FC<ILink> = ({
  children,
  href,
  preventRedirect = false,
  target = targetMapping.parent,
  size = sizeMapping.body,
  disabled = false,
  leftIcon = null,
  rightIcon = null,
  className
}) => {
  return (
    <div data-testid=""WRAPPER"" className={clsx(styles.wrapper, disabled && styles.disabled, className)}>
      {leftIcon !== null && (
        <div data-testid=""LEFT_ICON"" className={clsx(styles['icon-wrapper'], styles[`icon-${size}`])}>
          {leftIcon}
        </div>
      )}
      <a
        data-testid=""LINK""
        href={preventRedirect ? 'javascript:void(0);' : href}
        target={target as targetMapping}
        rel=""noreferrer noopener""
        className={className}
      >
        <Typography variant={getTypography(size as sizeMapping) as ETypographyVariants}>{children}</Typography>
      </a>
      {rightIcon !== null && (
        <div data-testid=""RIGHT_ICON"" className={clsx(styles['icon-wrapper'], styles[`icon-${size}`])}>
          {rightIcon}
        </div>
      )}
    </div>
  );
};

export default Link;
"
Codes for components Switch index.tsx,"import React, { FC, MouseEvent } from 'react';

import Typography from '@components/Typography';
import { clsx } from 'clsx';

import { ISwitch } from './types';

import styles from './Switch.module.scss';

const Switch: FC<ISwitch> = ({
  className = '',
  checked = false,
  onChange,
  disabled = false,
  label = '',
  activeIcon = null,
  inactiveIcon = null
}) => {
  const handleOnChange = (e: MouseEvent<HTMLDivElement>) => {
    if (onChange && !disabled) {
      onChange(e, !checked);
    }
  };

  const getTrackStyle = () => {
    if (checked) {
      return disabled ? styles['track-active-disabled'] : styles['track-active'];
    }
    return disabled ? styles['track-inactive-disabled'] : styles['track-inactive'];
  };

  return (
    <div
      className={clsx(styles.wrapper, disabled && styles.disabled, className)}
      tabIndex={!disabled ? 0 : undefined}
      aria-checked={checked}
      aria-disabled={disabled}
      role=""switch""
      data-testid=""SWITCH_WRAPPER""
    >
      <div data-testid=""CONTROLLER"" className={styles.root} onClick={handleOnChange}>
        <div data-testid=""TRACK"" className={clsx(styles['track'], getTrackStyle())}>
          <div
            data-testid=""TOUCH""
            className={clsx(
              styles.touch,
              disabled && !checked && styles['touch-disabled'],
              checked ? styles.active : styles.inactive
            )}
          >
            <div className={styles['icon-wrapper']}>
              {checked && activeIcon !== null && activeIcon}
              {!checked && inactiveIcon !== null && inactiveIcon}
            </div>
          </div>
        </div>
        <div
          data-testid=""FOCUS""
          className={clsx(styles.focus, checked ? styles['focus-active'] : styles['focus-inactive'])}
        />
      </div>
      {label.length > 0 && (
        <label className={clsx(styles.label, disabled && styles['label-disabled'])} data-testid=""LABEL"">
          <input type=""checkbox"" onClick={handleOnChange} checked={checked} className={styles.checkbox} />
          <Typography variant=""Body1-Medium"">{label}</Typography>
        </label>
      )}
    </div>
  );
};

export default Switch;
"
Codes for components Switch _stories Stories.tsx,"import React, { useState } from 'react';

import Editor from '@components/_storybook/Stories/components/Editor';
import FigmaEmbed from '@components/_storybook/Stories/components/FigmaEmbed';
import Header from '@components/_storybook/Stories/components/Header';
import Properties from '@components/_storybook/Stories/components/Properties';
import Tests from '@components/_storybook/Stories/components/Tests';
import '@components/_storybook/Stories/styles.css';
import { Tabs } from '@components/index';

import styles from '@components/_storybook/Stories/Stories.module.scss';

import argsTypes from './argsTypes';
import { DEFAULT_SWITCH, DISABLED_SWITCH, SWITCH_WITH_ICONS, SWITCH_WITH_LABEL } from './constants';

enum TabIds {
  dev,
  design,
  tests
}

const COMPONENT_NAME = 'Switch';
const FIGMA_URL =
  'https://www.figma.com/file/MSMqfqJrQNaqbLe4Ctkq7n/Design-System-2.0-NLMK-(beta)-(Community)?type=design&node-id=1039%3A29075&mode=design&t=awyt3Fzj1XS6th7v-1';

const Stories = (): JSX.Element => {
  const [activeTab, setActiveTab] = useState<TabIds>(TabIds.dev);

  const isActive = (tab: TabIds) => {
    return activeTab === tab;
  };

  return (
    <div className={styles.wrapper}>
      <Header
        title={COMPONENT_NAME}
        description=""Switch - это компонент, который реализует функциональность переключателя, часто используемого в пользовательских интерфейсах для настройки параметров, таких как включение/выключение определенных функций приложения.""
        isStable
        codeLink={`https://github.com/nlmk-group/ds-2.0/tree/main/src/components/${COMPONENT_NAME}`}
        figmaLink={FIGMA_URL}
      />

      <div className={styles.tabs}>
        <Tabs>
          <Tabs.Tab label=""Разработчику"" active={isActive(TabIds.dev)} onClick={() => setActiveTab(TabIds.dev)} />
          {/* <Tabs.Tab label=""Дизайнеру"" active={isActive(TabIds.design)} onClick={() => setActiveTab(TabIds.design)} /> */}
          <Tabs.Tab label=""Тестирование"" active={isActive(TabIds.tests)} onClick={() => setActiveTab(TabIds.tests)} />
        </Tabs>
      </div>

      {activeTab == TabIds.dev && (
        <>
          <Editor
            description={DEFAULT_SWITCH}
            code={`import { useState } from 'react'
import { Switch } from '@nlmk/ds-2.0';

export default App = () => {
  const [isChecked, setIsChecked] = useState(true);

  return (
    <Switch
      checked={isChecked}
      onChange={() => setIsChecked(!isChecked)}
    />
  )
}
              `}
          />
          <Editor
            description={DISABLED_SWITCH}
            code={`import { Switch } from '@nlmk/ds-2.0';

export default App = () => {
  return (
    <Switch
      checked={false}
      onChange={() => {}}
      disabled
    />
  )
}
              `}
          />
          <Editor
            description={SWITCH_WITH_LABEL}
            code={`import { useState } from 'react'
import { Switch } from '@nlmk/ds-2.0';

export default App = () => {
  const [isChecked, setIsChecked] = useState(false);
  const [isSecondChecked, setIsSecondChecked] = useState(true);
  const [isThirdChecked, setIsThirdChecked] = useState(false);

  return (
    <>
      <Switch
        checked={isChecked}
        onChange={() => {
          setIsChecked(!isChecked);
        }}
        label={'Не активный Switch'}
      />
      <Switch
        checked={isSecondChecked}
        onChange={() => {
          setIsSecondChecked(!isSecondChecked);
        }}
        label={'Активный Switch'}
      />
      <Switch
        checked={isThirdChecked}
        onChange={() => {
          setIsThirdChecked(!isThirdChecked);
        }}
        label={'Заблокированный Switch'}
        disabled
      />
    </>
  )
}
              `}
          />
          <Editor
            description={SWITCH_WITH_ICONS}
            code={`import { useState } from 'react'
import { Switch, Icon } from '@nlmk/ds-2.0';

export default App = () => {
  const [isChecked, setIsChecked] = useState(false);

  return (
    <Switch
      checked={isChecked}
      onChange={() => {
        setIsChecked(!isChecked);
      }}
      activeIcon={(
        <Icon
          name='IconMetallalomScrapFilled16'
          containerSize={16}
          htmlColor={'var(--text-grey-100)'}
        />
      )}
      inactiveIcon={(
        <Icon
          name='IconMetallalomScrap16'
          containerSize={16}
          htmlColor={'var(--primary-blue-600)'}
        />
      )}
    />
  )
}
              `}
          />

          <Properties argsTypes={argsTypes} />
        </>
      )}
      {activeTab == TabIds.design && <FigmaEmbed url={FIGMA_URL} />}
      {activeTab == TabIds.tests && <Tests componentName={COMPONENT_NAME} />}
    </div>
  );
};

export default Stories;
"
Codes for components Card index.tsx,"import React, { FC } from 'react';

import { sizesMapping } from '@components/declaration';
import { clsx } from 'clsx';

import { ICard } from './types';

import styles from './Card.module.scss';

import { indicatorStatusMapping, orientationMapping } from './enums';

const Card: FC<ICard> = ({
  children,
  orientation = orientationMapping.vertical,
  indicatorSize = sizesMapping.s,
  indicatorStatus = indicatorStatusMapping.default,
  className
}) => {
  return (
    <div
      data-testid=""CARD_WRAPPER""
      className={clsx(
        styles.wrapper,
        styles[`wrapper-${orientation}`],
        styles[`indicator-${orientation}`],
        indicatorStatus !== indicatorStatusMapping.default && styles[`indicator-${indicatorSize}`],
        styles[`indicator-${indicatorStatus}`],
        styles[`card-${orientation}`],
        className
      )}
    >
      {children}
    </div>
  );
};

export default Card;
"
Codes for components Card _stories Stories.tsx,"import React, { useState } from 'react';

import Editor from '@components/_storybook/Stories/components/Editor';
import FigmaEmbed from '@components/_storybook/Stories/components/FigmaEmbed';
import Header from '@components/_storybook/Stories/components/Header';
import Properties from '@components/_storybook/Stories/components/Properties';
import Tests from '@components/_storybook/Stories/components/Tests';
import '@components/_storybook/Stories/styles.css';
import { Tabs } from '@components/index';

import styles from '@components/_storybook/Stories/Stories.module.scss';

import argsTypes from './argsTypes';
import { CARD_ORIENTATION, DEFAULT_CARD } from './text';

const Stories = (): JSX.Element => {
  const [activeTab, setActiveTab] = useState(0);

  return (
    <div className={styles.wrapper}>
      <Header
        title=""Card""
        description=""Компонент Card является функциональным компонентом, который предназначен для отображения карточки с различными элементами интерфейса, такими как изображение, заголовок, описание, значки, селектор и группа кнопок.""
        isStable
        codeLink=""https://github.com/nlmk-group/ds-2.0/tree/main/src/components/Card""
        figmaLink=""https://www.figma.com/file/MSMqfqJrQNaqbLe4Ctkq7n/Design-System-2.0-NLMK-(beta)-(Community)?type=design&node-id=1036%3A20845&mode=design&t=awyt3Fzj1XS6th7v-1""
      />

      <div className={styles.tabs}>
        <Tabs>
          <Tabs.Tab label=""Разработчику"" active={0 === Number(activeTab)} onClick={() => setActiveTab(0)} />
          {/* <Tabs.Tab label=""Дизайнеру"" active={1 === Number(activeTab)} onClick={() => setActiveTab(1)} /> */}
          <Tabs.Tab label=""Тестирование"" active={2 === Number(activeTab)} onClick={() => setActiveTab(2)} />
        </Tabs>
      </div>

      {Number(activeTab) == 0 && (
        <>
          <Editor
            height={350}
            description={DEFAULT_CARD}
            code={`import { Button, Card, Typography, Select } from '@nlmk/ds-2.0';

export default  App = () => (
  <>
    <div style={{
      backgroundColor: 'var(--steel-20)',
      width: 'fit-content',
      padding: '20px'
  }}>
    <Card>
      <div
        style={{
          height: '200px',
          width: '300px',
          display: 'flex',
          flexDirection: 'column',
          gap: '10px'
        }}
      >
        <Typography variant='Heading3'>
          Заголовок
        </Typography>

        <Select
          label=""Выберите язык программирования""
          options={[
            {
              label: 'C++',
              value: 'C++'
            },
            {
              label: 'C#',
              value: 'C#'
            }]}
        />

        <div style={{ display: 'flex', gap: '8px', marginTop: 'auto' }}>
          <Button>
            Button
          </Button>
          <Button variant=""secondary"">
            Button
          </Button>
        </div>
      </div>
    </Card>
  </div>
</>
)
`}
          />

          <Editor
            height={400}
            description={CARD_ORIENTATION}
            code={`import { Button, Card, Typography, Select } from '@nlmk/ds-2.0';

export default  App = () => (
  <div style={{
    backgroundColor: 'var(--steel-20)',
    width: 'fit-content',
    padding: '20px',
    display: 'flex',
    gap: '20px'
  }}>
    <Card>
    <div
        style={{
          height: '200px',
          width: '300px',
          display: 'flex',
          flexDirection: 'column',
          gap: '10px'
        }}
      >
        <Typography variant='Heading3'>
          Заголовок
        </Typography>

        <Select
          label=""Выберите язык программирования""
          options={[
            {
              label: 'C++',
              value: 'C++'
            },
            {
              label: 'C#',
              value: 'C#'
            }]}
        />

        <div style={{ display: 'flex', gap: '8px', marginTop: 'auto' }}>
          <Button>
            Button
          </Button>
          <Button variant=""secondary"">
            Button
          </Button>
        </div>
      </div>
    </Card>

    <Card orientation=""horizontal"">
      <div style={{ display: 'flex', flexDirection: 'column', gap: '12px', width: '300px'}}>
        <Typography variant='Heading3'>
          Заголовок
        </Typography>

        <Select
          label=""Выберите язык программирования""
          options={[
            {
              label: 'C++',
              value: 'C++'
            },
            {
              label: 'C#',
              value: 'C#'
            }]}
        />

        <div style={{ display: 'flex', gap: '8px' }}>
          <Button>
            Button
          </Button>
          <Button variant=""secondary"">
            Button
          </Button>
        </div>
      </div>
    </Card>
  </div>
)
`}
          />

          <Properties argsTypes={argsTypes} />
        </>
      )}
      {Number(activeTab) == 1 && (
        <FigmaEmbed url=""https://www.figma.com/file/MSMqfqJrQNaqbLe4Ctkq7n/Design-System-2.0-NLMK-(beta)-(Community)?type=design&node-id=1036%3A20845&mode=design&t=awyt3Fzj1XS6th7v-1"" />
      )}
      {Number(activeTab) == 2 && <Tests componentName=""Card"" />}
    </div>
  );
};

export default Stories;
"
Codes for components Tabs index.tsx,"import React, { FC } from 'react';

import { TIconProps } from '@components/Icon/types';
import { Icon, Tooltip } from '@components/index';
import { ITooltipProps } from '@components/Tooltip/types';
import clsx from 'clsx';

import Tab from './components/Tab';
import { ITab } from './components/Tab/types';

import { ITabs } from './types';

import styles from './Tabs.module.scss';

const Tabs: FC<ITabs> &
  Record<'Tab', FC<ITab>> &
  Record<'Tooltip', FC<ITooltipProps>> &
  Record<'Icon', FC<TIconProps>> = ({ children, className, scrollable }) => {
    return (
      <div className={clsx({[styles.scrollable]: scrollable})}>
        <div
          className={clsx(styles['tabs-wrapper'], { [styles['tabs-wrapper__scrollable']]: scrollable }, className)}>
          {children}
        </div>
      </div>
    )
  };

Tabs.Tab = Tab;
Tabs.Tooltip = Tooltip;
Tabs.Icon = Icon;

export default Tabs;
"
Codes for components Tabs _stories Stories.tsx,"import React, { useState } from 'react';

import Editor from '@components/_storybook/Stories/components/Editor';
import FigmaEmbed from '@components/_storybook/Stories/components/FigmaEmbed';
import Header from '@components/_storybook/Stories/components/Header';
import Tests from '@components/_storybook/Stories/components/Tests';
import '@components/_storybook/Stories/styles.css';
import { Tabs } from '@components/index';

import styles from '@components/_storybook/Stories/Stories.module.scss';

const FIGMA_LINK =
  'https://www.figma.com/file/byZZI6bYz2Iv2Jst7ycZ7M/DS2.0-Navigation?type=design&node-id=1-10&mode=design&t=Oysvun6QjDqPZDKX-0';

const Stories = (): JSX.Element => {
  const [activeTab, setActiveTab] = useState(0);

  return (
    <div className={styles.wrapper}>
      <Header
        title=""Tabs""
        description=""Компонент Tabs, который объединил в себя Tab элементы. Компонент использует подход compound pattern.""
        isStable
        codeLink=""https://github.com/nlmk-group/ds-2.0/tree/main/src/components/Tabs""
        figmaLink={FIGMA_LINK}
      />

      <div className={styles.tabs}>
        <Tabs>
          <Tabs.Tab label=""Разработчику"" active={0 === Number(activeTab)} onClick={() => setActiveTab(0)} />
          {/* <Tabs.Tab label=""Дизайнеру"" active={1 === Number(activeTab)} onClick={() => setActiveTab(1)} /> */}
          <Tabs.Tab label=""Тестирование"" active={2 === Number(activeTab)} onClick={() => setActiveTab(2)} />
        </Tabs>
      </div>

      {Number(activeTab) == 0 && (
        <>
          <Editor
            height={400}
            description=""Обычное использование компонента.""
            code={`import { Tabs, Typography, Box } from '@nlmk/ds-2.0';
import { useState } from 'react';

export default  App = () => {
  const [activeTab, setActiveTab] = useState(0);

  return (
    <>
      <Tabs>
        <Tabs.Tab
          label=""Входящие""
          active={0 === Number(activeTab)}
          onClick={() => setActiveTab(0)}
        />
        <Tabs.Tab
          label=""Мои папки""
          active={1 === Number(activeTab)}
          onClick={() => setActiveTab(1)}
        />
        <Tabs.Tab
          label=""Спам""
          active={2 === Number(activeTab)}
          onClick={() => setActiveTab(2)}
          badgeNumber=""91""
        >
          <Tabs.Tooltip description=""Сюда вы можете добавить текстподсказу для компонента"">
            <Tabs.Icon
              name=""IconInfo16""
              containerSize={16}
              htmlColor=""var(--text-grey-500)""
            />
          </Tabs.Tooltip>
        </Tabs.Tab>
        <Tabs.Tab
          label=""Черновики""
          active={3 === Number(activeTab)}
          onClick={() => setActiveTab(3)}
          badgeNumber=""2""
        />
      </Tabs>

      <Box width={350}>
        {Number(activeTab) == 0 && (
          <Typography variant=""Heading4"" color=""var(--steel-90)"">
            Входящие
          </Typography>
        )}
        {Number(activeTab) == 1 && (
          <Typography variant=""Heading4"" color=""var(--steel-90)"">
            Мои папки
          </Typography>
        )}
        {Number(activeTab) == 2 && (
          <Typography variant=""Heading4"" color=""var(--steel-90)"">
            Папка с спамом
          </Typography>
        )}
        {Number(activeTab) == 3 && (
          <Typography variant=""Heading4"" color=""var(--steel-90)"">
            Черновики
          </Typography>
        )}
      </Box>
    </>
  )
}
`}
          />
        </>
      )}
      {Number(activeTab) == 1 && <FigmaEmbed url={FIGMA_LINK} />}
      {Number(activeTab) == 2 && <Tests componentName=""Tabs"" />}
    </div>
  );
};

export default Stories;
"
Codes for components Dropdown index.tsx,"import React, { CSSProperties, FC, MouseEventHandler, ReactNode, useRef, useState } from 'react';

import { EButtonSizes } from '@components/Button/enums';
import { Button, IconChevronArrowDownOutlined16, IconChevronArrowDownOutlined24 } from '@components/index';
import clsx from 'clsx';

import { IDropdownProps } from './types';

import styles from './Dropdown.module.scss';

import { DropdownContext } from './context';
import { DropdownMenu } from './subcomponents';

/**
 * Компонент Dropdown предоставляет интерактивное выпадающее меню с настраиваемыми кнопками и элементами меню.
 * @component
 * @param {object} props - Пропсы компонента.
 * @param {ReactNode} props.children - Элементы, которые будут отображаться в меню.
 * @param {boolean} [props.disabled=false] - Отключает кнопку и возможность открытия меню.
 * @param {ReactNode} props.buttonChildren - Содержимое кнопки.
 * @param {string} [props.className] - Дополнительный класс для кнопки.
 * @param {EButtonSizes} [props.size=EButtonSizes.m] - Размер кнопки и меню.
 * @param {CSSProperties} [props.menuStyle] - Размер кнопки и меню.
 */

const Dropdown: FC<IDropdownProps> = ({
  children,
  disabled = false,
  buttonChildren,
  className,
  size = EButtonSizes.m,
  menuStyle
}: {
  children: ReactNode;
  disabled?: boolean;
  buttonChildren?: ReactNode;
  className?: string;
  size?: `${EButtonSizes}`;
  menuStyle?: CSSProperties;
}) => {
  const [isOpen, setIsOpen] = useState(false);
  const buttonRef = useRef(null);
  /**
   * Переключает состояние открытия/закрытия выпадающего меню.
   * @param {React.MouseEvent<HTMLButtonElement>} e - Событие клика мыши.
   */
  const toggleDropdown: MouseEventHandler<HTMLButtonElement> = (e: React.MouseEvent<HTMLButtonElement>) => {
    e.preventDefault();
    e.stopPropagation();
    if (!disabled) {
      setIsOpen(prev => !prev);
    }
  };
  const ChevronIcon = size === EButtonSizes.xs ? IconChevronArrowDownOutlined16 : IconChevronArrowDownOutlined24;
  const Chevron = (
    <div className={clsx(styles['icon-rotate'], { [styles['icon-rotate-open']]: isOpen })}>
      <ChevronIcon />
    </div>
  );

  return (
    <DropdownContext.Provider value={{ isOpen, setIsOpen, disabled, buttonChildren, buttonRef, size, menuStyle }}>
      <Button
        ref={buttonRef}
        className={clsx(styles.button, className)}
        variant=""secondary""
        onClick={toggleDropdown}
        disabled={disabled}
        size={size}
        iconButton={!buttonChildren ? Chevron : undefined}
        endIcon={buttonChildren ? Chevron : undefined}
      >
        {buttonChildren}
      </Button>
      {isOpen && <DropdownMenu>{children}</DropdownMenu>}
    </DropdownContext.Provider>
  );
};

export default Dropdown;
"
Codes for components Dropdown _stories Stories.tsx,"import React, { useState } from 'react';

import Editor from '@components/_storybook/Stories/components/Editor';
import FigmaEmbed from '@components/_storybook/Stories/components/FigmaEmbed';
import Header from '@components/_storybook/Stories/components/Header';
import Properties from '@components/_storybook/Stories/components/Properties';
import Tests from '@components/_storybook/Stories/components/Tests';
import { Tabs } from '@components/index';

import styles from '@components/_storybook/Stories/Stories.module.scss';

import { argsTypes } from './argsTypes';

const DropdownStories = (): JSX.Element => {
  const [activeTab, setActiveTab] = useState(0);
  const positionsExample = `const positions = [
  { value: 'Сталь'},
  { value: 'Железо'},
  { value: 'Чугун', disabled: true},
  { value: 'Медь'},
  { value: 'Цинк'},
  { value: 'Титан'},
  { value: 'Хром'}
];`;

  const DropdownDefaultCode = `
import { Dropdown, DropdownMenuItem, Typography } from '@nlmk/ds-2.0';

${positionsExample}

const App = () => {
  return (
    <Dropdown buttonChildren='Dropdown'>
      {positions.map(({value, disabled}) => (
        <DropdownMenuItem value={value} disabled={disabled}>
          <Typography variant=""Body1-Medium"">{value}</Typography>
        </DropdownMenuItem>
      ))}
    </Dropdown>
  );
};
export default App;
`;

  const DropdownDisabledCode = `
import { Dropdown, DropdownMenuItem, Typography } from '@nlmk/ds-2.0';
import { useState } from 'react';

${positionsExample}

const App = () => {
  return (
    <Dropdown disabled buttonChildren='Dropdown'>
      {positions.map(({value, disabled}) => (
        <DropdownMenuItem value={value} disabled={disabled}>
          <Typography variant=""Body1-Medium"">{value}</Typography>
        </DropdownMenuItem>
      ))}
    </Dropdown>
  );
};
export default App;
`;

  return (
    <div className={styles.wrapper}>
      <Header
        title=""Dropdown""
        description=""Dropdown позволяет пользователям выбирать одно действие из выпадающего меню""
        isStable
        codeLink=""https://github.com/nlmk-group/ds-2.0/tree/main/src/components/Dropdown""
        // figmaLink=""https://www.figma.com/design/2bgeOS0URFNqFO1m1bnyvg/Button-DS-3.0?node-id=6070-93163&t=nJ2tmRpMpk8P3SWk-0""
      />

      <div className={styles.tabs}>
        <Tabs>
          <Tabs.Tab label=""Разработчику"" active={0 === Number(activeTab)} onClick={() => setActiveTab(0)} />
          {/* <Tabs.Tab label=""Дизайнеру"" active={1 === Number(activeTab)} onClick={() => setActiveTab(1)} /> */}
          <Tabs.Tab label=""Тестирование"" active={2 === Number(activeTab)} onClick={() => setActiveTab(2)} />
        </Tabs>
      </div>

      {Number(activeTab) === 0 && (
        <>
          <Editor description=""Компонент Dropdown с одиночным выбором"" code={DropdownDefaultCode} />
          <Editor description=""Dropdown в состоянии disabled"" code={DropdownDisabledCode} />
          <Properties argsTypes={argsTypes} />
        </>
      )}
      {Number(activeTab) === 1 && (
        <FigmaEmbed url=""https://www.figma.com/design/2bgeOS0URFNqFO1m1bnyvg/Button-DS-3.0?node-id=6070-93163&t=nJ2tmRpMpk8P3SWk-0"" />
      )}
      {Number(activeTab) === 2 && <Tests componentName=""Dropdown"" />}
    </div>
  );
};
export default DropdownStories;
"
Codes for components Radio _stories Stories.tsx,"import React, { useState } from 'react';

import Editor from '@components/_storybook/Stories/components/Editor';
import FigmaEmbed from '@components/_storybook/Stories/components/FigmaEmbed';
import Header from '@components/_storybook/Stories/components/Header';
import Properties from '@components/_storybook/Stories/components/Properties';
import Tests from '@components/_storybook/Stories/components/Tests';
import '@components/_storybook/Stories/styles.css';
import { Tabs } from '@components/index';

import styles from '@components/_storybook/Stories/Stories.module.scss';

import { argsTypes } from './argsTypes';

const Stories = (): JSX.Element => {
  const [activeTab, setActiveTab] = useState(0);

  return (
    <div className={styles.wrapper}>
      <Header
        title=""Radio""
        description=""Компонент Radio обычно используется для выбора одного из нескольких взаимоисключающих вариантов в рамках определённой группы.""
        isStable
        codeLink=""https://github.com/nlmk-group/ds-2.0/tree/main/src/components/Radio""
        figmaLink=""https://www.figma.com/file/MSMqfqJrQNaqbLe4Ctkq7n/Design-System-2.0-NLMK-(beta)-(Community)?type=design&node-id=1039%3A29072&mode=design&t=awyt3Fzj1XS6th7v-1""
      />

      <div className={styles.tabs}>
        <Tabs>
          <Tabs.Tab label=""Разработчику"" active={0 === Number(activeTab)} onClick={() => setActiveTab(0)} />
          {/* <Tabs.Tab label=""Дизайнеру"" active={1 === Number(activeTab)} onClick={() => setActiveTab(1)} /> */}
          <Tabs.Tab label=""Тестирование"" active={2 === Number(activeTab)} onClick={() => setActiveTab(2)} />
        </Tabs>
      </div>

      {Number(activeTab) == 0 && (
        <>
          <Editor
            description=""Компонент radio по умолчанию.""
            code={`import { useState } from 'react';
import { Radio } from '@nlmk/ds-2.0';

export default  App = () => {
  const [checked, setChecked] = useState('yes');
  const handleChange = (event) => {
    setChecked(event.target.value);
  };
  return (
    <>
      <Radio
        checked={checked === 'yes'}
        onChange={handleChange}
        value=""yes""
        label=""Yes""
      />
      <Radio
        checked={checked === 'no'}
        onChange={handleChange}
        value=""no""
        label=""No""
      />
    </>
  )
}`}
          />

          <Editor
            description=""Компонент может быть неактивным для пользователя (disabled).""
            code={`import { Radio, Typography } from '@nlmk/ds-2.0';

export default  App = () =>(
  <>
    <Radio disabled />
    <Typography variant=""Body1-Bold"" color=""var(--steel-90)"" style={{ opacity: '0.5' }}>Я Радиокнопка</Typography>
  </>
)`}
          />

          <Properties argsTypes={argsTypes} />
        </>
      )}
      {Number(activeTab) == 1 && (
        <FigmaEmbed url=""https://www.figma.com/file/MSMqfqJrQNaqbLe4Ctkq7n/Design-System-2.0-NLMK-(beta)-(Community)?type=design&node-id=1039%3A29072&mode=design&t=awyt3Fzj1XS6th7v-1"" />
      )}
      {Number(activeTab) == 2 && <Tests componentName=""Radio"" />}
    </div>
  );
};

export default Stories;
"
Codes for components Radio index.tsx,"import React, { FC, useId } from 'react';

import { Typography } from '@components/index';
import clsx from 'clsx';

import { IRadioProps } from './types';

import styles from './Radio.module.scss';

/**
 * Компонент Radio для создания радио-кнопки.
 * @component
 * @param {Object} props - Свойства компонента Radio.
 * @param {string} [props.value] - Значение радио-кнопки.
 * @param {boolean} [props.checked] - Флаг, указывающий, выбрана ли радио-кнопка.
 * @param {boolean} [props.disabled] - Флаг, указывающий, отключена ли радио-кнопка.
 * @param {function} [props.onChange] - Функция обработки изменения состояния радио-кнопки.
 * @param {string} [props.className] - Дополнительный CSS класс.
 * @param {string} [props.label=''] - Текст метки радио-кнопки.
 * @returns {JSX.Element} Компонент Radio.
 */

export const Radio: FC<IRadioProps> = ({ checked, disabled, value, onChange, className, label = '' }) => {
  const radioID = useId();
  return (
    <div className={clsx(styles.radio, className)}>
      <input
        type=""radio""
        disabled={disabled}
        checked={onChange ? checked : undefined}
        defaultChecked={!onChange ? checked : undefined}
        value={value}
        onChange={onChange}
        name={radioID}
        id={radioID}
      />
      {label.length > 0 && (
        <label
          data-testid=""radio-label""
          className={clsx(styles.label, disabled && styles['label-disabled'])}
          htmlFor={radioID}
        >
          <Typography variant=""Body1-Medium"" color=""var(--steel-90)"">
            {label}
          </Typography>
        </label>
      )}
    </div>
  );
};

export default Radio;
"
Codes for components ToggleButtonGroup index.tsx,"import React, { Children, cloneElement, createContext, isValidElement, ReactNode, useEffect, useState } from 'react';

import { clsx } from 'clsx';

import { IButtonGroupProperties, IToggleButtonGroup, IToggleButtonGroupItemWithProps } from './types';

import styles from './ToggleButtonGroup.module.scss';

import { sizeMapping, statusMapping } from './enums';
import ToggleButton from './ToggleButton';

export const ButtonGroupProperties = createContext<IButtonGroupProperties>({
  size: sizeMapping.default,
  status: statusMapping.default,
  disabled: false
});

const ToggleButtonGroup = ({
  className = '',
  size = sizeMapping.default,
  status = statusMapping.default,
  disabled = false,
  children
}: IToggleButtonGroup) => {
  const [activeId, setActiveId] = useState<number | null>(null);
  const [childrenWithProps, setChildrenWithProps] = useState<ReactNode | ReactNode[]>(null);

  const handleToggle = (index: number) => {
    setActiveId(activeId === index ? null : index);
  };

  useEffect(() => {
    setChildrenWithProps(
      Children.map(children, (child, index) => {
        if (isValidElement(child)) {
          if (child.props.active) {
            setActiveId(index)
          }
          return cloneElement(child, {
            active: activeId === index,
            isLast: index === Children.toArray(children).length - 1,
            toggleButton: () => handleToggle(index)
          } as IToggleButtonGroupItemWithProps);
        }
        return child;
      })
    );
  }, [activeId]);

  const defaultProperties = {
    size,
    status,
    disabled
  };

  return (
    <ButtonGroupProperties.Provider value={defaultProperties}>
      <div className={clsx(styles.wrapper, className)} data-testid=""TOGGLE_BUTTON_WRAPPER"">
        {childrenWithProps}
      </div>
    </ButtonGroupProperties.Provider>
  );
};

ToggleButtonGroup.Button = ToggleButton;

export default ToggleButtonGroup;
"
Codes for components ToggleButtonGroup _stories Stories.tsx,"import React, { useState } from 'react';

import Editor from '@components/_storybook/Stories/components/Editor';
import FigmaEmbed from '@components/_storybook/Stories/components/FigmaEmbed';
import Header from '@components/_storybook/Stories/components/Header';
import Properties from '@components/_storybook/Stories/components/Properties';
import Tests from '@components/_storybook/Stories/components/Tests';
import '@components/_storybook/Stories/styles.css';
import { Tabs } from '@components/index';

import styles from '@components/_storybook/Stories/Stories.module.scss';

import { sizeMapping, statusMapping } from '../enums';
import { argsTypes } from './argsTypes';
import {
  DEFAULT_TOGGLE_BUTTON,
  TOGGLE_BUTTON_BADGE,
  TOGGLE_BUTTON_COLOR_OPTIONS,
  TOGGLE_BUTTON_ICON,
  TOGGLE_BUTTON_OPTIONS,
  TOGGLE_BUTTON_SIZES,
  TOGGLE_BUTTON_TOOLTIP
} from './constants';

enum TabIds {
  dev,
  design,
  tests
}

const COMPONENT_NAME = 'ToggleButtonGroup';
const FIGMA_URL =
  'https://www.figma.com/file/2bgeOS0URFNqFO1m1bnyvg/DS2.0-Buttons?type=design&node-id=3302-7747&mode=design&t=v2uTZplRrFW7s4RK-0';

const Stories = (): JSX.Element => {
  const [activeTab, setActiveTab] = useState<TabIds>(TabIds.dev);

  const isActive = (tab: TabIds) => {
    return activeTab === tab;
  };

  return (
    <div className={styles.wrapper}>
      <Header
        title={COMPONENT_NAME}
        description=""Компонент ToggleButtonGroup - это набор кнопок, из которых пользователь может выбрать только одну.""
        isStable
        codeLink={`https://github.com/nlmk-group/ds-2.0/tree/main/src/components/${COMPONENT_NAME}`}
        figmaLink={FIGMA_URL}
      />

      <div className={styles.tabs}>
        <Tabs>
          <Tabs.Tab label=""Разработчику"" active={isActive(TabIds.dev)} onClick={() => setActiveTab(TabIds.dev)} />
          {/* <Tabs.Tab label=""Дизайнеру"" active={isActive(TabIds.design)} onClick={() => setActiveTab(TabIds.design)} /> */}
          <Tabs.Tab label=""Тестирование"" active={isActive(TabIds.tests)} onClick={() => setActiveTab(TabIds.tests)} />
        </Tabs>
      </div>

      {activeTab == TabIds.dev && (
        <>
          <Editor
            height={400}
            description={DEFAULT_TOGGLE_BUTTON}
            code={`import { ToggleButtonGroup } from '@nlmk/ds-2.0';
import { useState } from 'react';

const { Button } = ToggleButtonGroup;

export default App = () => {
  const [count, setCount] = useState(0)

  return (
    <ToggleButtonGroup>
      <Button onClick={() => setCount(count+1)}>
        <Button.Label>
          Plus {count}
        </Button.Label>
      </Button>
      <Button onClick={() => alert('Count is '+ count)}>
        <Button.Label>
          Check result
        </Button.Label>
      </Button>
      <Button onClick={() => setCount(count-1)}>
        <Button.Label>
          Minus {count}
        </Button.Label>
      </Button>
    </ToggleButtonGroup>
  )
}
`}
          />

          <Editor
            height={400}
            description={TOGGLE_BUTTON_TOOLTIP}
            code={`import { ToggleButtonGroup } from '@nlmk/ds-2.0';

const { Button } = ToggleButtonGroup;

export default App = () => {
  return (
    <ToggleButtonGroup>
      <Button>
        <Button.Tooltip description='Add one to count' placement='bottom'>
          <Button.Label>
            Plus
          </Button.Label>
        </Button.Tooltip>
      </Button>

      <Button>
        <Button.Tooltip description='Check count value' placement='bottom'>
          <Button.Label>
              Check result
            </Button.Label>
        </Button.Tooltip>
      </Button>

      <Button>
        <Button.Tooltip description='Subtract one from count' placement='bottom'>
          <Button.Label>
            Minus
          </Button.Label>
        </Button.Tooltip>
      </Button>
    </ToggleButtonGroup>
  )
}
`}
          />

          <Editor
            height={400}
            description={TOGGLE_BUTTON_SIZES}
            code={`import { ToggleButtonGroup, Divider } from '@nlmk/ds-2.0';

const { Button } = ToggleButtonGroup;

export default App = () => {
  return (
    <div
      style={{
        display: 'flex',
        flexDirection: 'column',
        gap: '12px'
      }}
    >
      <ToggleButtonGroup size=""${sizeMapping.default}"">
        <Button onClick={() => alert('First option')}>
          <Button.Icon/>
        </Button>
        <Button onClick={() => alert('Second option')}>
          <Button.Icon/>
        </Button>
      </ToggleButtonGroup>

      <Divider dashed />

      <ToggleButtonGroup size=""${sizeMapping.compact}"">
        <Button onClick={() => alert('First option')}>
          <Button.Icon/>
        </Button>
        <Button onClick={() => alert('Second option')}>
          <Button.Icon/>
        </Button>
      </ToggleButtonGroup>
    </div>
  )
}
`}
          />

          <Editor
            height={400}
            description={TOGGLE_BUTTON_ICON}
            code={`import { ToggleButtonGroup, IconAddPlusCircleOutlined24, IconDeleteMinusOutlined24 } from '@nlmk/ds-2.0';
import { useState } from 'react';

const { Button } = ToggleButtonGroup;

export default App = () => {
  const [count, setCount] = useState(0)
  return (
    <ToggleButtonGroup>
      <Button onClick={() => setCount(count+1)}>
        <Button.Icon>
          <IconAddPlusCircleOutlined24 />
        </Button.Icon>
        <Button.Label>
          Plus {count}
        </Button.Label>
      </Button>
      <Button onClick={() => alert('Count is '+ count)}>
        <Button.Icon/>
        <Button.Label>
          Check result
        </Button.Label>
      </Button>
      <Button onClick={() => setCount(count-1)}>
        <Button.Icon>
          <IconDeleteMinusOutlined24 />
        </Button.Icon>
        <Button.Label>
          Minus {count}
        </Button.Label>
      </Button>
    </ToggleButtonGroup>
  )
}
`}
          />

          <Editor
            height={400}
            description={TOGGLE_BUTTON_BADGE}
            code={`import { ToggleButtonGroup, IconAddPlusCircleOutlined24, IconDeleteMinusOutlined24 } from '@nlmk/ds-2.0';
import { useState } from 'react';

const { Button } = ToggleButtonGroup;

export default App = () => {
  const [count, setCount] = useState(0)
  return (
    <ToggleButtonGroup>
      <Button onClick={() => setCount(count+1)}>
        <Button.Icon>
          <IconAddPlusCircleOutlined24 />
        </Button.Icon>
        <Button.Label>
          Plus
        </Button.Label>
        <Button.Badge>
          {count}
        </Button.Badge>
      </Button>
      <Button onClick={() => alert('Count is '+ count)}>
        <Button.Icon/>
        <Button.Label>
          Check result
        </Button.Label>
        <Button.Badge>
          {count}
        </Button.Badge>
      </Button>
      <Button onClick={() => setCount(count-1)}>
        <Button.Icon>
          <IconDeleteMinusOutlined24 />
        </Button.Icon>
        <Button.Label>
          Minus
        </Button.Label>
        <Button.Badge>
          {count}
        </Button.Badge>
      </Button>
    </ToggleButtonGroup>
  )
}
`}
          />

          <Editor
            height={400}
            description={TOGGLE_BUTTON_OPTIONS}
            code={`import { ToggleButtonGroup, Divider } from '@nlmk/ds-2.0';

const { Button } = ToggleButtonGroup;

export default App = () => {
  return (
    <div
      style={{
        display: 'flex',
        flexDirection: 'column',
        gap: '12px'
      }}
    >
      <ToggleButtonGroup status=""${statusMapping.default}"">
        <Button onClick={() => alert('First option')}>
          <Button.Icon/>
        </Button>
        <Button onClick={() => alert('Second option')}>
          <Button.Icon/>
        </Button>
      </ToggleButtonGroup>

      <Divider dashed />

      <ToggleButtonGroup status=""${statusMapping.error}"">
        <Button onClick={() => alert('First option')}>
          <Button.Icon/>
        </Button>
        <Button onClick={() => alert('Second option')}>
          <Button.Icon/>
        </Button>
      </ToggleButtonGroup>

      <Divider dashed />

      <ToggleButtonGroup status=""${statusMapping.warning}"">
        <Button onClick={() => alert('First option')}>
          <Button.Icon/>
        </Button>
        <Button onClick={() => alert('Second option')}>
          <Button.Icon/>
        </Button>
      </ToggleButtonGroup>

      <Divider dashed />

      <ToggleButtonGroup status=""${statusMapping.success}"">
        <Button onClick={() => alert('First option')}>
          <Button.Icon/>
        </Button>
        <Button onClick={() => alert('Second option')}>
          <Button.Icon/>
        </Button>
      </ToggleButtonGroup>
    </div>
  )
}
`}
          />

          <Editor
            height={400}
            description={TOGGLE_BUTTON_COLOR_OPTIONS}
            code={`import { ToggleButtonGroup, IconAddPlusCircleOutlined24, IconDeleteMinusOutlined24 } from '@nlmk/ds-2.0';
import { useState } from 'react';

const { Button } = ToggleButtonGroup;

export default App = () => {
  const [count, setCount] = useState(0)
  return (
    <ToggleButtonGroup status=""default"">
      <Button onClick={() => setCount(count+1)} status=""success"">
        <Button.Icon>
          <IconAddPlusCircleOutlined24 />
        </Button.Icon>
        <Button.Label>
          Plus
        </Button.Label>
        <Button.Badge>
          {(count + 1).toString()}
        </Button.Badge>
      </Button>
      <Button onClick={() => alert('Count is '+ count)}>
        <Button.Icon/>
        <Button.Label>
          Check result
        </Button.Label>
        <Button.Badge>
          {count.toString()}
        </Button.Badge>
      </Button>
      <Button onClick={() => setCount(count-1)} status=""error"">
        <Button.Icon>
          <IconDeleteMinusOutlined24 />
        </Button.Icon>
        <Button.Label>
          Minus
        </Button.Label>
        <Button.Badge>
          {(count - 1).toString()}
        </Button.Badge>
      </Button>
    </ToggleButtonGroup>
  )
}
`}
          />

          <Properties argsTypes={argsTypes} />
        </>
      )}
      {activeTab == TabIds.design && <FigmaEmbed url={FIGMA_URL} />}
      {activeTab == TabIds.tests && <Tests componentName={COMPONENT_NAME} />}
    </div>
  );
};

export default Stories;
"
Types for components index.ts,"/** Компоненты */
export { default as AttachFiles } from './AttachFiles';
export { default as File } from './AttachFiles/subcomponents/File';
export { default as Accordion } from './Accordion';
export { default as Alert } from './Alert';
export { default as Avatar } from './Avatar';
export { default as Input } from './Input';
export { default as ErrorPage } from './ErrorPage';
export { default as List } from './List';
export { default as Link } from './Link';
export { default as ListItem } from './ListItem';
export { default as Select } from './Select';
export { default as PseudoInput } from './PseudoInput';
export { default as Radio } from './Radio';
export { default as Box } from './Box';
export { default as Grid } from './Grid';
export { default as Button } from './Button';
export { default as Badge } from './Badge';
export { default as Breadcrumbs } from './Breadcrumbs';
export { default as Card } from './Card';
export { default as Chip } from './Chip';
export { default as DragAndDrop } from './DragAndDrop';
export { default as Checkbox } from './Checkbox';
export { default as Typography } from './Typography';
export { default as Tooltip } from './Tooltip';
export { default as Icon } from './Icon';
export { default as IconContainer } from './Icon/subcomponent/IconContainer';
export { default as ThemeSwitcher } from './ThemeSwitcher';
export { default as DatePicker } from './DatePicker';
export { default as DateTime } from './DateTime';
export { default as InputRange } from './InputRange';
export { default as InputSlider } from './InputSlider';
export { default as SkeletonLoader } from './SkeletonLoader';
export { default as Spinner } from './Spinner';
export { default as Tabs } from './Tabs';
export { default as ClickAwayListener } from './ClickAwayListener';
export { default as ProgressBar } from './ProgressBar';
export { default as Divider } from './Divider';
export { default as Snackbar } from './Snackbar';
export { default as Header } from './Header';
export { default as Switch } from './Switch';
export { default as TimePicker } from './TimePicker';
export { default as ToggleButtonGroup } from './ToggleButtonGroup';
export { default as SegmentButtonGroup } from './SegmentButtonGroup';
export { default as ImagePicture } from './ImagePicture';
export { default as Modal } from './Modal';
export { default as Sidebar } from './Sidebar';
export { default as SlideToggle } from './SlideToggle';
export { default as MenuItem } from './Sidebar';
export { default as SubmenuItem } from './Sidebar';
export { default as Scrollbar } from './Scrollbar';
export { default as Drawer } from './Drawer';
export { default as Dropdown } from './Dropdown';
export { default as DropdownMenuItem } from './Dropdown/subcomponents/DropdownMenuItem';
export { default as SimpleSelect } from './SimpleSelect';
export { default as OptionItem } from './SimpleSelect/subcomponents/OptionItem';
export { default as Stepper } from './Stepper';
export * from './ThemeSwitcher';
export * from './Icon/IconsDirectory';

/** Хуки */
export * from './Theme/hooks';
"
Codes for components SlideToggle _stories Stories.tsx,"import React, { useState } from 'react';

import Editor from '@components/_storybook/Stories/components/Editor';
import FigmaEmbed from '@components/_storybook/Stories/components/FigmaEmbed';
import Header from '@components/_storybook/Stories/components/Header';
import Properties from '@components/_storybook/Stories/components/Properties';
import Tests from '@components/_storybook/Stories/components/Tests';
import '@components/_storybook/Stories/styles.css';
import { Tabs } from '@components/index';

import styles from '@components/_storybook/Stories/Stories.module.scss';

import argsTypes from './argsTypes';

const FIGMA_LINK =
  'https://www.figma.com/file/3dTe0kYNFqQO3VnjJ10jyv/DS2.0-Input?type=design&node-id=212-40498&mode=design&t=e3eMVFD5FRwzvUZH-0';

const Stories = (): JSX.Element => {
  const [activeTab, setActiveTab] = useState(0);

  const slideToggle = `import { SlideToggle } from '@nlmk/ds-2.0';
import { useState } from 'react';

const App = () => {
  const [show, setShow] = useState(false);

  return (
    <SlideToggle
      title={'Заголовок'}
      isShow={show}
      onToggle={() => setShow(!show)}
    >
      Lorem ipsum dolor sit amet, consectetur adipiscing elit...
    </SlideToggle>
  );
};
export default App;`;

  return (
    <div className={styles.wrapper}>
      <Header
        title=""SlideToggle""
        description=""SlideToggle — элемент, который позволяет отображать/скрывать элемент.""
        isStable
        codeLink=""https://github.com/nlmk-group/ds-2.0/tree/main/src/components/SlideToggle""
        figmaLink={FIGMA_LINK}
      />

      <div className={styles.tabs}>
        <Tabs>
          <Tabs.Tab label=""Разработчику"" active={0 === Number(activeTab)} onClick={() => setActiveTab(0)} />
          {/* <Tabs.Tab label=""Дизайнеру"" active={1 === Number(activeTab)} onClick={() => setActiveTab(1)} /> */}
          <Tabs.Tab label=""Тестирование"" active={2 === Number(activeTab)} onClick={() => setActiveTab(2)} />
        </Tabs>
      </div>

      {Number(activeTab) == 0 && (
        <>
          <Editor height={350} description=""Пример использование компонента SlideToggle"" code={slideToggle} />
          <Properties argsTypes={argsTypes} />
        </>
      )}
      {Number(activeTab) == 1 && <FigmaEmbed url={FIGMA_LINK} />}
      {Number(activeTab) == 2 && <Tests componentName=""SlideToggle"" />}
    </div>
  );
};

export default Stories;
"
Codes for components SlideToggle index.tsx,"import React, { FC, useMemo } from 'react';

import { generateUUID } from '@components/declaration';
import { ESizeMapping } from '@components/SlideToggle/enum';
import clsx from 'clsx';

import { ISlideToggleProps } from './types';

import styles from './SlideToggle.module.scss';

import { IconStackCollapsed16, IconStackCollapsed24, Typography } from '..';

const SlideToggle: FC<ISlideToggleProps> = ({
  title,
  children,
  className,
  onToggle = () => {},
  isShow,
  size = ESizeMapping.default,
  after,
  toggleContainerShadow = false,
  iconWrapperId,
  titleWrapperId,
  afterWrapperId,
  contentWrapperId
}) => {
  const renderIcon = () => {
    return size === ESizeMapping.default ? (
      <IconStackCollapsed24 htmlColor=""var(--ac-subtitle-default)"" />
    ) : (
      <IconStackCollapsed16 htmlColor=""var(--ac-subtitle-default)"" />
    );
  };

  const renderTitle = () => {
    const titleId = useMemo(() => `titleId-${titleWrapperId || generateUUID()}`, [titleWrapperId]);
    const actionId = useMemo(() => `titleId-${afterWrapperId || generateUUID()}`, [afterWrapperId]);

    return (
      <div className={styles['title-container']} id={titleId}>
        {typeof title === 'string' ? (
          <Typography
            className={styles['label-wrapper']}
            variant={size === ESizeMapping.default ? 'Heading3' : 'Body1-Bold'}
            color=""primary""
          >
            {title}
          </Typography>
        ) : (
          <div className={styles['label-wrapper']}>{title}</div>
        )}
        {after && (
          <div className={styles['action-block']} id={actionId}>
            {after}
          </div>
        )}
      </div>
    );
  };

  const iconId = useMemo(() => `titleId-${iconWrapperId || generateUUID()}`, [iconWrapperId]);
  const contentId = useMemo(() => `titleId-${contentWrapperId || generateUUID()}`, [contentWrapperId]);

  return (
    <div className={clsx(styles['slide-toggle-wrapper'], className)} data-testid=""slide-toggle-wrapper"">
      <div className={clsx(styles['title-wrapper'], styles[`title-wrapper-${size}`])} onClick={onToggle}>
        <div
          className={clsx(
            styles['icon-wrapper'],
            styles[`icon-wrapper-${size}`],
            isShow && styles['icon-wrapper-show']
          )}
          id={iconId}
        >
          {renderIcon()}
        </div>
        {renderTitle()}
      </div>
      {isShow && (
        <div
          id={contentId}
          className={clsx(styles['content-wrapper'], toggleContainerShadow && styles['content-wrapper-shadow'])}
        >
          {children}
        </div>
      )}
    </div>
  );
};

export default SlideToggle;
"
Types for components index.ts,"/** Компоненты */
export { default as AttachFiles } from './AttachFiles';
export { default as File } from './AttachFiles/subcomponents/File';
export { default as Accordion } from './Accordion';
export { default as Alert } from './Alert';
export { default as Avatar } from './Avatar';
export { default as Input } from './Input';
export { default as ErrorPage } from './ErrorPage';
export { default as List } from './List';
export { default as Link } from './Link';
export { default as ListItem } from './ListItem';
export { default as Select } from './Select';
export { default as PseudoInput } from './PseudoInput';
export { default as Radio } from './Radio';
export { default as Box } from './Box';
export { default as Grid } from './Grid';
export { default as Button } from './Button';
export { default as Badge } from './Badge';
export { default as Breadcrumbs } from './Breadcrumbs';
export { default as Card } from './Card';
export { default as Chip } from './Chip';
export { default as DragAndDrop } from './DragAndDrop';
export { default as Checkbox } from './Checkbox';
export { default as Typography } from './Typography';
export { default as Tooltip } from './Tooltip';
export { default as Icon } from './Icon';
export { default as IconContainer } from './Icon/subcomponent/IconContainer';
export { default as ThemeSwitcher } from './ThemeSwitcher';
export { default as DatePicker } from './DatePicker';
export { default as DateTime } from './DateTime';
export { default as InputRange } from './InputRange';
export { default as InputSlider } from './InputSlider';
export { default as SkeletonLoader } from './SkeletonLoader';
export { default as Spinner } from './Spinner';
export { default as Tabs } from './Tabs';
export { default as ClickAwayListener } from './ClickAwayListener';
export { default as ProgressBar } from './ProgressBar';
export { default as Divider } from './Divider';
export { default as Snackbar } from './Snackbar';
export { default as Header } from './Header';
export { default as Switch } from './Switch';
export { default as TimePicker } from './TimePicker';
export { default as ToggleButtonGroup } from './ToggleButtonGroup';
export { default as SegmentButtonGroup } from './SegmentButtonGroup';
export { default as ImagePicture } from './ImagePicture';
export { default as Modal } from './Modal';
export { default as Sidebar } from './Sidebar';
export { default as SlideToggle } from './SlideToggle';
export { default as MenuItem } from './Sidebar';
export { default as SubmenuItem } from './Sidebar';
export { default as Scrollbar } from './Scrollbar';
export { default as Drawer } from './Drawer';
export { default as Dropdown } from './Dropdown';
export { default as DropdownMenuItem } from './Dropdown/subcomponents/DropdownMenuItem';
export { default as SimpleSelect } from './SimpleSelect';
export { default as OptionItem } from './SimpleSelect/subcomponents/OptionItem';
export { default as Stepper } from './Stepper';
export * from './ThemeSwitcher';
export * from './Icon/IconsDirectory';

/** Хуки */
export * from './Theme/hooks';
"
Codes for components Tooltip _stories Stories.tsx,"import React, { useState } from 'react';

import Editor from '@components/_storybook/Stories/components/Editor';
import FigmaEmbed from '@components/_storybook/Stories/components/FigmaEmbed';
import Header from '@components/_storybook/Stories/components/Header';
import Properties from '@components/_storybook/Stories/components/Properties';
import Tests from '@components/_storybook/Stories/components/Tests';
import '@components/_storybook/Stories/styles.css';
import { Tabs } from '@components/index';

import styles from '@components/_storybook/Stories/Stories.module.scss';

import argsTypes from './argsTypes';

const style = `{{
  display: 'flex',
  flexDirection: 'column',
  justifyContent: 'center',
  gap: '12px',
  padding: '30px',
  margin: '0 auto',
  height: '180px',
  color: 'var(--text-grey-900)'
}}`;

const Stories = (): JSX.Element => {
  const [activeTab, setActiveTab] = useState(0);

  return (
    <div className={styles.wrapper}>
      <Header
        title=""Tooltip""
        description=""Компонент-подсказка, появляющийся при определенном взаимодействии с дочерним элементом компонента (по умолчанию: при наведении курсора). Tooltip рассчитан не только на работу с простой информацией (текст) с единой стилизацией, но и на визуализацию подсказок, содержащих нестандартную информацию (списки, картинки, таблицы).""
        isStable
        codeLink=""https://github.com/nlmk-group/ds-2.0/tree/main/src/components/InputRange""
        figmaLink=""https://www.figma.com/file/MSMqfqJrQNaqbLe4Ctkq7n/Design-System-2.0-NLMK-(beta)-(Community)?type=design&node-id=1039%3A43759&mode=design&t=awyt3Fzj1XS6th7v-1""
      />

      <div className={styles.tabs}>
        <Tabs>
          <Tabs.Tab label=""Разработчику"" active={0 === Number(activeTab)} onClick={() => setActiveTab(0)} />
          {/* <Tabs.Tab label=""Дизайнеру"" active={1 === Number(activeTab)} onClick={() => setActiveTab(1)} /> */}
          <Tabs.Tab label=""Тестирование"" active={2 === Number(activeTab)} onClick={() => setActiveTab(2)} />
        </Tabs>
      </div>

      {Number(activeTab) == 0 && (
        <>
          <Editor
            description=""Тултип по умолчанию c описанием.""
            code={`import { Tooltip, Button } from '@nlmk/ds-2.0';

export default  App = () => (
  <div style=${style}>
    <Tooltip description=""Сюда вы можете добавить текст/подсказу для компонента"">
      <Button variant=""secondary"">Наведи на меня курсор!</Button>
    </Tooltip>
  </div>
)
`}
          />

          <Editor
            description=""Тултип с разными вариантами расположения.""
            code={`import { Tooltip, Button } from '@nlmk/ds-2.0';

export default  App = () => (
  <div style=${style}>
    <Tooltip placement=""top"" description=""Tooltip on top"">
      <Button variant=""secondary"">Наведи, тултип будет сверху!</Button>
    </Tooltip>
    <Tooltip placement=""bottom"" description=""Tooltip on bottom"">
      <Button variant=""secondary"">Наведи, тултип будет снизу!</Button>
    </Tooltip>
    <Tooltip placement=""left"" description=""Tooltip on left"">
      <Button variant=""secondary"">Наведи, тултип будет слева!</Button>
    </Tooltip>
    <Tooltip placement=""right"" description=""Tooltip on right"">
      <Button variant=""secondary"">Наведи, тултип будет справа!</Button>
    </Tooltip>
  </div>
)
`}
          />

          <Editor
            description=""Тултип с вариантами поведения на отображение.""
            code={`import { Tooltip, Button } from '@nlmk/ds-2.0';

export default  App = () => (
  <div style=${style}>
    <Tooltip
      placement=""top""
      behavior=""hover""
      description=""Tooltip on hover""
    >
      <Button variant=""secondary"">Тултип появится при наведении!</Button>
    </Tooltip>
    <Tooltip
      placement=""top""
      behavior=""click""
      description=""Tooltip on click""
    >
      <Button variant=""secondary"">Тултип появится при клике!</Button>
    </Tooltip>
    <Tooltip
      placement=""top""
      behavior=""focus""
      description=""Tooltip on focus""
    >
      <Button variant=""secondary"">Тултип появится при фокусе!</Button>
    </Tooltip>
  </div>
)
`}
          />

          <Editor
            description=""По умолчанию Тултип не открывается вокруг disabled элементов. Для того чтобы Тултип открывался корректно в этом случае, нужно оборачиваемый элемент обернуть простым элементом-оберткой, например span.""
            code={`import { Tooltip, Button } from '@nlmk/ds-2.0';

export default  App = () => (
  <div style=${style}>
    <Tooltip description=""Сюда вы можете добавить текст/подсказу для компонента"">
      <span>
        <Button variant=""secondary"" disabled>
          Наведи на меня курсор!
        </Button>
      </span>
    </Tooltip>
  </div>
)
`}
          />

          <Editor
            height={600}
            description=""Тултип с кастомной JSX разметкой внутри""
            code={`import { Tooltip, Button, Typography, Icon, Box } from '@nlmk/ds-2.0';

const RenderCustom = () => {
  return (
    <div>
    <Box color=""var(--ac-tooltip-text)"" gap=""var(--8-size)"" alignItems=""center"" paddingSpace=""xs"">
      <Icon name=""IconDoneCheckOutlined16"" color=""success""/>
      <Typography variant=""Caption-Medium"">Первый пункт</Typography>
    </Box>
      <Box color=""var(--ac-tooltip-text)"" gap=""var(--8-size)"" alignItems=""center"" paddingSpace=""xs"">
        <Icon name=""IconDoneCheckOutlined16"" color=""success""/>
        <Typography variant=""Caption-Medium"">Второй пункт</Typography>
      </Box>
        <Box color=""var(--ac-tooltip-text)"" gap=""var(--8-size)"" alignItems=""center"" paddingSpace=""xs"">
        <Icon name=""IconDoneCheckOutlined16"" color=""success""/>
        <Typography variant=""Caption-Medium"">Третий пункт</Typography>
      </Box>
    </div>
  );
};

export default  App = () =>(
  <div style=${style}>
    <Tooltip
      behavior=""click""
      title=""Заголовок тултипа с кастомным элементом""
      description=""за добавление кастомного элемента отвечает prop - render""
      render={<RenderCustom/>}
    >
      <Button variant=""secondary"">
        Нажми на меня для появления тултипа!
      </Button>
    </Tooltip>
  </div>
)
`}
          />

          <Properties argsTypes={argsTypes} />
        </>
      )}
      {Number(activeTab) == 1 && (
        <FigmaEmbed url=""https://www.figma.com/file/MSMqfqJrQNaqbLe4Ctkq7n/Design-System-2.0-NLMK-(beta)-(Community)?type=design&node-id=1039%3A43759&mode=design&t=awyt3Fzj1XS6th7v-1"" />
      )}
      {Number(activeTab) == 2 && <Tests componentName=""Tooltip"" />}
    </div>
  );
};

export default Stories;
"
Codes for components Tooltip index.tsx,"import React, { FC } from 'react';
import { Tooltip as ReactTooltip, TooltipRefProps } from 'react-tooltip';

import { generateUUID } from '@components/declaration';
import clsx from 'clsx';

import { ITooltipProps } from './types';

import styles from './Tooltip.module.scss';

import { Typography } from '..';
import { ETooltipBehaviorType, ETooltipPlacementType } from './enums';
import ReactDOM from 'react-dom';

export const TooltipPortal: FC<ITooltipProps> = ({ children, ...props }) => {
  return ReactDOM.createPortal(
    <div{...props}>
      {children}
    </div>,
    document.body
  );
};

const Tooltip: FC<ITooltipProps> = ({
  title,
  description,
  className,
  children,
  behavior = ETooltipBehaviorType.hover,
  placement = ETooltipPlacementType.top,
  render,
  clickable = false,
  popupClassName
}) => {
  const tooltipRef = React.useRef<TooltipRefProps>(null);

  const handleFocus = () => {
    behavior === ETooltipBehaviorType.focus && tooltipRef.current?.open();
  };

  const handleBlur = () => {
    behavior === ETooltipBehaviorType.focus && tooltipRef.current?.close();
  };

  const handleClick = () => {
    if (behavior === ETooltipBehaviorType.click && tooltipRef?.current?.isOpen) {
      tooltipRef.current?.close();
    }
  }

  const renderTitle = (title: string): JSX.Element => {
    return (
      <Typography className={styles['tooltip-title']} variant=""Caption-Bold"">
        {title}
      </Typography>
    );
  };

  const renderDescription = (description: string): JSX.Element => {
    return (
      <Typography className={styles['tooltip-description']} variant=""Caption-Medium"">
        {description}
      </Typography>
    );
  };

  const tooltipId = generateUUID();

  const hasContent = title || description || render;

  if (!hasContent) {
    return <>{children}</>;
  }

  return (
    <div className={clsx(styles.tooltip, className)}>
      <div
        className={styles['tooltip-target']}
        onFocus={handleFocus}
        onBlur={handleBlur}
        onClick={handleClick}
        data-tooltip-id={tooltipId}
      >
        {children}
      </div>
      <TooltipPortal>
        <ReactTooltip
          ref={tooltipRef}
          id={tooltipId}
          openOnClick={behavior === ETooltipBehaviorType.click}
          place={placement}
          className={clsx(styles['tooltip-wrapper'], popupClassName)}
          classNameArrow={styles['arrow-styling']}
          clickable={clickable}
        >
          {title && renderTitle(title)}
          {description && renderDescription(description)}
          {render && <>{render}</>}
        </ReactTooltip>
      </TooltipPortal>
    </div>
  );
};

export default Tooltip;
"
Codes for components Divider index.tsx,"import React, { FC } from 'react';

import { clsx } from 'clsx';

import { IDivider } from './types';

import styles from './Divider.module.scss';

import { orientationMapping, typeMapping } from './enums';
import HorizontalBorder from './HorizontalBorder';
import Vertical from './Vertical';

const Divider: FC<IDivider> = ({
  children,
  className,
  dashed = false,
  orientation = orientationMapping.center,
  orientationSpace = 0,
  type
}) => {
  if (type === typeMapping.vertical) {
    return <Vertical className={className} dashed={dashed} />;
  }

  if (!children) {
    return (
      <div data-testid=""WRAPPER"" className={clsx(className, styles.wrapper)}>
        <HorizontalBorder isSmall={orientation === orientationMapping.left} dashed={dashed} />
      </div>
    );
  }

  return (
    <div data-testid=""WRAPPER"" className={clsx(className, styles.wrapper)}>
      <HorizontalBorder
        isSmall={orientation === orientationMapping.left}
        dashed={dashed}
        orientationSpace={orientationSpace}
      />
      <div className={styles['child-wrapper']}>{children}</div>
      <HorizontalBorder
        isSmall={orientation === orientationMapping.right}
        dashed={dashed}
        orientationSpace={orientationSpace}
      />
    </div>
  );
};

export default Divider;
"
Codes for components Divider _stories Stories.tsx,"import React, { useState } from 'react';

import Editor from '@components/_storybook/Stories/components/Editor';
import FigmaEmbed from '@components/_storybook/Stories/components/FigmaEmbed';
import Header from '@components/_storybook/Stories/components/Header';
import Properties from '@components/_storybook/Stories/components/Properties';
import Tests from '@components/_storybook/Stories/components/Tests';
import '@components/_storybook/Stories/styles.css';
import { Tabs } from '@components/index';

import styles from '@components/_storybook/Stories/Stories.module.scss';

import argsTypes from './argsTypes';
import {
  DASHED_DIVIDER,
  DEFAULT_DIVIDER,
  DIVIDER_ORIENTATION,
  DIVIDER_ORIENTATION_CUSTOM_SPACE,
  DIVIDER_TYPE,
  VERTICAL_DIVIDER
} from './text';

const style = '{{ width: 900, padding: 30 }}';

const styleVariations = `{{
    padding: '30px',
    display: 'flex',
    flexDirection: 'column',
    gap: '24px'
}}`;

const FIGMA_LINK =
  'https://www.figma.com/file/3dTe0kYNFqQO3VnjJ10jyv/DS2.0-Input?type=design&node-id=4230-7104&mode=design&t=hGZk1uvXm3rDzcu6-0';

const Stories = (): JSX.Element => {
  const [activeTab, setActiveTab] = useState(0);

  return (
    <div className={styles.wrapper}>
      <Header
        title=""Divider""
        description=""Компонент Divider - это визуальный элемент, используемый для разделения содержимого на разных частях пользовательского интерфейса, таких как списки, сетки или разделы на странице.""
        isStable
        codeLink=""https://github.com/nlmk-group/ds-2.0/tree/main/src/components/Divider""
        figmaLink={FIGMA_LINK}
      />

      <div className={styles.tabs}>
        <Tabs>
          <Tabs.Tab label=""Разработчику"" active={0 === Number(activeTab)} onClick={() => setActiveTab(0)} />
          {/* <Tabs.Tab label=""Дизайнеру"" active={1 === Number(activeTab)} onClick={() => setActiveTab(1)} /> */}
          <Tabs.Tab label=""Тестирование"" active={2 === Number(activeTab)} onClick={() => setActiveTab(2)} />
        </Tabs>
      </div>

      {Number(activeTab) == 0 && (
        <>
          <Editor
            description={DEFAULT_DIVIDER}
            code={`import { Divider } from '@nlmk/ds-2.0';

export default  App = () => (
  <div style=${style}>
    <Divider>
      <span style={{color: ""var(--text-grey-900)""}}>
        Divider по умолчанию
      </span>
    </Divider>
  </div>
)
`}
          />

          <Editor
            description={DASHED_DIVIDER}
            code={`import { Divider } from '@nlmk/ds-2.0';

export default  App = () => (
  <div style=${style}>
    <Divider dashed>
      <span style={{color: ""var(--text-grey-900)""}}>
        Divider по умолчанию
      </span>
    </Divider>
  </div>
)
`}
          />

          <Editor
            description={DIVIDER_ORIENTATION}
            code={`import { Divider } from '@nlmk/ds-2.0';

export default  App = () => (
  <div style=${style}>
    <Divider orientation=""left"">
      <span style={{color: ""var(--text-grey-900)""}}>
        Вариант ориентации Divider влево
      </span>
    </Divider>
    <br/>
    <Divider orientation=""right"">
      <span style={{color: ""var(--text-grey-900)""}}>
        Вариант ориентации Divider вправо
      </span>
    </Divider>
    <br/>
    <Divider orientation=""center"">
      <span style={{color: ""var(--text-grey-900)""}}>
        Вариант ориентации Divider по середине
      </span>
    </Divider>
  </div>
)
`}
          />

          <Editor
            description={DIVIDER_ORIENTATION_CUSTOM_SPACE}
            code={`import { Divider } from '@nlmk/ds-2.0';

export default  App = () => (
  <div style=${style}>
    <Divider
      orientation=""left""
      orientationSpace={68}
    >
      <span style={{color: ""var(--text-grey-900)""}}>
        Кастомизация размера пространства
      </span>
    </Divider>
    <br/>
    <Divider
      orientation=""right""
      orientationSpace={72}
    >
      <span style={{color: ""var(--text-grey-900)""}}>
        Кастомизация размера пространства
      </span>
    </Divider>
  </div>
)
`}
          />

          <Editor
            description={VERTICAL_DIVIDER}
            code={`import { Divider } from '@nlmk/ds-2.0';

export default  App = () => (
  <div style=${style}>
    <div
      style={{
        display: 'flex'
      }}
    >
      <span className=""_divider-content_12xmv_74"" style={{color: ""var(--text-grey-900)""}}>
        Текст №1
      </span>
      <Divider type=""vertical"" />
      <span className=""_divider-content_12xmv_74"" style={{color: ""var(--text-grey-900)""}}>
        Текст №2
      </span>
      <Divider
        dashed
        type=""vertical""
      />
      <span className=""_divider-content_12xmv_74"" style={{color: ""var(--text-grey-900)""}}>
        Текст №3
      </span>
    </div>
  </div>
)
`}
          />

          <Editor
            height={400}
            description={DIVIDER_TYPE}
            code={`import { Divider, Button, Icon, IconChemical24 } from '@nlmk/ds-2.0';

export default  App = () =>(
  <div style=${styleVariations}>
    <Divider dashed />
    <div
      style={{
        display: 'flex'
      }}
    >
      <span className=""_divider-content_12xmv_74"" style={{color: ""var(--text-grey-900)""}}>
        Текст №1
      </span>
      <Divider type=""vertical"" />
      <span className=""_divider-content_12xmv_74"" style={{color: ""var(--text-grey-900)""}}>
        Текст №2
      </span>
      <Divider
        dashed
        type=""vertical""
      />
      <span className=""_divider-content_12xmv_74"" style={{color: ""var(--text-grey-900)""}}>
        Текст №3
      </span>
    </div>
    <Divider dashed>
      <Button>
        <span>
          Нажать
        </span>
      </Button>
    </Divider>
    <div
      style={{
        display: 'flex'
      }}
    >
      <div
        style={{
          alignItems: 'center',
          display: 'flex'
        }}
      >
        <span className=""_divider-content_12xmv_74"" style={{color: ""var(--text-grey-900)""}}>
          Текст №1
        </span>
      </div>
      <Divider type=""vertical"" />
      <Button variant=""secondary"">
        <span>
          Нажать
        </span>
      </Button>
      <Divider
        dashed
        type=""vertical""
      />
      <Button fill=""clear"">
        <IconChemical24 />
      </Button>
    </div>
    <Divider orientation=""left"">
      <div
        style={{
          alignItems: 'center',
          display: 'flex',
          gap: '8px'
        }}
      >
        <span className=""_divider-content_12xmv_74"" style={{color: ""var(--text-grey-900)""}}>
          Экспертиза
        </span>
        <Button fill=""clear"">
          <IconChemical24 />
        </Button>
      </div>
    </Divider>
    <Divider dashed />
  </div>
)
`}
          />

          <Properties argsTypes={argsTypes} />
        </>
      )}
      {Number(activeTab) == 1 && <FigmaEmbed url={FIGMA_LINK} />}
      {Number(activeTab) == 2 && <Tests componentName=""Divider"" />}
    </div>
  );
};

export default Stories;
"
Codes for components SkeletonLoader _stories Stories.tsx,"import React, { useState } from 'react';

import Editor from '@components/_storybook/Stories/components/Editor';
import Header from '@components/_storybook/Stories/components/Header';
import Properties from '@components/_storybook/Stories/components/Properties';
import Tests from '@components/_storybook/Stories/components/Tests';
import '@components/_storybook/Stories/styles.css';
import { Tabs } from '@components/index';

import styles from '@components/_storybook/Stories/Stories.module.scss';

import argsTypes from './argsTypes';

const Stories = (): JSX.Element => {
  const [activeTab, setActiveTab] = useState(0);

  return (
    <div className={styles.wrapper}>
      <Header
        title=""SkeletonLoader""
        description=""Skeleton Loader — это статический/анимированный элемент для информации, которая все еще загружается.""
        isStable
        codeLink=""https://github.com/nlmk-group/ds-2.0/tree/main/src/components/SkeletonLoader""
      />

      <div className={styles.tabs}>
        <Tabs>
          <Tabs.Tab label=""Разработчику"" active={0 === Number(activeTab)} onClick={() => setActiveTab(0)} />
          <Tabs.Tab label=""Тестирование"" active={2 === Number(activeTab)} onClick={() => setActiveTab(2)} />
        </Tabs>
      </div>

      {Number(activeTab) == 0 && (
        <>
          <Editor
            height={200}
            description=""Компонент лоадера по умолчанию""
            code={`import { SkeletonLoader } from '@nlmk/ds-2.0';

export default  App = () => (
  <>
    <SkeletonLoader width=""350px"" />
  </>
)
`}
          />

          <Editor
            description=""Компонент лоадера с множественными блоками""
            code={`import { SkeletonLoader } from '@nlmk/ds-2.0';

export default  App = () => (
  <>
    <div>
      <SkeletonLoader width=""40px"" count={1} height=""50px"" />
      <SkeletonLoader width=""310px"" count={1} height=""50px"" />
    </div>
    <SkeletonLoader width=""115px"" count={3} height=""50px"" />
    <SkeletonLoader width=""177px"" count={2} height=""50px"" />
  </>
)
`}
          />

          <Properties argsTypes={argsTypes} />
        </>
      )}
      {Number(activeTab) == 2 && <Tests componentName=""SkeletonLoader"" />}
    </div>
  );
};

export default Stories;
"
Codes for components SkeletonLoader index.tsx,"import React, { FC } from 'react';

import clsx from 'clsx';

import { ISkeletonLoading } from './types';

import styles from './SkeletonLoader.module.scss';

const SkeletonLoader: FC<ISkeletonLoading> = ({ id, className, count = 1, width = '200px', height = '100px' }) => {
  return (
    <span id={id} className={clsx('skeleton-loading', className)}>
      {Array.from({ length: count }).map((_, i) => (
        <span className={styles['loading-wrapper']} key={i} style={{ width, height }}>
          &zwnj;
        </span>
      ))}
    </span>
  );
};

export default SkeletonLoader;
"
Codes for components Modal index.tsx,"import React, { FC, SyntheticEvent, useCallback, useEffect, useRef, useState } from 'react';

import { EButtonSizes } from '@components/Button/enums';
import { Button, IconCloseOutlined24 } from '@components/index';
import clsx from 'clsx';

import { IModalProps } from './types';

import styles from './Modal.module.scss';

/**
 * Компонент Modal для отображения модального окна.
 * @component
 * @param {Object} props - Свойства компонента Modal.
 * @param {boolean} props.isOpen - Состояние открытия/закрытия модального окна.
 * @param {() => void} props.onClose - Функция для закрытия модального окна.
 * @param {ReactNode} props.children - Содержимое модального окна.
 * @param {boolean} [props.isDraggable=false] - Возможность перетаскивания модального окна.
 * @param {boolean} [props.isResizable=false] - Возможность изменения размеров модального окна.
 * @param {() => void} [props.onEscapeDown] - Функция для обработки нажатия клавиши Escape.
 * @param {string} [props.className] - Дополнительные CSS классы для модального окна.
 * @param {boolean} [props.disableBackdropClick=false] - Отключает закрытие модального окна по клику вне его области.
 * @returns {ReactElement | null} Компонент Modal.
 */

const Modal: FC<IModalProps> = ({
  children,
  isOpen,
  onClose,
  onEscapeDown,
  isDraggable = false,
  isResizable = false,
  disableBackdropClick = false,
  disablePageScroll = false,
  className
}) => {
  const modalRef = useRef<HTMLDivElement>(null);
  const dragHandleRef = useRef<HTMLDivElement>(null);
  const position = useRef({ left: 0, top: 0, dragStartX: 0, dragStartY: 0 });
  const [isDragging, setIsDragging] = useState(false);

  const handleMouseMove = useCallback(
    (e: MouseEvent) => {
      if (!isDragging) return;
      const { dragStartX, dragStartY } = position.current;
      position.current.left += e.clientX - dragStartX;
      position.current.top += e.clientY - dragStartY;
      position.current.dragStartX = e.clientX;
      position.current.dragStartY = e.clientY;
      if (modalRef.current) {
        modalRef.current.style.left = `${position.current.left}px`;
        modalRef.current.style.top = `${position.current.top}px`;
      }
    },
    [isDragging]
  );

  const handleMouseUp = useCallback(() => setIsDragging(false), []);

  const handleMouseDown = useCallback(
    (e: React.MouseEvent) => {
      if (!isDraggable || e.target !== dragHandleRef.current) return;
      setIsDragging(true);
      position.current.dragStartX = e.clientX;
      position.current.dragStartY = e.clientY;
    },
    [isDraggable]
  );

  const handleBackdropClick = (e: SyntheticEvent) => {
    if (!disableBackdropClick) {
      onClose(e);
    }
  };

  useEffect(() => {
    if (isOpen && disablePageScroll) {
      document.body.classList.add(styles['no-scroll']);
    } else {
      document.body.classList.remove(styles['no-scroll']);
    }

    return () => {
      document.body.classList.remove(styles['no-scroll']);
    };
  }, [isOpen]);

  useEffect(() => {
    if (isDraggable) {
      window.addEventListener('mousemove', handleMouseMove);
      window.addEventListener('mouseup', handleMouseUp);
    }

    const handleKeyDown = (e: KeyboardEvent) => {
      if (e.key === 'Escape') {
        if (onEscapeDown) {
          onEscapeDown();
        }
        onClose();
      }
    };
    window.addEventListener('keydown', handleKeyDown);

    return () => {
      window.removeEventListener('mousemove', handleMouseMove);
      window.removeEventListener('mouseup', handleMouseUp);
      window.removeEventListener('keydown', handleKeyDown);
    };
  }, [isDraggable, handleMouseMove, handleMouseUp, onClose, onEscapeDown]);

  if (!isOpen) return null;

  const modalClasses = clsx(
    styles.modal,
    {
      [styles.resizable]: isResizable,
      [styles.topPadding]: !isDraggable
    },
    className
  );
  const dragHandleClasses = clsx(styles.dragHandle, {
    [styles.draggable]: isDraggable
  });

  return (
    <>
      <div className={styles.backdrop} onClick={handleBackdropClick} />
      <div className={styles.modalWrapper}>
        <div className={styles.modalInner} ref={modalRef} onMouseDown={handleMouseDown}>
          <div className={modalClasses}>
            {isDraggable && <div ref={dragHandleRef} className={dragHandleClasses} />}
            {children}
          </div>
          <Button
            iconButton={<IconCloseOutlined24 htmlColor=""var(--ac-overlay-button)"" />}
            variant=""primary""
            fill=""clear""
            className={styles.modalClose}
            aria-label=""Close""
            onClick={(e) => onClose(e)}
            size={EButtonSizes.s}
          />
        </div>
      </div>
    </>
  );
};

export default Modal;
"
Codes for components Modal _stories Stories.tsx,"import React, { useState } from 'react';

import Editor from '@components/_storybook/Stories/components/Editor';
import FigmaEmbed from '@components/_storybook/Stories/components/FigmaEmbed';
import Header from '@components/_storybook/Stories/components/Header';
import Properties from '@components/_storybook/Stories/components/Properties';
import Tests from '@components/_storybook/Stories/components/Tests';
import { Tabs } from '@components/index';

import styles from '@components/_storybook/Stories/Stories.module.scss';

import { argsTypes } from './argsTypes';

const ModalStories = (): JSX.Element => {
  const [activeTab, setActiveTab] = useState(0);

  const modalDefaultCode = `import { Button, Modal, Typography }  from '@nlmk/ds-2.0';
import { useState } from 'react';

export default  App = () => {
  const [isOpen, setIsOpen] = useState(false);

  return (
      <>
        <Button onClick={() => setIsOpen(true)}>Открыть модальное окно</Button>
        <Modal
            isOpen={isOpen}
            onClose={() => {
                setIsOpen(false);
            }}
        >
            <Typography color=""var(--steel-90)"">Содержимое модального окна</Typography>
        </Modal>
      </>
  );
};
`;

  const modalDraggableCode = `import { Button, Modal, Typography }  from '@nlmk/ds-2.0';
import { useState } from 'react';

export default  App = () => {
  const [isOpen, setIsOpen] = useState(false);

  return (
      <>
        <Button onClick={() => setIsOpen(true)}>Открыть модальное окно</Button>
        <Modal
            isOpen={isOpen}
            isDraggable
            onClose={() => {
                setIsOpen(false);
            }}
        >
            <Typography color=""var(--steel-90)"">Содержимое модального окна</Typography>
        </Modal>
      </>
  );
};
`;

  const modalResizableCode = `import { Button, Modal, Typography }  from '@nlmk/ds-2.0';
import { useState } from 'react';

export default  App = () => {
  const [isOpen, setIsOpen] = useState(false);
  return (
      <>
        <Button onClick={() => setIsOpen(true)}>Открыть модальное окно</Button>
        <Modal
            isOpen={isOpen}
            isResizable
            onClose={() => {
                setIsOpen(false);
            }}
        >
            <Typography color=""var(--steel-90)"">Содержимое модального окна</Typography>
        </Modal>
      </>
  );
};
`;

  return (
    <div className={styles.wrapper}>
      <Header
        title=""Modal""
        description=""Компонент Modal обеспечивает отображение модальных окон с возможностями перетаскивания, изменения размера и обработки закрытия.""
        isStable
        codeLink=""https://github.com/nlmk-group/ds-2.0/tree/main/src/components/Modal""
        figmaLink=""https://www.figma.com/file/BU6Pd9uO1AIVa1yDqhr0hw/Drawer%2FModal-window?type=design&node-id=1-17&mode=dev""
      />

      <div className={styles.tabs}>
        <Tabs>
          <Tabs.Tab label=""Разработчику"" active={0 === Number(activeTab)} onClick={() => setActiveTab(0)} />
          {/* <Tabs.Tab label=""Дизайнеру"" active={1 === Number(activeTab)} onClick={() => setActiveTab(1)} /> */}
          <Tabs.Tab label=""Тестирование"" active={2 === Number(activeTab)} onClick={() => setActiveTab(2)} />
        </Tabs>
      </div>

      {Number(activeTab) === 0 && (
        <>
          <Editor height={350} description=""Пример базового использования модального окна."" code={modalDefaultCode} />

          <Editor
            height={350}
            description=""Пример модального окна с возможностью перетаскивания.""
            code={modalDraggableCode}
          />

          <Editor
            height={350}
            description=""Пример модального окна с возможностью изменения размера.""
            code={modalResizableCode}
          />

          <Properties argsTypes={argsTypes} />
        </>
      )}
      {Number(activeTab) === 1 && (
        <FigmaEmbed url=""https://www.figma.com/file/BU6Pd9uO1AIVa1yDqhr0hw/Drawer%2FModal-window?type=design&node-id=1-17&mode=dev"" />
      )}
      {Number(activeTab) === 2 && <Tests componentName=""Modal"" />}
    </div>
  );
};

export default ModalStories;
"
Codes for components Checkbox _stories Stories.tsx,"import React, { useState } from 'react';

import Editor from '@components/_storybook/Stories/components/Editor';
import FigmaEmbed from '@components/_storybook/Stories/components/FigmaEmbed';
import Header from '@components/_storybook/Stories/components/Header';
import Properties from '@components/_storybook/Stories/components/Properties';
import Tests from '@components/_storybook/Stories/components/Tests';
import '@components/_storybook/Stories/styles.css';
import { Tabs } from '@components/index';

import styles from '@components/_storybook/Stories/Stories.module.scss';

import { argsTypes } from './argsTypes';

const FIGMA_LINK =
  'https://www.figma.com/file/2bgeOS0URFNqFO1m1bnyvg/DS2.0-Buttons?type=design&node-id=3360-16500&mode=design&t=U47unVezMPIQMdQU-0';

const Stories = (): JSX.Element => {
  const [activeTab, setActiveTab] = useState(0);

  return (
    <div className={styles.wrapper}>
      <Header
        title=""Checkbox""
        description=""Компонент Checkbox является элементом пользовательского интерфейса, который позволяет пользователю взаимодействовать с формой, выбирая или снимая выбор с определённых опций. ""
        isStable
        codeLink=""https://github.com/nlmk-group/ds-2.0/tree/main/src/components/Checkbox""
        figmaLink={FIGMA_LINK}
      />

      <div className={styles.tabs}>
        <Tabs>
          <Tabs.Tab label=""Разработчику"" active={0 === Number(activeTab)} onClick={() => setActiveTab(0)} />
          {/* <Tabs.Tab label=""Дизайнеру"" active={1 === Number(activeTab)} onClick={() => setActiveTab(1)} /> */}
          <Tabs.Tab label=""Тестирование"" active={2 === Number(activeTab)} onClick={() => setActiveTab(2)} />
        </Tabs>
      </div>

      {Number(activeTab) == 0 && (
        <>
          <Editor
            height={150}
            description=""Компонент checkbox по умолчанию.""
            code={`import { Checkbox } from '@nlmk/ds-2.0';

export default  App = () => (
  <Checkbox onChange={() => console.log('Changed!')} />
)`}
          />

          <Editor
            description=""Актуальные состояния компонента checkbox.""
            code={`import { Checkbox } from '@nlmk/ds-2.0';

export default  App = () =>(
  <>
    <Checkbox />
    <Checkbox color=""error""/>
  </>
)`}
          />

          <Editor
            description=""Checkbox с установленными флагами для параметров checked, disabled, multiple и с текстом label.""
            code={`import { Checkbox } from '@nlmk/ds-2.0';

export default  App = () =>(
  <>
    <Checkbox label=""default"" />
    <Checkbox label=""disabled"" disabled />
    <Checkbox label=""multiple"" multiple checked />
    <Checkbox label=""multiple disabled"" disabled multiple checked />
  </>
)`}
          />

          <Editor
            description=""Ниже представлен checkbox с параметром multiple, который меняет свое состояние в зависимости от количества выбранных дочерних элементов (работает только при наличии пропса checked).""
            code={`import { useState } from 'react';
import { Checkbox } from '@nlmk/ds-2.0';

export default  App = () => {
  const [checked, setChecked] = useState([true, false]);

  const handleChange1 = (event: { target: { checked: boolean } }) => {
    setChecked([event.target.checked, event.target.checked]);
  };

  const handleChange2 = (event: { target: { checked: boolean } }) => {
    setChecked([event.target.checked, checked[1]]);
  };

  const handleChange3 = (event: { target: { checked: boolean } }) => {
    setChecked([checked[0], event.target.checked]);
  };

  const isCheckedMultiple = checked[0] !== checked[1];

  return (
            <>
              <Checkbox
                label=""Parent""
                checked={isCheckedMultiple || (checked[0] && checked[1])}
                multiple={isCheckedMultiple}
                onChange={handleChange1}
              />
              <Checkbox
                label=""Child 1""
                checked={checked[0]}
                onChange={handleChange2}
              />
              <Checkbox
                label=""Child 2""
                checked={checked[1]}
                onChange={handleChange3}
              />
    </>
)}`}
          />
          <Properties argsTypes={argsTypes} />
        </>
      )}
      {Number(activeTab) == 1 && <FigmaEmbed url={FIGMA_LINK} />}
      {Number(activeTab) == 2 && <Tests componentName=""Checkbox"" />}
    </div>
  );
};

export default Stories;
"
Types for components index.ts,"/** Компоненты */
export { default as AttachFiles } from './AttachFiles';
export { default as File } from './AttachFiles/subcomponents/File';
export { default as Accordion } from './Accordion';
export { default as Alert } from './Alert';
export { default as Avatar } from './Avatar';
export { default as Input } from './Input';
export { default as ErrorPage } from './ErrorPage';
export { default as List } from './List';
export { default as Link } from './Link';
export { default as ListItem } from './ListItem';
export { default as Select } from './Select';
export { default as PseudoInput } from './PseudoInput';
export { default as Radio } from './Radio';
export { default as Box } from './Box';
export { default as Grid } from './Grid';
export { default as Button } from './Button';
export { default as Badge } from './Badge';
export { default as Breadcrumbs } from './Breadcrumbs';
export { default as Card } from './Card';
export { default as Chip } from './Chip';
export { default as DragAndDrop } from './DragAndDrop';
export { default as Checkbox } from './Checkbox';
export { default as Typography } from './Typography';
export { default as Tooltip } from './Tooltip';
export { default as Icon } from './Icon';
export { default as IconContainer } from './Icon/subcomponent/IconContainer';
export { default as ThemeSwitcher } from './ThemeSwitcher';
export { default as DatePicker } from './DatePicker';
export { default as DateTime } from './DateTime';
export { default as InputRange } from './InputRange';
export { default as InputSlider } from './InputSlider';
export { default as SkeletonLoader } from './SkeletonLoader';
export { default as Spinner } from './Spinner';
export { default as Tabs } from './Tabs';
export { default as ClickAwayListener } from './ClickAwayListener';
export { default as ProgressBar } from './ProgressBar';
export { default as Divider } from './Divider';
export { default as Snackbar } from './Snackbar';
export { default as Header } from './Header';
export { default as Switch } from './Switch';
export { default as TimePicker } from './TimePicker';
export { default as ToggleButtonGroup } from './ToggleButtonGroup';
export { default as SegmentButtonGroup } from './SegmentButtonGroup';
export { default as ImagePicture } from './ImagePicture';
export { default as Modal } from './Modal';
export { default as Sidebar } from './Sidebar';
export { default as SlideToggle } from './SlideToggle';
export { default as MenuItem } from './Sidebar';
export { default as SubmenuItem } from './Sidebar';
export { default as Scrollbar } from './Scrollbar';
export { default as Drawer } from './Drawer';
export { default as Dropdown } from './Dropdown';
export { default as DropdownMenuItem } from './Dropdown/subcomponents/DropdownMenuItem';
export { default as SimpleSelect } from './SimpleSelect';
export { default as OptionItem } from './SimpleSelect/subcomponents/OptionItem';
export { default as Stepper } from './Stepper';
export * from './ThemeSwitcher';
export * from './Icon/IconsDirectory';

/** Хуки */
export * from './Theme/hooks';
"
Codes for components Checkbox index.tsx,"import React, { FC } from 'react';

import Typography from '@components/Typography';
import clsx from 'clsx';

import type { ICheckboxProps } from './types';

import styles from './Checkbox.module.scss';

import { IconDeleteMinusFilled16, IconDoneCheckFilled16 } from '..';

const Checkbox: FC<ICheckboxProps> = ({
  id,
  label,
  checked,
  disabled = false,
  color = 'default',
  multiple = false,
  onChange,
  value,
  className
}) => {
  const colorClassName = styles[color as keyof typeof styles];

  return (
    <label className={clsx(styles.label, className)} htmlFor={id} data-testid=""checkbox"">
      <input
        type=""checkbox""
        id={id}
        checked={onChange ? checked : undefined}
        defaultChecked={!onChange ? checked : undefined}
        disabled={disabled}
        className={clsx(styles.checkbox, colorClassName)}
        onChange={onChange}
        value={value}
        aria-label={label || 'checkbox'}
      />
      <span className={clsx(styles.checkmark, colorClassName)}>
        {multiple ? (
          <IconDeleteMinusFilled16 htmlColor=""var(--ac-checkbox-checked-bg)"" />
        ) : (
          <IconDoneCheckFilled16 htmlColor=""var(--ac-checkbox-checked-bg)"" />
        )}
      </span>
      {label && (
        <Typography
          variant=""Body1-Medium""
          style={{ color: disabled ? 'var(--text-grey-500)' : 'var(--text-grey-900)', lineHeight: '18px' }}
        >
          {label}
        </Typography>
      )}
    </label>
  );
};

export default Checkbox;
"
Codes for components Chip _stories Stories.tsx,"import React, { useState } from 'react';

import Editor from '@components/_storybook/Stories/components/Editor';
import FigmaEmbed from '@components/_storybook/Stories/components/FigmaEmbed';
import Header from '@components/_storybook/Stories/components/Header';
import Properties from '@components/_storybook/Stories/components/Properties';
import Tests from '@components/_storybook/Stories/components/Tests';
import '@components/_storybook/Stories/styles.css';
import { Tabs } from '@components/index';

import styles from '@components/_storybook/Stories/Stories.module.scss';

import { argsTypes } from './argsTypes';

const Stories = (): JSX.Element => {
  const [activeTab, setActiveTab] = useState(0);

  return (
    <div className={styles.wrapper}>
      <Header
        title=""Chip""
        description=""Компонент Chip обычно используется для отображения небольших интерактивных элементов пользовательского интерфейса, таких как теги, метки, категории или выборы в фильтрах, а также для представления небольших блоков информации.""
        isStable
        codeLink=""https://github.com/nlmk-group/ds-2.0/tree/main/src/components/Chip""
        figmaLink=""https://www.figma.com/file/MSMqfqJrQNaqbLe4Ctkq7n/Design-System-2.0-NLMK-(beta)-(Community)?type=design&node-id=1039%3A25758&mode=design&t=awyt3Fzj1XS6th7v-1""
      />

      <div className={styles.tabs}>
        <Tabs>
          <Tabs.Tab label=""Разработчику"" active={0 === Number(activeTab)} onClick={() => setActiveTab(0)} />
          {/* <Tabs.Tab label=""Дизайнеру"" active={1 === Number(activeTab)} onClick={() => setActiveTab(1)} /> */}
          <Tabs.Tab label=""Тестирование"" active={2 === Number(activeTab)} onClick={() => setActiveTab(2)} />
        </Tabs>
      </div>

      {Number(activeTab) == 0 && (
        <>
          <Editor
            height={150}
            description=""Компонент Chip по умолчанию.""
            code={`import { Chip } from '@nlmk/ds-2.0';

export default  App = () => (
  <Chip>1234</Chip>
)`}
          />

          <Editor
            description=""Компонент Chip может использовать разные стили: primary (отображается по умолчанию), error, warning, success.""
            code={`import { Chip } from '@nlmk/ds-2.0';

export default  App = () =>(
  <>
    <Chip>1234</Chip>
    <Chip color=""error"">1234</Chip>
    <Chip color=""success"">1234</Chip>
    <Chip color=""warning"">1234</Chip>
  </>
)`}
          />

          <Editor
            description=""Компонент доступен в двух типах заливки: solid - полностью закрашенный, outline - закрашенна только граница.""
            code={`import { Chip } from '@nlmk/ds-2.0';;

export default  App = () =>(
  <>
    <Chip variant=""outline"">1234</Chip>
    <Chip color=""error"" variant=""outline"">1234</Chip>
    <Chip color=""success"" variant=""outline"">1234</Chip>
    <Chip color=""warning"" variant=""outline"">1234</Chip>
  </>
)`}
          />

          <Editor
            height={230}
            description=""Компонент доступен в двух размерах: s - маленький чип с высотой 16px, m - средний чип, его высота 24px.""
            code={`import { Chip } from '@nlmk/ds-2.0';

export default  App = () => (
  <>
    <Chip size=""s"">1234</Chip>
    <Chip size=""m"">1234</Chip>
  </>
)`}
          />
          <Editor
            description=""Чип может содержать суффикс.""
            code={`import { Chip } from '@nlmk/ds-2.0';

export default  App = () => (
  <>
    <Chip suffix=""кг"">1234</Chip>
    <Chip color=""error"" suffix=""кг"">1234</Chip>
    <Chip color=""success"" suffix=""кг"">1234</Chip>
    <Chip color=""warning"" suffix=""кг"">1234</Chip>
  </>
)`}
          />
          <Editor
            description=""Чип может содержать суффикс.""
            code={`import { Chip } from '@nlmk/ds-2.0';

export default  App = () => (
  <>
    <Chip label=""Цифры"">1234</Chip>
    <Chip color=""error"" label=""Цифры"">1234</Chip>
    <Chip color=""success"" label=""Цифры"">1234</Chip>
    <Chip color=""warning"" label=""Цифры"">1234</Chip>
  </>
)`}
          />

          <Properties argsTypes={argsTypes} />
        </>
      )}
      {Number(activeTab) == 1 && (
        <FigmaEmbed url=""https://www.figma.com/file/MSMqfqJrQNaqbLe4Ctkq7n/Design-System-2.0-NLMK-(beta)-(Community)?type=design&node-id=1039%3A25758&mode=design&t=awyt3Fzj1XS6th7v-1"" />
      )}
      {Number(activeTab) == 2 && <Tests componentName=""Chip"" />}
    </div>
  );
};

export default Stories;
"
Codes for components Chip index.tsx,"import React, { FC } from 'react';

import { sizesMapping, variantsMapping } from '@components/declaration/enums';
import { Badge, Box, Typography } from '@components/index';
import { ETypographyVariants } from '@components/Typography/enums';
import clsx from 'clsx';

import { ChipSize, IChipProps } from './types';

import styles from './Chip.module.scss';

import { EChipColors } from './enums';

/**
 * Компонент Chip для отображения компактной информации с возможностью добавления метки и суффикса.
 * @component
 * @param {Object} props - Свойства компонента Chip.
 * @param {EChipColors} [props.color=EChipColors.primary] - Цвет чипа.
 * @param {ChipSize} [props.size=sizesMapping.m] - Размер чипа.
 * @param {variantsMapping} [props.variant=variantsMapping.solid] - Вариант отображения чипа.
 * @param {string} [props.label] - Метка чипа.
 * @param {string|number} props.children - Основной контент чипа.
 * @param {string} [props.suffix] - Суффикс чипа.
 * @param {string} [props.className] - Дополнительный CSS класс.
 * @returns {JSX.Element} Компонент Chip.
 */

export const Chip: FC<IChipProps> = ({
  color = EChipColors.primary,
  size = sizesMapping.m,
  variant = variantsMapping.solid,
  label,
  children,
  suffix,
  className
}: {
  color?: `${EChipColors}`;
  size?: ChipSize;
  variant?: `${variantsMapping}`;
  label?: string;
  children: string | number;
  suffix?: string;
  className?: string;
}): JSX.Element => {
  const suffixVariant: Record<string, ETypographyVariants> = {
    [sizesMapping.m]: ETypographyVariants['Body2-Bold'],
    [sizesMapping.s]: ETypographyVariants['Caption-Bold']
  };

  return (
    <div className={clsx(styles.chip, className)}>
      {label && (
        <Typography className={styles.label} variant={ETypographyVariants['Body2-Medium']} color=""var(--steel-70)"">
          {label}
        </Typography>
      )}
      <Box alignItems=""center"" justifyContent=""flex-start"" gap=""0"">
        <Badge color={color} variant={variant} size={size}>
          {children}
        </Badge>
        {suffix && (
          <Typography variant={suffixVariant[size]} color=""var(--steel-70)"" className={styles.suffix}>
            {suffix}
          </Typography>
        )}
      </Box>
    </div>
  );
};

export default Chip;
"
Codes for components PseudoInput _stories Stories.tsx,"import React, { useState } from 'react';

import Editor from '@components/_storybook/Stories/components/Editor';
import FigmaEmbed from '@components/_storybook/Stories/components/FigmaEmbed';
import Header from '@components/_storybook/Stories/components/Header';
import Properties from '@components/_storybook/Stories/components/Properties';
import Tests from '@components/_storybook/Stories/components/Tests';
import '@components/_storybook/Stories/styles.css';
import { customInputColors } from '@components/declaration';
import { Tabs } from '@components/index';

import styles from '@components/_storybook/Stories/Stories.module.scss';

import { argsTypes } from './argsTypes';

enum TabIds {
  dev,
  design,
  tests
}

const COMPONENT_NAME = 'PseudoInput';
const FIGMA_URL =
  'https://www.figma.com/file/3dTe0kYNFqQO3VnjJ10jyv/Input-%CE%B2?node-id=207%3A40297&t=l4wSBLji2Mz59Nd6-0';

const Stories = (): JSX.Element => {
  const [activeTab, setActiveTab] = useState<TabIds>(TabIds.dev);

  const isActive = (tab: TabIds) => {
    return activeTab === tab;
  };

  return (
    <div className={styles.wrapper}>
      <Header
        title={COMPONENT_NAME}
        description=""PseudoInput - элемент, который позволяет отображать информацию.""
        isStable
        codeLink={`https://github.com/nlmk-group/ds-2.0/tree/main/src/components/${COMPONENT_NAME}`}
        figmaLink={FIGMA_URL}
      />

      <div className={styles.tabs}>
        <Tabs>
          <Tabs.Tab label=""Разработчику"" active={isActive(TabIds.dev)} onClick={() => setActiveTab(TabIds.dev)} />
          {/* <Tabs.Tab label=""Дизайнеру"" active={isActive(TabIds.design)} onClick={() => setActiveTab(TabIds.design)} /> */}
          <Tabs.Tab label=""Тестирование"" active={isActive(TabIds.tests)} onClick={() => setActiveTab(TabIds.tests)} />
        </Tabs>
      </div>

      {activeTab == TabIds.dev && (
        <>
          <Editor
            height={200}
            description=""PseudoInput по умолчанию. Компонент предназначен только для чтения пропсов и вывода их на экран""
            code={`import { PseudoInput } from '@nlmk/ds-2.0';

export default App = () => (
  <PseudoInput label=""Label"">
    PseudoInput
  </PseudoInput>
)
              `}
          />
          <Editor
            description=""PseudoInput разных размеров. Компонент может быть отображен с увеличенным шрифтом: дефолтное значение - s (14px размер лейбла и 16px размер внутреннего текста) и большой - m (16px и 20px). Нужный параметр необходимо передать в проп size.""
            code={`import { PseudoInput } from '@nlmk/ds-2.0';

export default App = () => (
  <>
  <PseudoInput label=""Label"" size=""m"">
    PseudoInput
  </PseudoInput>
  <PseudoInput label=""Label"" size=""s"">
    PseudoInput
  </PseudoInput>
  </>
)
              `}
          />
          <Editor
            description={`Различные состояния PseudoInput. В компонент можно передать проп labelColor со значениями: ${Object.values(
              customInputColors
            ).join(' | ')} для отображения состояний компонента`}
            code={`import { PseudoInput } from '@nlmk/ds-2.0';

export default App = () => (
  <>
  <PseudoInput label=""Label"" labelColor=""error"">
    PseudoInput
  </PseudoInput>
  <PseudoInput label=""Label"" labelColor=""warning"">
    PseudoInput
  </PseudoInput>
  <PseudoInput label=""Label"" labelColor=""success"">
    PseudoInput
  </PseudoInput>
  </>
)
              `}
          />

          <Properties argsTypes={argsTypes} />
        </>
      )}
      {activeTab == TabIds.design && <FigmaEmbed url={FIGMA_URL} />}
      {activeTab == TabIds.tests && <Tests componentName={COMPONENT_NAME} />}
    </div>
  );
};

export default Stories;
"
Codes for components PseudoInput index.tsx,"import React, { FC } from 'react';

import { customInputColors } from '@components/declaration';
import { Typography } from '@components/index';
import clsx from 'clsx';

import type { IPseudoInputProps } from './types';

import styles from './PseudoInput.module.scss';

/**
 * Компонент PseudoInput для отображения текста с меткой в стиле input.
 * @component
 * @param {Object} props - Свойства компонента PseudoInput.
 * @param {JSX.Element | string} props.label - Текст или элемент для метки PseudoInput.
 * @param {ReactNode} props.children - Содержимое PseudoInput.
 * @param {'m' | 's'} [props.size='m'] - Размер компонента PseudoInput.
 * @param {customInputColors} [props.labelColor=customInputColors.default] - Цвет метки PseudoInput.
 * @param {string} [props.className] - Дополнительный CSS класс.
 * @returns {JSX.Element} Компонент PseudoInput.
 */

const PseudoInput: FC<IPseudoInputProps> = ({
  label,
  children,
  size = 'm',
  labelColor = customInputColors.default,
  className
}) => {
  const compact = size === 's';
  const colorClassName = styles[labelColor as keyof typeof styles];

  return (
    <div className={clsx(styles.root, compact && styles.compact, className)}>
      <Typography variant=""Body2-Medium"" className={clsx(styles.label, colorClassName)}>
        {label}
      </Typography>
      <Typography variant=""Body1-Medium"" color=""var(--steel-90)"" className={styles.text}>
        {children}
      </Typography>
    </div>
  );
};

export default PseudoInput;
"
Codes for components ErrorPage _stories Stories.tsx,"import React, { useState } from 'react';

import Editor from '@components/_storybook/Stories/components/Editor';
import FigmaEmbed from '@components/_storybook/Stories/components/FigmaEmbed';
import Header from '@components/_storybook/Stories/components/Header';
import Properties from '@components/_storybook/Stories/components/Properties';
import Tests from '@components/_storybook/Stories/components/Tests';
import '@components/_storybook/Stories/styles.css';
import { Tabs } from '@components/index';

import styles from '@components/_storybook/Stories/Stories.module.scss';

import { argsTypes } from './argsTypes';

const COMPONENT_NAME = 'ErrorPage';
const FIGMA_URL =
  'https://www.figma.com/file/ocBJCN1akiFe5oQljRKNi0/DS2.0-Error?type=design&node-id=2-10&mode=design&t=RSFbkTXfvL8sjP7n-0';

const Stories = (): JSX.Element => {
  const [activeTab, setActiveTab] = useState(0);

  return (
    <div className={styles.wrapper}>
      <Header
        title=""Error page""
        description=""Компонент ErrorPage предназначен для информирования пользователя о различных ошибках веб-приложения и предложения возможных действий для их решения с помощью настраиваемых сообщений и изображений.""
        isStable
        codeLink={`https://github.com/nlmk-group/ds-2.0/tree/main/src/components/${COMPONENT_NAME}`}
        figmaLink={FIGMA_URL}
      />

      <div className={styles.tabs}>
        <Tabs>
          <Tabs.Tab label=""Разработчику"" active={0 === Number(activeTab)} onClick={() => setActiveTab(0)} />
          {/* <Tabs.Tab label=""Дизайнеру"" active={1 === Number(activeTab)} onClick={() => setActiveTab(1)} /> */}
          <Tabs.Tab label=""Тестирование"" active={2 === Number(activeTab)} onClick={() => setActiveTab(2)} />
        </Tabs>
      </div>

      {Number(activeTab) == 0 && (
        <>
          <Editor
            height={600}
            description=""Компонент ErrorPage разработан в разных вариантах""
            code={`import { ErrorPage } from '@nlmk/ds-2.0';

export default  App = () => (
  <ErrorPage errorCode=""403"" description=""Нет доступа"" hint=""Воспользуйтесь боковым меню, чтобы перейти к нужной форме"" />
)
`}
          />

          <Properties argsTypes={argsTypes} />
        </>
      )}
      {Number(activeTab) == 1 && (
        <FigmaEmbed url=""https://www.figma.com/file/ocBJCN1akiFe5oQljRKNi0/DS2.0-Error?type=design&node-id=2-10&mode=design&t=RSFbkTXfvL8sjP7n-0"" />
      )}
      {Number(activeTab) == 2 && <Tests componentName=""ErrorPage"" />}
    </div>
  );
};

export default Stories;
"
Codes for components ErrorPage index.tsx,"import React, { FC, memo } from 'react';

import { errorImagesByCode, ErrorKeys, ErrorPageProps } from './types';

import styles from './ErrorPage.module.scss';

import Box from '../Box';
import Typography from '../Typography';

const ErrorPage: FC<ErrorPageProps> = memo(
  ({ errorCode, description = 'Произошла ошибка', hint = 'Попробуйте обновить страницу', ...props }) => {
    const ImageSrc = errorImagesByCode[errorCode as ErrorKeys] || errorImagesByCode.default;
    return (
      <Box display=""flex"" justifyContent=""center"" alignItems=""center"" width=""100%"" height=""100%"" {...props}>
        <Box display=""flex"" flexDirection=""column"" alignItems=""center"" gap={'var(--60-size)'}>
          <ImageSrc />
          <Box display=""flex"" flexDirection=""column"" gap={'var(--32-size)'} className={styles.text}>
            <Typography variant=""Heading1"" color=""textPrimary"">
              {errorCode}
              {errorCode && ': '}
              {description}
            </Typography>
            <Typography variant=""Subheading3"" color=""textSecondary"">
              {hint}
            </Typography>
          </Box>
        </Box>
      </Box>
    );
  }
);

export default ErrorPage;
"
Codes for components Drawer index.tsx,"import React, { FC, useEffect, useRef, useState } from 'react';

import { EButtonSizes } from '@components/Button/enums';
import { Button, ClickAwayListener, IconCloseOutlined24 } from '@components/index';
import clsx from 'clsx';

import { IDrawerProps } from './types';

import styles from './Drawer.module.scss';

import { EDrawerPosition } from './enums';

/**
 * Компонент Drawer для отображения боковой панели.
 * @component
 * @param {Object} props - Свойства компонента Drawer.
 * @param {boolean} props.isOpen - Состояние открытия/закрытия панели.
 * @param {() => void} props.onClose - Функция для закрытия панели.
 * @param {EDrawerPosition} [props.position=EDrawerPosition.right] - Позиция панели.
 * @param {ReactNode} props.children - Содержимое панели.
 * @param {string} [props.className] - Дополнительные CSS классы для панели.
 * @param {string} [props.overlayClassName] - Дополнительные CSS классы для оверлея.
 * @param {string} [props.width='var(--drawer-default-width)'] - Ширина панели (если позиция 'left' или 'right').
 * @param {string} [props.height='var(--drawer-default-height)'] - Высота панели (если позиция 'top' или 'bottom').
 * @param {boolean} [props.disableBackdropClick=false] - Отключает закрытие панели по клику вне её области.
 * @param {boolean} [props.isViewCloseButton=true] - Отображает кнопку закрытия.
 * @param {boolean} [props.overlay=true] - Отображает оверлей.
 * @returns {ReactElement | null} Компонент Drawer.
 */

const Drawer: FC<IDrawerProps> = ({
  isOpen,
  onClose,
  position = EDrawerPosition.right,
  className,
  overlayClassName,
  children,
  width = 'var(--drawer-default-width)',
  height = 'var(--drawer-default-height)',
  disableBackdropClick,
  isViewCloseButton = true,
  overlay = true
}) => {
  const drawerRef = useRef<HTMLDivElement>(null);
  const [isClosing, setIsClosing] = useState(false);

  useEffect(() => {
    const handleKeyDown = (e: KeyboardEvent) => {
      if (e.key === 'Escape') {
        handleClose();
      }
    };

    window.addEventListener('keydown', handleKeyDown);

    return () => {
      window.removeEventListener('keydown', handleKeyDown);
    };
  }, []);

  const handleClose = () => {
    setIsClosing(true);
    setTimeout(() => {
      setIsClosing(false);
      onClose();
    }, 300);
  };

  if (!isOpen && !isClosing) return null;

  const isHorizontal = position === EDrawerPosition.left || position === EDrawerPosition.right;

  const dynamicStyleForCloseButton = {
    right: position === EDrawerPosition.right ? `calc(${width} + 16px)` : 'auto',
    left: position === EDrawerPosition.left ? `calc(${width} + 16px)` : 'auto',
    top: position === EDrawerPosition.top ? `calc(${height} + 16px)` : 'auto',
    bottom: position === EDrawerPosition.bottom ? `calc(${height} + 16px)` : 'auto'
  };

  return (
    <div
      data-testid=""DRAWER""
      className={clsx(styles.drawerOverlay, styles[position], overlayClassName, {
        [styles.fadeOut]: isClosing,
        [styles.drawerOverlayBackdrop]: !overlay
      })}
    >
      <ClickAwayListener
        className={clsx(styles.wrapper, styles[position], {
          [styles.slideOutLeft]: isClosing && position === EDrawerPosition.left,
          [styles.slideOutRight]: isClosing && position === EDrawerPosition.right,
          [styles.slideOutTop]: isClosing && position === EDrawerPosition.top,
          [styles.slideOutBottom]: isClosing && position === EDrawerPosition.bottom
        })}
        onClickAway={() => (disableBackdropClick ? undefined : handleClose())}
      >
        <div
          ref={drawerRef}
          className={clsx(styles.drawer, styles[position], className)}
          style={isHorizontal ? { width } : { height }}
        >
          <div className={styles.drawerContent}>{children}</div>
        </div>
        {!isClosing && isViewCloseButton && (
          <div className={clsx(styles.close, styles[position])}>
            <Button
              iconButton={
                <IconCloseOutlined24
                  htmlColor={overlay ? 'var(--ac-overlay-button)' : 'var(--ac-button-black-outline-default-text)'}
                />
              }
              variant=""primary""
              fill=""clear""
              className={clsx(styles.drawerClose, styles[position])}
              onClick={handleClose}
              aria-label=""Close""
              size={EButtonSizes.s}
              style={dynamicStyleForCloseButton}
            />
          </div>
        )}
      </ClickAwayListener>
    </div>
  );
};

export default Drawer;
"
Codes for components Drawer _stories Stories.tsx,"import React, { useState } from 'react';

import Editor from '@components/_storybook/Stories/components/Editor';
import FigmaEmbed from '@components/_storybook/Stories/components/FigmaEmbed';
import Header from '@components/_storybook/Stories/components/Header';
import Properties from '@components/_storybook/Stories/components/Properties';
import Tests from '@components/_storybook/Stories/components/Tests';
import { Tabs } from '@components/index';

import styles from '@components/_storybook/Stories/Stories.module.scss';

import { argsTypes } from './argsTypes';

const DrawerStories = (): JSX.Element => {
  const [activeTab, setActiveTab] = useState(0);

  const drawerDefaultCode = `import { Button, Drawer, Typography }  from '@nlmk/ds-2.0';
import { useState } from 'react';

export default  App = () => {
  const [isOpen, setIsOpen] = useState(false);

  return (
      <>
        <Button onClick={() => setIsOpen(true)}>Открыть Drawer</Button>
        <Drawer
            isOpen={isOpen}
            onClose={() => {
                setIsOpen(false);
            }}
        >
            <Typography color=""primary"">Содержимое Drawer</Typography>
        </Drawer>
      </>
  );
};
`;

  const drawerLeftCode = `import { Button, Drawer, Typography }  from '@nlmk/ds-2.0';
import { useState } from 'react';

export default  App = () => {
  const [isOpen, setIsOpen] = useState(false);

  return (
      <>
        <Button onClick={() => setIsOpen(true)}>Открыть Drawer слева</Button>
        <Drawer
            isOpen={isOpen}
            position=""left""
            onClose={() => {
                setIsOpen(false);
            }}
        >
            <Typography color=""primary"">Drawer, открывающийся слева</Typography>
        </Drawer>
      </>
  );
};
`;

  return (
    <div className={styles.wrapper}>
      <Header
        title=""Drawer""
        description=""Компонент Drawer обеспечивает отображение выдвижной панели с возможностью настройки позиции и обработки закрытия.""
        isStable
        codeLink=""https://github.com/nlmk-group/ds-2.0/tree/main/src/components/Drawer""
        figmaLink=""https://www.figma.com/file/0BGHYt5CjO71I4KhygQJD5/DS2.0-Filtering-%26-Sorting?node-id=534-67220&mode=dev""
      />

      <div className={styles.tabs}>
        <Tabs>
          <Tabs.Tab label=""Разработчику"" active={0 === Number(activeTab)} onClick={() => setActiveTab(0)} />
          {/* <Tabs.Tab label=""Дизайнеру"" active={1 === Number(activeTab)} onClick={() => setActiveTab(1)} /> */}
          <Tabs.Tab label=""Тестирование"" active={2 === Number(activeTab)} onClick={() => setActiveTab(2)} />
        </Tabs>
      </div>

      {Number(activeTab) === 0 && (
        <>
          <Editor height={350} description=""Пример базового использования Drawer."" code={drawerDefaultCode} />

          <Editor height={350} description=""Пример Drawer, открывающегося слева."" code={drawerLeftCode} />

          <Properties argsTypes={argsTypes} />
        </>
      )}
      {Number(activeTab) === 1 && (
        <FigmaEmbed url=""https://www.figma.com/file/0BGHYt5CjO71I4KhygQJD5/DS2.0-Filtering-%26-Sorting?node-id=534-67220"" />
      )}
      {Number(activeTab) === 2 && <Tests componentName=""Drawer"" />}
    </div>
  );
};

export default DrawerStories;
"
Codes for components AttachFiles _stories Stories.tsx,"import React, { useState } from 'react';

import Editor from '@components/_storybook/Stories/components/Editor';
import FigmaEmbed from '@components/_storybook/Stories/components/FigmaEmbed';
import Header from '@components/_storybook/Stories/components/Header';
import Properties from '@components/_storybook/Stories/components/Properties';
import Tests from '@components/_storybook/Stories/components/Tests';
import '@components/_storybook/Stories/styles.css';
import { Tabs } from '@components/index';

import styles from '@components/_storybook/Stories/Stories.module.scss';

import argsTypes from './argsTypes';
import {
  FILE_NAME,
  FILES_ADD_FILE_BUTTON,
  FILES_DEFAULT,
  FILES_DESCRIPTION,
  FILES_WITH_CHECKBOXES,
  FILES_WITH_TITLE
} from './text';

const Stories = (): JSX.Element => {
  const [activeTab, setActiveTab] = useState(0);

  return (
    <div className={styles.wrapper}>
      <Header
        title=""AttachFiles""
        description=""Компонент, используемый для прикрепления файла. Компонент AttachFiles
          собирается из необходимого количества компонентов File.""
        isStable
        codeLink=""https://github.com/nlmk-group/ds-2.0/tree/master/tree/src/components/AttachFiles""
        figmaLink=""https://www.figma.com/file/MSMqfqJrQNaqbLe4Ctkq7n/Design-System-2.0-NLMK-(beta)-(Community)?type=design&node-id=1036%3A20840&mode=design&t=awyt3Fzj1XS6th7v-1""
      />

      <div className={styles.tabs}>
        <Tabs>
          <Tabs.Tab label=""Разработчику"" active={0 === Number(activeTab)} onClick={() => setActiveTab(0)} />
          {/* <Tabs.Tab label=""Дизайнеру"" active={1 === Number(activeTab)} onClick={() => setActiveTab(1)} /> */}
          <Tabs.Tab label=""Тестирование"" active={2 === Number(activeTab)} onClick={() => setActiveTab(2)} />
        </Tabs>
      </div>

      {Number(activeTab) == 0 && (
        <>
          <Editor
            description=""Компонент файла, представляет собой иконку с названием файла.""
            code={`import { File } from '@nlmk/ds-2.0';

export default  App = () => (
  <>
    <File label=""${FILES_DEFAULT}"" />
  </>
)
            `}
          />

          <Editor
            description=""Компонент файл может содержать дополнительное описание. Дополнительное описание передается при помощи параметра description.""
            code={`import { File } from '@nlmk/ds-2.0';

export default  App = () => (
  <>
    <File
      description=""${FILES_DESCRIPTION}""
      label=""${FILE_NAME}""
    />
  </>
)
            `}
          />

          <Editor
            description=""В компоненте файла слева может быть использована иконка файла (по умолчанию), чекбокс (свойство: checked), иконка IconTick24 (свойство: tick) или же не быть ничего.""
            code={`import { File } from '@nlmk/ds-2.0';

export default  App = () => (
  <>
    <File label=""${FILE_NAME}"" />
    <File label=""${FILE_NAME}"" checked />
    <File label=""${FILE_NAME}"" tick />
    <File label=""${FILE_NAME}"" empty />
  </>
)
            `}
          />

          <Editor
            description=""В компоненте файла справа находится блок управления: до трех кнопок (удалить, загрузить, комментировать) или одна кнопка добавления файла. Добавление кнопок осуществляется при помощи свойств: removed - кнопка удаления, saved - кнопка загрузки, commented - комментировать, addFile - добавить файлы. Для каждой кнопки существует соответствующий ей обработчик события onClick: removedOnClick, savedOnClick, commentedOnClick, addFileOnClick.""
            code={`import { File } from '@nlmk/ds-2.0';

export default  App = () => (
  <div style={{ width: '600px' }}>
    <File
      label=""${FILE_NAME}""
      removed
    />
    <File
      commented
      label=""${FILE_NAME}""
    />
    <File
      label=""${FILE_NAME}""
      saved
    />
    <File
      commented
      label=""${FILE_NAME}""
      removed
    />
    <File
      commented
      label=""${FILE_NAME}""
      saved
    />
    <File
      label=""${FILE_NAME}""
      removed
      saved
    />
    <File
      commented
      label=""${FILE_NAME}""
      removed
      saved
    />
    <File
      addFile
      label=""${FILE_NAME}""
    />
  </div>
)
            `}
          />

          <Editor
            description=""Компонент AttachFiles может быть без заголовка: несколько файлов, объединенных в один контейнер.""
            code={`import { AttachFiles, File } from '@nlmk/ds-2.0';

export default  App = () => (
  <div style={{ width: '600px' }}>
    <AttachFiles>
      <File
        commented
        label=""${FILE_NAME}""
        removed
        saved
      />
      <File
        addFile
        label=""${FILE_NAME}""
      />
    </AttachFiles>
  </div>
)
            `}
          />

          <Editor
            description=""Компонент AttachFiles может быть с заголовком. Для передачи заголовка используется свойство - title. В качестве заголовка используется компонент File в любой из возможных вариаций.""
            code={`import { AttachFiles, File } from '@nlmk/ds-2.0';

export default  App = () => (
  <>
    <AttachFiles title={<File label=""${FILES_WITH_TITLE}"" checked />}>
      <File label=""${FILE_NAME}"" />
      <File label=""${FILE_NAME}"" checked />
      <File label=""${FILE_NAME}"" tick />
      <File label=""${FILE_NAME}"" empty />
    </AttachFiles>
  </>
)
            `}
          />

          <Editor
            description={FILES_ADD_FILE_BUTTON}
            code={`import { AttachFiles, File } from '@nlmk/ds-2.0';

export default  App = () => (
  <div style={{ width: '600px' }}>
    <AttachFiles title={<File label=""${FILE_NAME}"" addFile />}>
      <File label=""${FILE_NAME}"" />
      <File label=""${FILE_NAME}"" checked />
      <File label=""${FILE_NAME}"" tick />
      <File label=""${FILE_NAME}"" empty />
    </AttachFiles>
  </div>
)
            `}
          />

          <Editor
            description={FILES_WITH_CHECKBOXES}
            code={`import { AttachFiles, File } from '@nlmk/ds-2.0';

export default  App = () => (
  <div style={{ width: '600px' }}>
    <AttachFiles
      title={
        <File
          label=""${FILES_WITH_CHECKBOXES}""
          checked
          indeterminate={true}
        />
      }
    >
      <File
        label=""${FILE_NAME}""
        checked
        removed
      />
      <File
        label=""${FILE_NAME}""
        checked
        removed
      />
    </AttachFiles>
  </div>
)
            `}
          />

          <Properties argsTypes={argsTypes} />
        </>
      )}
      {Number(activeTab) == 1 && (
        <FigmaEmbed url=""https://www.figma.com/file/MSMqfqJrQNaqbLe4Ctkq7n/Design-System-2.0-NLMK-(beta)-(Community)?type=design&node-id=1036%3A20840&mode=design&t=awyt3Fzj1XS6th7v-1"" />
      )}
      {Number(activeTab) == 2 && <Tests componentName=""AttachFiles"" />}
    </div>
  );
};

export default Stories;
"
Codes for components AttachFiles index.tsx,"import React, { FC } from 'react';
import clsx from 'clsx';
import { IAttachFiles } from './types';
import styles from './AttachFiles.module.scss';

const AttachFiles: FC<IAttachFiles> = ({
  title,
  children,
  className
}) => {
  return (
    <div className={clsx(styles['list-center'], className)} data-testid=""ATTACHFILES_WRAPPER"">
      <div data-testid=""ATTACHFILES_TITLE"">
        {title}
      </div>
      <div className={clsx(title && styles['list-with-title'])} data-testid=""ATTACHFILES_LIST"">
        {children}
      </div>
    </div>
  );
};

export default AttachFiles;
"
Codes for components SimpleSelect _stories Stories.tsx,"import React, { useState } from 'react';

import Editor from '@components/_storybook/Stories/components/Editor';
import FigmaEmbed from '@components/_storybook/Stories/components/FigmaEmbed';
import Header from '@components/_storybook/Stories/components/Header';
import Properties from '@components/_storybook/Stories/components/Properties';
import Tests from '@components/_storybook/Stories/components/Tests';
import { Tabs } from '@components/index';

import styles from '@components/_storybook/Stories/Stories.module.scss';

import { argsTypes } from './argsTypes';

const SimpleSelectStories = (): JSX.Element => {
  const [activeTab, setActiveTab] = useState(0);

  const optionsExample = `const options = [
  { value: 'steel', label: 'High-Strength Low-Alloy Steel' },
  { value: 'aluminum', label: 'Aluminum' },
  { value: 'copper', label: 'Copper', disabled: true },
  { value: 'nickel', label: 'Nickel' },
  { value: 'zinc', label: 'Zinc' },
  { value: 'lead', label: 'Lead' },
  { value: 'tin', label: 'Tin' }
  ];`;

  const simpleSelectDefaultCode = `
  import { SimpleSelect, OptionItem } from '@nlmk/ds-2.0';
  import { useState } from 'react';

${optionsExample}

const App = () => {
  const [value, setValue] = useState('');
  return (
    <SimpleSelect value={value} onChange={setValue} label=""Одиночный выбор"">
      {options.map(({value, label, disabled}) => (
        <OptionItem key={value} value={value} label={label} disabled={disabled}>
          {label}
        </OptionItem>
      ))}
    </SimpleSelect>
  );
};
export default App;
`;

  const simpleSelectDisabledCode = `
  import { SimpleSelect, OptionItem } from '@nlmk/ds-2.0';
  import { useState } from 'react';

${optionsExample}

const App = () => {
  const [value, setValue] = useState('');
  return (
    <SimpleSelect value={value} onChange={setValue} label=""Disabled"" disabled>
      {options.map(({value, label, disabled}) => (
        <OptionItem key={value} value={value} label={label}>
          {label}
        </OptionItem>
      ))}
    </SimpleSelect>
  );
};
export default App;
`;

  const simpleSelectExtraCompactCode = `
  import { SimpleSelect, OptionItem } from '@nlmk/ds-2.0';
  import { useState } from 'react';

${optionsExample}

const App = () => {
  const [value, setValue] = useState('');
  return (
    <SimpleSelect value={value} onChange={setValue} label=""Размер xs"" size=""xs"">
      {options.map(({value, label, disabled}) => (
        <OptionItem key={value} value={value} label={label}>
          {label}
        </OptionItem>
      ))}
    </SimpleSelect>
  );
};
export default App;
`;

  const simpleSelectScrollingItemsCode = `
  import { SimpleSelect, OptionItem } from '@nlmk/ds-2.0';
  import { useState } from 'react';

${optionsExample}

const App = () => {
  const [value, setValue] = useState('');
  return (
    <SimpleSelect value={value} onChange={setValue} label=""Скролл"" scrollingItems={2}>
      {options.map(({value, label, disabled}) => (
        <OptionItem key={value} value={value} label={label}>
          {label}
        </OptionItem>
      ))}
    </SimpleSelect>
  );
};
export default App;
`;

  const simpleSelectSuccessCode = `
  import { SimpleSelect, OptionItem } from '@nlmk/ds-2.0';
  import { useState } from 'react';

${optionsExample}

const App = () => {
  const [value, setValue] = useState('');
  return (
    <SimpleSelect value={value} onChange={setValue} label=""Цвет success"" color=""success"">
      {options.map(({value, label, disabled}) => (
        <OptionItem key={value} value={value} label={label}>
          {label}
        </OptionItem>
      ))}
    </SimpleSelect>
  );
};
export default App;
`;

  const simpleSelectEmptyCode = `
  import { SimpleSelect } from '@nlmk/ds-2.0';
  import { useState } from 'react';

const App = () => {
  const [value, setValue] = useState('');
  return (
    <SimpleSelect value={value} onChange={setValue} label=""Пустой select"">
      {/* No options */}
    </SimpleSelect>
  );
};
export default App;
`;

  return (
    <div className={styles.wrapper}>
      <Header
        title=""SimpleSelect""
        description=""SimpleSelect позволяет пользователям выбирать один элемент из списка. Он поддерживает различные настройки и стили.""
        isStable
        codeLink=""https://github.com/nlmk-group/ds-2.0/tree/main/src/components/SimpleSelect""
        figmaLink=""https://www.figma.com/file/MSMqfqJrQNaqbLe4Ctkq7n/Design-System-2.0-NLMK-(beta)-(Community)?type=design&node-id=1039%3A29073&mode=design&t=awyt3Fzj1XS6th7v-1""
      />

      <div className={styles.tabs}>
        <Tabs>
          <Tabs.Tab label=""Разработчику"" active={0 === Number(activeTab)} onClick={() => setActiveTab(0)} />
          {/* <Tabs.Tab label=""Дизайнеру"" active={1 === Number(activeTab)} onClick={() => setActiveTab(1)} /> */}
          <Tabs.Tab label=""Тестирование"" active={2 === Number(activeTab)} onClick={() => setActiveTab(2)} />
        </Tabs>
      </div>

      {Number(activeTab) === 0 && (
        <>
          <Editor description=""Компонент SimpleSelect с одиночным выбором"" code={simpleSelectDefaultCode} />
          <Editor description=""SimpleSelect в состоянии disabled"" code={simpleSelectDisabledCode} />
          <Editor description=""Экстра компактный SimpleSelect"" code={simpleSelectExtraCompactCode} />
          <Editor description=""SimpleSelect с установленным скроллом"" code={simpleSelectScrollingItemsCode} />
          <Editor description=""SimpleSelect с цветом success"" code={simpleSelectSuccessCode} />
          <Editor height={200} description=""Пустой SimpleSelect"" code={simpleSelectEmptyCode} />
          <Properties argsTypes={argsTypes} />
        </>
      )}
      {Number(activeTab) === 1 && (
        <FigmaEmbed url=""https://www.figma.com/file/MSMqfqJrQNaqbLe4Ctkq7n/Design-System-2.0-NLMK-(beta)-(Community)?type=design&node-id=1039%3A29073&mode=design&t=awyt3Fzj1XS6th7v-1"" />
      )}
      {Number(activeTab) === 2 && <Tests componentName=""SimpleSelect"" />}
    </div>
  );
};

export default SimpleSelectStories;
"
Codes for components SimpleSelect index.tsx,"import React, {
  Children,
  FC,
  isValidElement,
  KeyboardEvent,
  MouseEventHandler,
  ReactElement,
  useEffect,
  useMemo,
  useRef,
  useState
} from 'react';

import { customInputColors, generateUUID, sizesMappingInput } from '@components/declaration';
import { Input } from '@components/index';
import clsx from 'clsx';

import { ISelectProps } from './types';

import styles from './SimpleSelect.module.scss';

import { ScrollingItemsDefault } from './constants';
import { SelectContext } from './context';
import { ArrowButton, OptionItem, Options } from './subcomponents';
import { IOptionItemProps } from './subcomponents/OptionItem/types';

/**
 * Компонент SimpleSelect представляет собой кастомизируемый выпадающий список с возможностью поиска.
 *
 * @component
 * @example
 * <SimpleSelect
 *   value=""option1""
 *   onChange={(value) => console.log(value)}
 *   label=""Select an option""
 *   placeholder=""Choose...""
 * >
 *   <OptionItem value=""option1"" label=""Option 1"" />
 *   <OptionItem value=""option2"" label=""Option 2"" />
 * </SimpleSelect>
 *
 * @param {Object} props - Свойства компонента SimpleSelect
 * @param {string|number} [props.value] - Значение селекта
 * @param {function} [props.onChange] - Обработчик изменения значения селекта
 * @param {string} [props.id] - Идентификатор компонента
 * @param {string} [props.portalContainerId='root'] - id рутового контейнера для создания портала
 * @param {ReactNode} props.children - Дочерние элементы селекта (опции меню)
 * @param {string} [props.menuWidth] - Ширина меню селекта
 * @param {string} [props.placeholder] - Плейсхолдер для инпута селекта
 * @param {string} [props.label] - Лейбл инпута в селекте
 * @param {boolean} [props.withPortal=false] - Флаг, указывающий, должно ли меню рендериться в портале
 * @param {boolean} [props.disabled=false] - Флаг доступности селекта
 * @param {function} [props.onBlur] - Обработчик закрытия меню options
 * @param {function} [props.onFocus] - Обработчик открытия меню options
 * @param {customInputColors} [props.color=customInputColors.default] - Цвет компонента
 * @param {TSize} [props.size=sizesMappingInput.m] - Размер компонента
 * @param {number} [props.scrollingItems=ScrollingItemsDefault] - Количество элементов после которого включается прокрутка
 * @param {string} [props.noOptionsText='Ничего не найдено'] - Текст, отображаемый когда нет доступных опций
 * @param {boolean} [props.searchable=false] - Флаг, указывающий, доступен ли поиск
 * @param {string} [props.name] - name определяет имя элемента, используется для ссылки на элемент
 * @param {function} [props.onEnterPress] - Обработчик нажатия клавиши Enter
 * @param {CSSProperties} [props.style] - Кастомные стили для компонента
 * @param {string} [props.className] - Добавление самостоятельного CSS класса
 * @param {boolean} [props.colored=false] - Флаг применения цветовых стилей
 * @param {boolean} [props.reset=false] - Флаг наличия кнопки сброса
 * @param {function} [props.onReset] - Обработчик сброса значения
 *
 * @returns {JSX.Element} Компонент SimpleSelect
 */

const SimpleSelect: FC<ISelectProps> = ({
  value,
  onChange,
  id,
  name,
  portalContainerId = 'root',
  children,
  menuWidth,
  placeholder,
  label,
  withPortal = false,
  disabled = false,
  onFocus,
  onBlur,
  color = customInputColors.default,
  size = sizesMappingInput.m,
  scrollingItems = ScrollingItemsDefault,
  noOptionsText = 'Ничего не найдено',
  searchable = false,
  colored = false,
  onEnterPress,
  reset,
  onReset,
  className,
  style
}) => {
  const [isOpen, setIsOpen] = useState(false);
  const [selectedLabel, setSelectedLabel] = useState('');
  const [searchTerm, setSearchTerm] = useState('');
  const [focusedIndex, setFocusedIndex] = useState<number>(-1);
  const selectRef = useRef<HTMLDivElement>(null);
  const inputRef = useRef<HTMLInputElement>(null);
  const menuRef = useRef<HTMLDivElement>(null);
  id = useMemo(() => `Select-${(id && id.toString()) || generateUUID()}`, [id]);

  const options = Children.toArray(children).filter((child): child is ReactElement<IOptionItemProps> =>
    isValidElement(child)
  );

  useEffect(() => {
    setSelectedLabel(findOptionLabel(value));
  }, [value, children]);

  const handleFocus = () => {
    setIsOpen(true);
    onFocus?.();
  };

  const handleBlur = () => {
    onBlur?.();
  };

  const toggleDropdown: MouseEventHandler<HTMLButtonElement> = e => {
    e.preventDefault();
    e.stopPropagation();
    if (isOpen) {
      handleBlur();
    } else {
      onFocus?.();
    }
    setIsOpen(!isOpen);
  };

  const handleOptionChange = (optionValue: string | number) => {
    setSelectedLabel(findOptionLabel(optionValue));
    setIsOpen(false);
    setFocusedIndex(-1);
    inputRef.current?.blur(); // Убираем фокус с инпута
    onChange?.(optionValue);
  };

  const findOptionLabel = (value: string | number | undefined): string => {
    if (value === undefined) return '';
    const selectedOption = options.find(child => child.props.value === value);
    return selectedOption
      ? selectedOption.props.label ||
          (typeof selectedOption.props.children === 'string' ? selectedOption.props.children : '')
      : '';
  };

  const filteredChildren = useMemo(() => {
    if (!searchable || !searchTerm) return options;
    return options.filter(child => {
      const optionLabel = child.props.label.toLowerCase();
      return optionLabel.includes(searchTerm.toLowerCase());
    });
  }, [options, searchTerm, searchable]);

  const optionsCount = filteredChildren.length;
  const noOptions = optionsCount === 0;

  const handleKeyDown = (event: KeyboardEvent<HTMLInputElement | HTMLTextAreaElement>) => {
    if (!isOpen) {
      if (event.key === 'ArrowDown' || event.key === 'ArrowUp') {
        setIsOpen(true);
        event.preventDefault();
      }
      return;
    }

    switch (event.key) {
      case 'ArrowDown':
        setFocusedIndex(prevIndex => (prevIndex + 1) % optionsCount);
        event.preventDefault();
        break;
      case 'ArrowUp':
        setFocusedIndex(prevIndex => {
          const newIndex = prevIndex - 1;
          return newIndex < 0 ? optionsCount - 1 : newIndex;
        });
        event.preventDefault();
        break;
      case 'Enter':
        if (focusedIndex !== -1 && focusedIndex < optionsCount) {
          const selectedChild = filteredChildren[focusedIndex];
          if (selectedChild && !selectedChild.props.disabled) {
            handleOptionChange(selectedChild.props.value);
            if (onEnterPress) {
              onEnterPress(selectedChild.props.value);
            }
          }
        }
        event.preventDefault();
        break;
      case 'Escape':
        setIsOpen(false);
        setFocusedIndex(-1);
        event.preventDefault();
        break;
    }
  };

  return (
    <SelectContext.Provider
      value={{
        isOpen,
        setIsOpen,
        selectedOption: value,
        setSelectedOption: handleOptionChange,
        selectedLabel,
        setSelectedLabel,
        selectRef,
        menuRef,
        menuWidth,
        withPortal,
        portalContainerId,
        scrollingItems,
        searchTerm,
        setSearchTerm,
        focusedIndex,
        setFocusedIndex,
        onChange
      }}
    >
      <div className={clsx(styles.select, className)} ref={selectRef} style={style}>
        <Input
          id={id}
          name={name}
          size={size}
          inputRef={inputRef}
          value={searchable && isOpen ? searchTerm : selectedLabel}
          onChange={e => searchable && setSearchTerm(e.target.value)}
          onKeyDown={handleKeyDown}
          label={label}
          placeholder={placeholder}
          disabled={disabled}
          readOnly={!searchable || !isOpen}
          color={color}
          onFocus={handleFocus}
          onBlur={handleBlur}
          colored={colored}
          icon={<ArrowButton isOpen={isOpen} color={color} disabled={disabled} toggleDropdown={toggleDropdown} />}
          className={clsx(styles.select__input, styles['input-helper'])}
          reset={reset}
          onReset={onReset}
          data-testid=""select-input""
        />
        <Options menuStyle={{ maxWidth: selectRef.current?.offsetWidth }}>
          {noOptions ? (
            <OptionItem value="""" label={noOptionsText} disabled>
              {noOptionsText}
            </OptionItem>
          ) : (
            filteredChildren
          )}
        </Options>
      </div>
    </SelectContext.Provider>
  );
};

export default SimpleSelect;
"
Codes for components Input _stories Stories.tsx,"import React, { useState } from 'react';

import Editor from '@components/_storybook/Stories/components/Editor';
// import FigmaEmbed from '@components/_storybook/Stories/components/FigmaEmbed';
import Header from '@components/_storybook/Stories/components/Header';
import Properties from '@components/_storybook/Stories/components/Properties';
import Tests from '@components/_storybook/Stories/components/Tests';
import { Tabs } from '@components/index';

import styles from '@components/_storybook/Stories/Stories.module.scss';

import argsTypes from './argsTypes';

const InputStories = (): JSX.Element => {
  const [activeTab, setActiveTab] = useState(0);

  const inputDefaultCode = `import { Input } from '@nlmk/ds-2.0';

export default App = () => (
  <>
    <Input />
  </>
);
`;

  const inputWithLabelCode = `import { Input } from '@nlmk/ds-2.0';

export default App = () => (
  <>
    <Input label=""Label"" />
  </>
);
`;

  const inputWithHelperCode = `import { Input } from '@nlmk/ds-2.0';

export default App = () => (
  <>
    <Input label=""Label"" helperText=""Helper text"" />
  </>
);
`;

  const inputDisabledCode = `import { Input } from '@nlmk/ds-2.0';

export default App = () => (
  <>
    <Input disabled value=""Disabled Input"" />
  </>
);
`;

  const inputErrorCode = `import { Input } from '@nlmk/ds-2.0';

export default App = () => (
  <>
    <Input color=""error"" helperText=""Error message"" />
  </>
);
`;

  const inputWarningCode = `import { Input } from '@nlmk/ds-2.0';

export default App = () => (
  <>
    <Input color=""warning"" helperText=""Warning message"" />
  </>
);
`;

  const inputSuccessCode = `import { Input } from '@nlmk/ds-2.0';

export default App = () => (
  <>
    <Input color=""success"" helperText=""Success message"" />
  </>
);
`;

  const inputTextareaCode = `import { Input } from '@nlmk/ds-2.0';

export default App = () => (
  <>
    <Input multiline />
  </>
);
`;

  const inputTextareaResizeCode = `import { Input } from '@nlmk/ds-2.0';

export default App = () => (
  <>
    <Input multiline resize />
  </>
);
`;

  const inputWithPseudoCode = `import { useState, SetStateAction } from 'react';
import { Input, Button } from '@nlmk/ds-2.0';

const App = () => {
    const [isPseudo, setIsPseudo] = useState(false);
    const [innerValue, setInnerValue] = useState('value');

    const handleChange = (e: { target: { value: SetStateAction<string> } }) => {
        setInnerValue(e.target.value);
    };

    return (
        <>
            <div style={{display: 'flex', flexDirection: 'column'}}>
                <Input pseudo={isPseudo} value={innerValue} label='Label' onChange={handleChange} />
                <Button onClick={() => setIsPseudo(!isPseudo)} style={{ marginTop: '10px' }}>
                    Переключить
                </Button>
            </div>
        </>
    );
};

export default App;
`;

  return (
    <div className={styles.wrapper}>
      <Header
        title=""Input""
        description=""Компонент Input позволяет пользователям вводить текстовую информацию. Он поддерживает различные варианты, включая лейблы, иконки, многострочный ввод и различные стили.""
        isStable
        codeLink=""https://github.com/nlmk-group/ds-2.0/tree/main/src/components/Input""
        figmaLink=""https://www.figma.com/file/MSMqfqJrQNaqbLe4Ctkq7n/Design-System-2.0-NLMK-(beta)-(Community)?type=design&node-id=1036%3A20850&mode=design&t=awyt3Fzj1XS6th7v-1""
      />

      <div className={styles.tabs}>
        <Tabs>
          <Tabs.Tab label=""Разработчику"" active={0 === Number(activeTab)} onClick={() => setActiveTab(0)} />
          {/* <Tabs.Tab label=""Дизайнеру"" active={1 === Number(activeTab)} onClick={() => setActiveTab(1)} /> */}
          <Tabs.Tab label=""Тестирование"" active={2 === Number(activeTab)} onClick={() => setActiveTab(2)} />
        </Tabs>
      </div>

      {Number(activeTab) === 0 && (
        <>
          <Editor height={200} description=""Input по умолчанию"" code={inputDefaultCode} />

          <Editor height={200} description=""Input с лейблом"" code={inputWithLabelCode} />

          <Editor height={200} description=""Input с лейблом и вспомогательным текстом"" code={inputWithHelperCode} />

          <Editor height={200} description=""Input в состоянии disabled"" code={inputDisabledCode} />

          <Editor height={200} description=""Input в состоянии error"" code={inputErrorCode} />

          <Editor height={200} description=""Input в состоянии warning"" code={inputWarningCode} />

          <Editor height={200} description=""Input в состоянии success"" code={inputSuccessCode} />

          <Editor height={200} description=""Textarea по умолчанию"" code={inputTextareaCode} />

          <Editor height={200} description=""Textarea со свойством ресайз"" code={inputTextareaResizeCode} />

          <Editor
            height={350}
            description=""Возможно реализовать переключение компонента Input в PseudoInput с помощью пропса pseudo""
            code={inputWithPseudoCode}
          />

          <Properties argsTypes={argsTypes} />
        </>
      )}

      {/*{Number(activeTab) === 1 && (*/}
      {/*  <FigmaEmbed url=""https://www.figma.com/file/MSMqfqJrQNaqbLe4Ctkq7n/Design-System-2.0-NLMK-(beta)-(Community)?type=design&node-id=1036%3A20850&mode=design&t=awyt3Fzj1XS6th7v-1"" />*/}
      {/*)}*/}
      {Number(activeTab) === 2 && <Tests componentName=""Input"" />}
    </div>
  );
};

export default InputStories;
"
Codes for components Input index.tsx,"import React, { FC, Ref, useMemo, useRef } from 'react';

import { customInputColors, generateUUID, sizesMappingInput } from '@components/declaration';
import { Icon, PseudoInput, Typography } from '@components/index';
import clsx from 'clsx';

import { TInputProps } from './types';

import styles from './Input.module.scss';

/**
 * Компонент Input для создания текстовых полей ввода различных стилей и размеров.
 * @component
 * @param {Object} props - Свойства компонента Input.
 * @param {string} [props.id] - Уникальный идентификатор инпута.
 * @param {string} [props.value] - Значение инпута.
 * @param {boolean} [props.disabled=false] - Флаг отключения инпута.
 * @param {string} [props.label] - Текст метки (label) инпута.
 * @param {boolean} [props.pseudo=false] - Флаг псевдо-инпута.
 * @param {ReactNode} [props.icon] - Иконка инпута.
 * @param {boolean} [props.multiline=false] - Флаг многострочного режима.
 * @param {boolean} [props.resize=false] - Флаг возможности изменения размера (для textarea).
 * @param {ReactNode} [props.helperText] - Вспомогательный текст.
 * @param {sizesMappingInput} [props.size=sizesMappingInput.m] - Размер инпута.
 * @param {boolean} [props.reset=false] - Флаг наличия кнопки сброса.
 * @param {function} [props.onChange] - Обработчик изменения значения.
 * @param {function} [props.onReset] - Обработчик сброса значения.
 * @param {function} [props.onBlur] - Обработчик потери фокуса.
 * @param {customInputColors} [props.color=customInputColors.default] - Цвет инпута.
 * @param {string} [props.className] - Дополнительный CSS класс.
 * @param {Ref<HTMLInputElement | HTMLTextAreaElement>} [props.inputRef] - Реф для доступа к DOM-элементу инпута.
 * @param {boolean} [props.colored=false] - Флаг цветного фона.
 * @returns {JSX.Element} Компонент Input.
 */
const Input: FC<TInputProps> = ({
  id,
  value,
  disabled = false,
  label,
  pseudo = false,
  icon,
  multiline = false,
  resize = false,
  helperText,
  size = sizesMappingInput.m,
  reset = false,
  onChange,
  onReset,
  onBlur,
  color = customInputColors.default,
  className,
  inputRef,
  colored = false,
  ...props
}) => {
  const ref = inputRef || useRef<HTMLInputElement | HTMLTextAreaElement>(null);
  id = useMemo(() => `Input-${(id && id.toString()) || generateUUID()}`, [id]);

  const sizeStyles = {
    [sizesMappingInput.m]: styles['text-field'],
    [sizesMappingInput.s]: clsx(styles['text-field'], styles.compact),
    [sizesMappingInput.xs]: clsx(styles['text-field'], styles['extra-compact'])
  };

  if (pseudo) {
    return (
      <PseudoInput
        label={label as string}
        size={size === sizesMappingInput.s ? sizesMappingInput.s : sizesMappingInput.m}
        labelColor={color}
      >
        {value}
      </PseudoInput>
    );
  }

  const colorClassName = styles[color];
  const isResetIconVisible = reset && onReset && value && value.length > 0 && !disabled && !multiline;
  const isCustomIconVisible = icon && !multiline;

  return (
    <div className={clsx(styles['input-wrapper'], colored && styles.colored, className)}>
      {multiline ? (
        <textarea
          ref={ref as Ref<HTMLTextAreaElement>}
          id={id}
          className={clsx(
            styles['text-field'],
            styles.textarea,
            resize && styles.resize,
            colorClassName,
            disabled && styles['disabled-input'],
            colored && styles.colored
          )}
          disabled={disabled}
          placeholder="" ""
          value={value}
          onChange={onChange}
          onBlur={onBlur}
          {...props}
        />
      ) : (
        <input
          ref={ref as Ref<HTMLInputElement>}
          id={id}
          className={clsx(
            sizeStyles[size],
            icon && styles['input-with-icon'],
            colorClassName,
            colored && styles.colored,
            disabled && styles['disabled-input']
          )}
          disabled={disabled}
          type=""text""
          placeholder="" ""
          value={value}
          onChange={onChange}
          onBlur={onBlur}
          {...props}
        />
      )}
      {label && (
        <label className={clsx(styles.label, colorClassName)} htmlFor={id}>
          <Typography variant=""Body1-Medium"" className={styles.typography}>
            {label}
          </Typography>
        </label>
      )}
      {isResetIconVisible && (
        <div
          className={clsx(styles.icon, styles.reset, icon && styles['reset-with-icon'], colorClassName)}
          data-testid=""CLOSE_ICON""
          onClick={onReset}
        >
          {<Icon htmlColor=""var(--steel-70)"" containerSize={24} name=""IconCloseOutlined24"" />}
        </div>
      )}
      {isCustomIconVisible && (
        <div className={clsx(styles.icon, styles['icon-text'], disabled && styles.disabled, colorClassName)}>
          {icon}
        </div>
      )}
      {helperText && (
        <Typography
          variant=""Caption-Medium""
          id={`${id}-helper-text`}
          className={clsx(styles['helper-text'], colorClassName)}
        >
          {helperText}
        </Typography>
      )}
    </div>
  );
};

export default Input;
"
Codes for components Button _stories Stories.tsx,"import React, { useState } from 'react';

import Editor from '@components/_storybook/Stories/components/Editor';
import FigmaEmbed from '@components/_storybook/Stories/components/FigmaEmbed';
import Header from '@components/_storybook/Stories/components/Header';
import Properties from '@components/_storybook/Stories/components/Properties';
import Tests from '@components/_storybook/Stories/components/Tests';
import '@components/_storybook/Stories/styles.css';
import { Tabs } from '@components/index';

import styles from '@components/_storybook/Stories/Stories.module.scss';

import { EButtonFill, EButtonSizes, EButtonVariant } from '../enums';
import argsTypes from './argsTypes';

const FIGMA_LINK =
  'https://www.figma.com/file/2bgeOS0URFNqFO1m1bnyvg/DS2.0-Buttons?type=design&node-id=102-26898&mode=design&t=AyZ6cEr1XAJLQdOB-0';

const Stories = (): JSX.Element => {
  const [activeTab, setActiveTab] = useState(0);

  return (
    <div className={styles.wrapper}>
      <Header
        title=""Button""
        description=""Компонент Button представляет собой кнопку, которую можно настроить с помощью различных параметров, таких как
          размер, иконки, знаки и стили.""
        isStable
        codeLink=""https://github.com/nlmk-group/ds-2.0/tree/main/src/components/Button""
        figmaLink={FIGMA_LINK}
      />

      <div className={styles.tabs}>
        <Tabs>
          <Tabs.Tab label=""Разработчику"" active={0 === Number(activeTab)} onClick={() => setActiveTab(0)} />
          {/* <Tabs.Tab label=""Дизайнеру"" active={1 === Number(activeTab)} onClick={() => setActiveTab(1)} /> */}
          <Tabs.Tab label=""Тестирование"" active={2 === Number(activeTab)} onClick={() => setActiveTab(2)} />
        </Tabs>
      </div>

      {Number(activeTab) == 0 && (
        <>
          <Editor
            description=""Компонент кнопки по умолчанию в трёх размерах: обычный (m) - является размером по умолчанию, высота кнопки
          в таком случае составляет 40px, компактный (s) - высота такой кнопки составляет 32px и экстра компактный
          (xs) с высотой в 28px.""
            code={`import { Button } from '@nlmk/ds-2.0';

export default  App = () =>(
  <>
  <Button>
    Button
  </Button>
  <Button size=""${EButtonSizes.s}"">
    Button
  </Button>
  <Button size=""${EButtonSizes.xs}"">
    Button
  </Button>
  </>
)`}
          />

          <Editor
            description=""Всего представлено для кнопки семь различных стилей – primary (отображается по умолчанию), secondary,
          grey, outline, greyOutline, text.""
            code={`import { Button } from '@nlmk/ds-2.0';

export default  App = () =>(
  <>
    <Button>
      Button
    </Button>
    <Button fill=""${EButtonFill.outline}"">
      Button
    </Button>
    <Button fill=""${EButtonFill.clear}"">
      Button
    </Button>
    <Button variant=""${EButtonVariant.secondary}"">
      Button
    </Button>
    <Button variant=""${EButtonVariant.grey}"">
      Button
    </Button>
    <Button variant=""${EButtonVariant.grey}"" fill=""${EButtonFill.outline}"">
      Button
    </Button>
    <Button variant=""${EButtonVariant.grey}"" fill=""${EButtonFill.clear}"">
      Button
    </Button>
    <Button variant=""${EButtonVariant.black}"">
      Button
    </Button>
    <Button variant=""${EButtonVariant.black}"" fill=""${EButtonFill.outline}"">
      Button
    </Button>
    <Button variant=""${EButtonVariant.black}"" fill=""${EButtonFill.clear}"">
      Button
    </Button>
  </>
)`}
          />

          <Editor
            description=""Компонент кнопки может быть неактивным для пользователя (disabled).""
            code={`import { Button } from '@nlmk/ds-2.0';

export default  App = () =>(
  <>
    <Button disabled>
      Button
    </Button>
    <Button fill=""${EButtonFill.outline}"" disabled>
      Button
    </Button>
    <Button fill=""${EButtonFill.clear}"" disabled>
      Button
    </Button>
    <Button variant=""${EButtonVariant.secondary}"" disabled>
      Button
    </Button>
    <Button variant=""${EButtonVariant.grey}"" disabled>
      Button
    </Button>
    <Button variant=""${EButtonVariant.grey}"" fill=""${EButtonFill.outline}"" disabled>
      Button
    </Button>
    <Button variant=""${EButtonVariant.grey}"" fill=""${EButtonFill.clear}"" disabled>
      Button
    </Button>
    <Button variant=""${EButtonVariant.black}"" disabled>
      Button
    </Button>
    <Button variant=""${EButtonVariant.black}"" fill=""${EButtonFill.outline}"" disabled>
      Button
    </Button>
    <Button variant=""${EButtonVariant.black}"" fill=""${EButtonFill.clear}"" disabled>
      Button
    </Button>
  </>
)`}
          />

          <Editor
            description="" Компонент может быть стилизован с помощью иконок. Они могут быть отображены слева (startIcon) и справа
          (endIcon) или одновременно с двух сторон от текста кнопки или только отображать иконку.""
            code={`import { Button, IconArticleFilled24 } from '@nlmk/ds-2.0';

export default  App = () =>(
  <>
    <Button startIcon={<IconArticleFilled24 />}>
      Button
    </Button>
    <Button variant=""${EButtonVariant.secondary}"" endIcon={<IconArticleFilled24 />}>
      Button
    </Button>
    <Button fill=""${EButtonFill.outline}"" iconButton={<IconArticleFilled24 />}/>

  </>
)`}
          />

          <Editor
            description=""Компонент может быть стилизован с помощью бэйджа. Бэйдж может отоброжаться непосредственно справа от
          лэйбла или справа от иконки (startIcon).""
            code={`import { Button } from '@nlmk/ds-2.0';

export default  App = () =>(
  <>
    <Button endBadge={1}>
      Button
    </Button>
    <Button variant=""${EButtonVariant.secondary}"" endBadge={1}>
      Button
    </Button>
    <Button fill=""${EButtonFill.outline}"" endBadge={1}>
      Button
    </Button>
  </>
)`}
          />
          <Properties argsTypes={argsTypes} />
        </>
      )}
      {Number(activeTab) == 1 && <FigmaEmbed url={FIGMA_LINK} />}
      {Number(activeTab) == 2 && <Tests componentName=""Button"" />}
    </div>
  );
};

export default Stories;
"
Codes for components Button index.tsx,"import React, { forwardRef } from 'react';

import { EBadgeSizes } from '@components/Badge/enums';
import { variantsWithOneFill } from '@components/Button/helpers';
import { ButtonBadge } from '@components/Button/subcomponents';
import Typography from '@components/Typography';
import { ETypographyVariants } from '@components/Typography/enums';
import clsx from 'clsx';

import { IButtonProps } from './types';

import styles from './Button.module.scss';

import { EButtonFill, EButtonNodesPosition, EButtonSizes, EButtonVariant } from './enums';

/**
 * Компонент Button для создания кнопок различных стилей и размеров.
 * @component
 * @param {Object} props - Свойства компонента Button.
 * @param {ReactNode} props.children - Содержимое кнопки.
 * @param {EButtonVariant} [props.variant=EButtonVariant.primary] - Вариант стиля кнопки.
 * @param {EButtonFill} [props.fill=EButtonFill.solid] - Тип заливки кнопки.
 * @param {ReactNode} [props.startIcon] - Иконка в начале кнопки.
 * @param {ReactNode} [props.endIcon] - Иконка в конце кнопки.
 * @param {string|number} [props.startBadge] - Бейдж в начале кнопки.
 * @param {string|number} [props.endBadge] - Бейдж в конце кнопки.
 * @param {EButtonSizes} [props.size=EButtonSizes.m] - Размер кнопки.
 * @param {ReactNode} [props.iconButton] - Иконка для кнопки-иконки.
 * @param {string} [props.className] - Дополнительный CSS класс.
 * @returns {JSX.Element} Компонент Button.
 */
export const Button = forwardRef<HTMLButtonElement, IButtonProps>(
  (
    {
      children,
      variant = EButtonVariant.primary,
      fill = EButtonFill.solid,
      startIcon,
      endIcon,
      startBadge,
      endBadge,
      size = EButtonSizes.m,
      iconButton,
      className,
      ...props
    },
    ref
  ): JSX.Element => {
    const sizeClasses = {
      s: { default: styles.compact, icon: styles['icon-button-compact'] },
      xs: { default: styles['extra-compact'], icon: styles['icon-button-extra-compact'] },
      m: { default: null, icon: null }
    };

    const getIconClass = (position: EButtonNodesPosition) =>
      clsx(styles.icon, styles[`icon--${position}--size-${size}`]);

    const typographyVariants: Record<EButtonSizes, ETypographyVariants> = {
      [EBadgeSizes.m]: ETypographyVariants['Body1-Bold'],
      [EBadgeSizes.s]: ETypographyVariants['Body1-Bold'],
      [EBadgeSizes.xs]: ETypographyVariants['Caption-Bold']
    };

    const classes = clsx(
      variantsWithOneFill.has(EButtonVariant[variant]) ? styles[variant] : styles[`${variant}-${fill}`],
      styles.button,
      fill === EButtonFill.outline && styles.outline,
      iconButton && styles['icon-button'],
      sizeClasses[size].default,
      iconButton && sizeClasses[size].icon
    );

    if (iconButton) {
      return (
        <button ref={ref} className={clsx(classes, className)} {...props}>
          {iconButton}
        </button>
      );
    }

    return (
      <button ref={ref} className={clsx(classes, className)} {...props}>
        {startBadge != null && (
          <span className={getIconClass(EButtonNodesPosition.left)}>
            <ButtonBadge
              {...{
                badge: startBadge,
                variant,
                fill,
                size
              }}
            />
          </span>
        )}
        {startIcon && <span className={getIconClass(EButtonNodesPosition.left)}>{startIcon}</span>}
        <Typography className={styles['label-wrapper']} variant={typographyVariants[size]}>
          {children}
        </Typography>
        {endIcon && <span className={getIconClass(EButtonNodesPosition.right)}>{endIcon}</span>}
        {endBadge != null && (
          <span className={getIconClass(EButtonNodesPosition.right)}>
            <ButtonBadge
              {...{
                badge: endBadge,
                variant,
                fill,
                size
              }}
            />
          </span>
        )}
      </button>
    );
  }
);

export default Button;
"
Codes for components SegmentButtonGroup _stories Stories.tsx,"import React, { useState } from 'react';

import Editor from '@components/_storybook/Stories/components/Editor';
import FigmaEmbed from '@components/_storybook/Stories/components/FigmaEmbed';
import Header from '@components/_storybook/Stories/components/Header';
import Properties from '@components/_storybook/Stories/components/Properties';
import Tests from '@components/_storybook/Stories/components/Tests';
import '@components/_storybook/Stories/styles.css';
import { Tabs } from '@components/index';

import styles from '@components/_storybook/Stories/Stories.module.scss';

import { argsTypes } from './argsTypes';
import {
  DEFAULT_SEGMENT_BUTTON
} from './constants';

enum TabIds {
  dev,
  design,
  tests
}

const COMPONENT_NAME = 'SegmentButtonGroup';
const FIGMA_URL =
  'https://www.figma.com/design/2bgeOS0URFNqFO1m1bnyvg/Button-DS-3.0?node-id=1386-40366&t=tKstDPBno2uq1Mh5-0';

const Stories = (): JSX.Element => {
  const [activeTab, setActiveTab] = useState<TabIds>(TabIds.dev);

  const isActive = (tab: TabIds) => {
    return activeTab === tab;
  };

  return (
    <div className={styles.wrapper}>
      <Header
        title={COMPONENT_NAME}
        description=""Компонент SegmentButtonGroup - это набор кнопок, из которых пользователь может выбрать только одну.""
        isStable
        codeLink={`https://github.com/nlmk-group/ds-2.0/tree/main/src/components/${COMPONENT_NAME}`}
        figmaLink={FIGMA_URL}
      />

      <div className={styles.tabs}>
        <Tabs>
          <Tabs.Tab label=""Разработчику"" active={isActive(TabIds.dev)} onClick={() => setActiveTab(TabIds.dev)} />
          {/* <Tabs.Tab label=""Дизайнеру"" active={isActive(TabIds.design)} onClick={() => setActiveTab(TabIds.design)} /> */}
          <Tabs.Tab label=""Тестирование"" active={isActive(TabIds.tests)} onClick={() => setActiveTab(TabIds.tests)} />
        </Tabs>
      </div>

      {activeTab == TabIds.dev && (
        <>
          <Editor
            height={600}
            description={DEFAULT_SEGMENT_BUTTON}
            code={`import { SegmentButtonGroup } from '@nlmk/ds-2.0';

const { Button } = SegmentButtonGroup;

export default App = () => {
  return (
    <SegmentButtonGroup>
      <Button onClick={() => console.log(new Date())}>
        Печенье
      </Button>
      <Button onClick={() => console.log(new Date())}>
        Торты
      </Button>
      <Button onClick={() => console.log(new Date())}>
        Конфеты
      </Button>
    </SegmentButtonGroup>
  )
}
`}
          />
          <Properties argsTypes={argsTypes} />
        </>
      )}
      {activeTab == TabIds.design && <FigmaEmbed url={FIGMA_URL} />}
      {activeTab == TabIds.tests && <Tests componentName={COMPONENT_NAME} />}
    </div>
  );
};

export default Stories;
"
Codes for components SegmentButtonGroup index.tsx,"import React, { Children, cloneElement, createContext, isValidElement, ReactNode, useEffect, useState } from 'react';

import { Box } from '@components/index';
import clsx from 'clsx';

import type { ISegmentButtonGroup, ISegmentButtonProperties, ISegmentButtonProps } from './types';

import styles from './SegmentButtonGroup.module.scss';

import { buttonColor } from './enums';
import SegmentButton from './SegmentButton';

export const SegmentButtonProperties = createContext<ISegmentButtonProperties>({
  compact: false,
  color: buttonColor.default,
  disabled: false
});

export const SegmentButtonGroup = ({
  className = '',
  compact = false,
  color = buttonColor.default,
  disabled = false,
  children
}: ISegmentButtonGroup) => {
  const [activeId, setActiveId] = useState<number | null>(null);
  const [childrenWithProps, setChildrenWithProps] = useState<ReactNode | ReactNode[]>(null);

  const handleToggle = (index: number) => {
    if (activeId === index) {
      setActiveId(null);
      return;
    }

    setActiveId(index);
  };

  useEffect(() => {
    setChildrenWithProps(
      Children.map(children, (child, index) => {
        if (isValidElement(child)) {
          if (child.props.active) {
            setActiveId(index);
          }

          const childrenProps: ISegmentButtonProps = {
            active: activeId === index,
            disabled: child.props.disabled || disabled,
            children: child.props.children,
            toggleButton: () => handleToggle(index)
          };

          return cloneElement(child, childrenProps);
        }

        return child;
      })
    );
  }, [activeId]);

  const defaultProperties = {
    compact,
    color,
    disabled
  };

  return (
    <SegmentButtonProperties.Provider value={defaultProperties}>
      <Box
        gap={0}
        borderRadius={4}
        width=""fitContent""
        className={clsx(styles.segmentButtonGroup, className)}
        data-testid=""SEGMENT_BUTTON_WRAPPER""
      >
        {childrenWithProps}
      </Box>
    </SegmentButtonProperties.Provider>
  );
};

SegmentButtonGroup.Button = SegmentButton;

export default SegmentButtonGroup;
"
Codes for components Avatar index.tsx,"import React, { SyntheticEvent, useCallback, useMemo, useState } from 'react';

import Icon from '@components/Icon';
import { IconBirthday16, IconDoneCheckFilled16, IconDoneCheckFilled32 } from '@components/Icon/IconsDirectory';
import IconBirthday32 from '@components/Icon/IconsDirectory/NLMKONE/Birthday/32';
import { IconPersonFilled110 } from '@components/Icon/IconsDirectory/System/PersonFilled';
import Typography from '@components/Typography';
import clsx from 'clsx';

import { IAvatarComponent } from './types';

import styles from './Avatar.module.scss';

import { AVATAR_SIZE_PARAMETERS } from './constants';
import { EAvatarSize } from './enums';
import { IconBadge } from './subcomponents/IconBadge';
import IconCameraAvatar from './subcomponents/IconCameraAvatar/IconCameraAvatar';
import { getSizingStyles } from './utils';

/**
 * Компонент Avatar отрисовывает аватар пользователя с дополнительными элементами, такими как онлайновый индикатор, бейдж и т.д.
 *
 * @param {object} props - Свойства компонента.
 * @param {EAvatarSize} [props.size=EAvatarSize.m] - Размер аватара.
 * @param {string} [props.imageSrc] - URL-адрес изображения аватара.
 * @param {string} [props.userName] - Имя пользователя.
 * @param {string} [props.userSurname] - Фамилия пользователя.
 * @param {boolean} [props.online] - Статус пользователя онлайн.
 * @param {string} [props.badgeIconName] - Имя иконки бейджа для отображения.
 * @param {boolean} [props.badgeSpecialIcon=false] - Флаг, указывающий, является ли иконка бейджа специальной.
 * @param {number} [props.numberIndicator] - Числовой индикатор для отображения.
 * @param {string} [props.className] - Дополнительный CSS-класс для аватара.
 * @returns {JSX.Element} - Компонент Avatar.
 */

const Avatar: IAvatarComponent = ({
  size = EAvatarSize.m,
  imageSrc,
  userName,
  userSurname,
  online,
  badgeIconName,
  badgeSpecialIcon = false,
  numberIndicator,
  className
}) => {
  const hasNumberIndicator = typeof numberIndicator === 'number';
  const shouldShowOnlineIndicator = !hasNumberIndicator && typeof online === 'boolean';
  const sizeParameters = AVATAR_SIZE_PARAMETERS[size];
  const { iconSize, lettersVariant } = sizeParameters;

  const [imageIsAvailable, setImageIsAvailable] = useState<boolean>(Boolean(imageSrc));
  const firstLetter = userName?.charAt(0);
  const secondLetter = userSurname?.charAt(0);
  const shouldShowLetters = !imageIsAvailable && firstLetter && secondLetter;
  const shouldShowIcon = !imageIsAvailable && !shouldShowLetters;

  const { avatarStyles, lettersStyles, onlineIndicatorStyles, numberIndicatorStyles, badgeStyles } = useMemo(
    () =>
      getSizingStyles({
        sizeParameters,
        isSpecialBadge: badgeSpecialIcon,
        sizeVariant: size
      }),
    [size, badgeSpecialIcon, sizeParameters]
  );

  const iconMappings = {
    [EAvatarSize.xxxl]: badgeSpecialIcon ? (
      <IconBirthday32 htmlColor=""var(--unique-white)"" />
    ) : (
      <IconDoneCheckFilled32 htmlColor=""var(--unique-white)"" />
    ),
    [EAvatarSize.xxl]: badgeSpecialIcon ? (
      <IconBirthday16 htmlColor=""var(--unique-white)"" />
    ) : (
      <IconDoneCheckFilled16 htmlColor=""var(--unique-white)"" />
    ),
    [EAvatarSize.xl]: badgeSpecialIcon ? (
      <IconBirthday16 htmlColor=""var(--unique-white)"" />
    ) : (
      <IconDoneCheckFilled16 htmlColor=""var(--unique-white)"" />
    ),
    [EAvatarSize.l]: badgeSpecialIcon ? (
      <IconBirthday16 htmlColor=""var(--unique-white)"" />
    ) : (
      <IconDoneCheckFilled16 htmlColor=""var(--unique-white)"" />
    ),
    [EAvatarSize.m]: badgeSpecialIcon ? (
      <IconBirthday16 htmlColor=""var(--unique-white)"" />
    ) : (
      <IconDoneCheckFilled16 htmlColor=""var(--unique-white)"" />
    ),
    [EAvatarSize.s]: badgeSpecialIcon ? (
      <IconBirthday16 htmlColor=""var(--unique-white)"" />
    ) : (
      <IconDoneCheckFilled16 htmlColor=""var(--unique-white)"" />
    )
  };

  const renderedBadgeIconName = iconMappings[size];
  const isXxxlWithBirthdayIcon = badgeSpecialIcon && size === EAvatarSize.xxxl;

  const onLoadImageError = useCallback((e: SyntheticEvent) => {
    (e.target as HTMLImageElement).style.display = 'none';
    setImageIsAvailable(false);
  }, []);

  return (
    <div
      className={clsx(styles.avatar, styles[size], styles.circle, className, {
        [styles.xxxl]: size === EAvatarSize.xxxl
      })}
      style={avatarStyles}
      data-testid=""AVATAR""
    >
      {size === EAvatarSize.xxxl && (
        <div className={styles.overlay}>
          <div style={{ opacity: '100%' }}>
            <IconCameraAvatar htmlColor=""var(--unique-white)"" />
          </div>
        </div>
      )}
      {imageIsAvailable && (
        <img
          src={imageSrc}
          className={styles.image}
          data-testid=""AVATAR_IMAGE""
          alt=""avatar image""
          onError={onLoadImageError}
        />
      )}

      {shouldShowLetters && (
        <div className={styles.letters} style={lettersStyles}>
          <Typography variant={lettersVariant} data-testid=""AVATAR_LETTERS"">
            {firstLetter}
            {secondLetter}
          </Typography>
        </div>
      )}

      {shouldShowIcon && (
        <div className={styles['user-icon']} data-testid=""AVATAR_ICON"">
          {size === EAvatarSize.xxxl ? (
            <IconPersonFilled110 htmlColor=""var(--unique-white)"" />
          ) : (
            <Icon name=""IconPersonFilled32"" containerSize={iconSize} htmlColor=""var(--unique-white)"" />
          )}
        </div>
      )}

      {shouldShowOnlineIndicator && (
        <div
          className={clsx(styles['online-indicator'], styles[online ? 'online' : 'offline'])}
          style={onlineIndicatorStyles}
          data-testid=""AVATAR_INDICATOR_ONLINE""
        />
      )}

      {hasNumberIndicator && (
        <div className={styles['number-indicator']} style={numberIndicatorStyles} data-testid=""AVATAR_INDICATOR_NUMBER"">
          <Typography variant={size === EAvatarSize.xxxl ? 'Body-Bold' : 'Caption-Bold'}>{numberIndicator}</Typography>
        </div>
      )}

      {badgeIconName && (
        <div className={styles.badge} style={badgeStyles}>
          <IconBadge
            iconName={renderedBadgeIconName}
            badgeSpecialIcon={badgeSpecialIcon}
            isXxxlWithBirthdayIcon={isXxxlWithBirthdayIcon}
          />
        </div>
      )}
    </div>
  );
};

Avatar.componentType = 'Avatar';

export default Avatar;
"
Codes for components Avatar _stories Stories.tsx,"import React, { useState } from 'react';

import Editor from '@components/_storybook/Stories/components/Editor';
import FigmaEmbed from '@components/_storybook/Stories/components/FigmaEmbed';
import Header from '@components/_storybook/Stories/components/Header';
import Properties from '@components/_storybook/Stories/components/Properties';
import Tests from '@components/_storybook/Stories/components/Tests';
import '@components/_storybook/Stories/styles.css';
import { Tabs } from '@components/index';

import styles from '@components/_storybook/Stories/Stories.module.scss';

import { getAvatarImageSrc } from '../utils';
import { argsTypes } from './argsTypes';

enum TabIds {
  dev,
  design,
  tests
}

const COMPONENT_NAME = 'Avatar';
const FIGMA_URL =
  'https://www.figma.com/file/MSMqfqJrQNaqbLe4Ctkq7n/Design-System-2.0-NLMK-(beta)-(Community)?type=design&node-id=1036%3A20841&mode=design&t=awyt3Fzj1XS6th7v-1';
const AVATAR_MOCK_SRC = getAvatarImageSrc();

const Stories = (): JSX.Element => {
  const [activeTab, setActiveTab] = useState<TabIds>(TabIds.dev);

  const isActive = (tab: TabIds) => {
    return activeTab === tab;
  };

  return (
    <div className={styles.wrapper}>
      <Header
        title={COMPONENT_NAME}
        description={`Компонент Avatar представляет собой пользовательский компонент, который отображает аватар пользователя. Этот аватар может быть изображением, инициалами пользователя, иконкой профиля, а также может включать индикаторы онлайн-статуса, числовой индикатор или иконку в виде значка (badge). Компонент также поддерживает различные размеры и формы для кастомизации внешнего вида аватара.`}
        isStable
        codeLink={`https://github.com/nlmk-group/ds-2.0/tree/main/src/components/${COMPONENT_NAME}`}
        figmaLink={FIGMA_URL}
      />

      <div className={styles.tabs}>
        <Tabs>
          <Tabs.Tab label=""Разработчику"" active={isActive(TabIds.dev)} onClick={() => setActiveTab(TabIds.dev)} />
          {/* <Tabs.Tab label=""Дизайнеру"" active={isActive(TabIds.design)} onClick={() => setActiveTab(TabIds.design)} /> */}
          <Tabs.Tab label=""Тестирование"" active={isActive(TabIds.tests)} onClick={() => setActiveTab(TabIds.tests)} />
        </Tabs>
      </div>

      {activeTab == TabIds.dev && (
        <>
          <Editor
            height={220}
            description=""Дефолтный аватар""
            code={`import { Avatar } from '@nlmk/ds-2.0';

const App = () => (
  <>
    <Avatar />
  </>
)
export default App
              `}
          />
          <Editor
            description=""Аватары различных размеров""
            code={`import { Avatar } from '@nlmk/ds-2.0';

export default App = () => (
  <>
    <Avatar src=""${AVATAR_MOCK_SRC}"" size=""xxl"" />
    <Avatar src=""${AVATAR_MOCK_SRC}"" size=""xl"" />
    <Avatar src=""${AVATAR_MOCK_SRC}"" size=""l"" />
    <Avatar src=""${AVATAR_MOCK_SRC}"" size=""m"" />
    <Avatar src=""${AVATAR_MOCK_SRC}"" size=""s"" />
  </>
)
              `}
          />
          <Editor
            description=""Типы аватаров: иконка, изображение, инициалы""
            code={`import { Avatar } from '@nlmk/ds-2.0';

export default App = () => (
  <>
    <Avatar />
    <Avatar src=""${AVATAR_MOCK_SRC}"" />
    <Avatar userName='Антон' userSurname='Валуев' />
  </>
)
              `}
          />
          <Editor
            description=""Формы аватаров: круг, скругленный квадрат""
            code={`import { Avatar } from '@nlmk/ds-2.0';

export default App = () => (
  <>
    <Avatar />
    <Avatar shape=""square"" />
  </>
)
              `}
          />
          <Editor
            description=""Индикаторы аватаров: онлайн, оффлайн, количество""
            code={`import { Avatar } from '@nlmk/ds-2.0';

export default App = () => (
  <>
    <Avatar online />
    <Avatar online={false} />
    <Avatar numberIndicator={8} />
  </>
)
              `}
          />
          <Editor
            description=""Бейджи аватаров: иконка, специальный бейдж (День Рождения)""
            code={`import { Avatar, IconDoneCheckFilled16, IconBirthday16 } from '@nlmk/ds-2.0';

export default App = () => (
  <>
    <Avatar badgeIconName={<IconDoneCheckFilled16 htmlColor=""white"" />} />
    <Avatar badgeIconName={<IconBirthday16 htmlColor=""white"" />} badgeSpecialIcon />
  </>
)
              `}
          />

          <Properties argsTypes={argsTypes} />
        </>
      )}
      {activeTab == TabIds.design && <FigmaEmbed url={FIGMA_URL} />}
      {activeTab == TabIds.tests && <Tests componentName={COMPONENT_NAME} />}
    </div>
  );
};

export default Stories;
"
Codes for components Badge index.tsx,"import React, { FC } from 'react';

import { variantsMapping } from '@components/declaration/enums';
import { Typography } from '@components/index';
import { ETypographyVariants } from '@components/Typography/enums';
import clsx from 'clsx';

import { IBadgeProps } from './types';

import styles from './Badge.module.scss';

import { EBadgeColors, EBadgeSizes } from './enums';

/**
 * Компонент Badge используется для отображения меток (badges), таких как лейблы, тэги, статусы и т.д. Обычно Badge используют внутри или в непосредственной близости от другого более крупного компонента интерфейса.
 * @component
 * @param {Object} props - Свойства компонента Badge.
 * @param {EBadgeColors} [props.color=EBadgeColors.primary] - Цвет бейджа.
 * @param {EBadgeSizes} [props.size=EBadgeSizes.m] - Размер бейджа.
 * @param {variantsMapping} [props.variant=variantsMapping.solid] - Вариант отображения бейджа.
 * @param {string|number} [props.children] - Контент бейджа.
 * @param {string} [props.className] - Дополнительный CSS класс.
 * @returns {JSX.Element} Компонент Badge.
 */

export const Badge: FC<IBadgeProps> = ({
  color = EBadgeColors.primary,
  size = EBadgeSizes.m,
  variant = variantsMapping.solid,
  children,
  className
}: {
  color?: `${EBadgeColors}`;
  size?: `${EBadgeSizes}`;
  variant?: `${variantsMapping}`;
  children?: string | number;
  className?: string;
}): JSX.Element => {
  const sizeClassesMapping: { [K in keyof typeof EBadgeSizes]?: string } = {
    s: styles.compact,
    l: styles.large,
    xs: styles.xs,
    m: undefined
  };

  const typographyVariants: Record<EBadgeSizes, ETypographyVariants> = {
    [EBadgeSizes.l]: ETypographyVariants['Body1-Bold'],
    [EBadgeSizes.m]: ETypographyVariants['Caption-Bold'],
    [EBadgeSizes.s]: ETypographyVariants['Caption-Bold'],
    [EBadgeSizes.xs]: ETypographyVariants['Additional-Bold']
  };

  const badgeClasses = clsx(
    styles.badge,
    styles[color],
    sizeClassesMapping[size],
    variant === 'outline' && styles[`outline-${color}`],
    className
  );

  return (
    <div className={badgeClasses} data-testid=""BADGE_WRAPPER"">
      <Typography variant={typographyVariants[size]}>{children}</Typography>
    </div>
  );
};

export default Badge;
"
Codes for components Badge _stories Stories.tsx,"import React, { useState } from 'react';

import Editor from '@components/_storybook/Stories/components/Editor';
import FigmaEmbed from '@components/_storybook/Stories/components/FigmaEmbed';
import Header from '@components/_storybook/Stories/components/Header';
import Properties from '@components/_storybook/Stories/components/Properties';
import Tests from '@components/_storybook/Stories/components/Tests';
import '@components/_storybook/Stories/styles.css';
import { Tabs } from '@components/index';

import styles from '@components/_storybook/Stories/Stories.module.scss';

import { argsTypes } from './argsTypes';

const FIGMA_LINK = 'https://www.figma.com/file/2bgeOS0URFNqFO1m1bnyvg/DS2.0-Buttons?type=design&node-id=116-31671&mode=design&t=hegxGpGd02Ims4tD-0';

const Stories = (): JSX.Element => {
  const [activeTab, setActiveTab] = useState(0);

  return (
    <div className={styles.wrapper}>
      <Header
        title=""Badge""
        description=""Компонент Badge используется для отображения меток (badges), таких как лейблы, тэги, статусы и т.д. Обычно Badge используют внутри или в непосредственной близости от другого более крупного компонента интерфейса.""
        isStable
        codeLink=""https://github.com/nlmk-group/ds-2.0/tree/main/src/components/Badge""
        figmaLink={FIGMA_LINK}
      />

      <div className={styles.tabs}>
        <Tabs>
          <Tabs.Tab label=""Разработчику"" active={0 === Number(activeTab)} onClick={() => setActiveTab(0)} />
          {/* <Tabs.Tab label=""Дизайнеру"" active={1 === Number(activeTab)} onClick={() => setActiveTab(1)} /> */}
          <Tabs.Tab label=""Тестирование"" active={2 === Number(activeTab)} onClick={() => setActiveTab(2)} />
        </Tabs>
      </div>

      {Number(activeTab) == 0 && (
        <>
          <Editor
            height={150}
            description=""Компонент бэйджа по умолчанию.""
            code={`import { Badge } from '@nlmk/ds-2.0';

export default  App = () =>(
  <Badge>1</Badge>
)`}
          />

          <Editor
            description=""Badge является компоненетом с обязательно примененными стилем: цветом (color). Доступные стили: primary (отображается по умолчанию), secondary, grey, error, warning, success.""
            code={`import { Badge } from '@nlmk/ds-2.0';

export default  App = () =>(
  <>
    <Badge>1</Badge>
    <Badge color=""secondary"">1</Badge>
    <Badge color=""grey"">1</Badge>
    <Badge color=""error"">1</Badge>
    <Badge color=""warning"">1</Badge>
    <Badge color=""success"">1</Badge>
  </>
)`}
          />

          <Editor
            description=""Badge представлен в нескольких вариациях (стилях): solid (с заливкой) и outline (с контуром).""
            code={`import { Badge } from '@nlmk/ds-2.0';

export default  App = () =>(
  <>
    <Badge variant=""outline"">1</Badge>
    <Badge color=""secondary"" variant=""outline"">1</Badge>
    <Badge color=""grey"" variant=""outline"">1</Badge>
    <Badge color=""error"" variant=""outline"">1</Badge>
    <Badge color=""warning"" variant=""outline"">1</Badge>
    <Badge color=""success"" variant=""outline"">1</Badge>
  </>
)`}
          />

          <Editor
            description=""Компонент Badge доступен в трёх размерах: s - маленький бэйдж с высотой 16px, m - средний бэйдж, его высота 24px и l - большой бэйдж высотой 26px.""
            code={`import { Badge } from '@nlmk/ds-2.0';

export default  App = () =>(
  <>
    <Badge size=""l"">1</Badge>
    <Badge size=""m"">1</Badge>
    <Badge size=""s"">1</Badge>
    <Badge size=""xs"">1</Badge>
  </>
)`}
          />
          <Properties argsTypes={argsTypes} />
        </>
      )}
      {Number(activeTab) == 1 && (
        <FigmaEmbed url={FIGMA_LINK} />
      )}
      {Number(activeTab) == 2 && (<Tests componentName=""Badge"" />)}
    </div>
  );
};

export default Stories;
"
Codes for components ProgressBar index.tsx,"import React, { FC } from 'react';

import { Typography } from '@components/index';
import { IProgressBarProps } from '@components/ProgressBar/types';
import clsx from 'clsx';

import styles from './ProgressBar.module.scss';

const ProgressBar: FC<IProgressBarProps> = ({ percentage = 0, label, className }) => {
  const validPercentage = Math.min(Math.max(percentage, 0), 100);

  if (percentage < 0) console.error(`Percentage must be a number more or equal 0`);

  return (
    <div className={clsx(styles.root, className)}>
      <div className={styles['progress']} role=""progressBar"">
        <div className={styles['progress-fill']} style={{ width: `${validPercentage}%` }} />
        {label && (
          <Typography className={styles['progress-label']} variant=""Body1-Medium"">
            {label}
          </Typography>
        )}
      </div>
      <Typography variant=""Subheading3-Medium"" className={styles['progress-percentage']}>
        {validPercentage}%
      </Typography>
    </div>
  );
};

export default ProgressBar;
"
Codes for components ProgressBar _stories Stories.tsx,"import React, { useState } from 'react';

import Editor from '@components/_storybook/Stories/components/Editor';
import FigmaEmbed from '@components/_storybook/Stories/components/FigmaEmbed';
import Header from '@components/_storybook/Stories/components/Header';
import Properties from '@components/_storybook/Stories/components/Properties';
import Tests from '@components/_storybook/Stories/components/Tests';
import { Tabs } from '@components/index';

import styles from '@components/_storybook/Stories/Stories.module.scss';

import { argsTypes } from './argsTypes';

const ProgressBarStories = (): JSX.Element => {
  const [activeTab, setActiveTab] = useState(0);

  const progressBarDefaultCode = `import { ProgressBar } from '@nlmk/ds-2.0';

export default  App = () => (
  <div style={{ width: '400px', marginTop: '50px' }}>
    <ProgressBar percentage={60} />
  </div>
);
`;

  const progressBarWithLabelCode = `import { ProgressBar } from '@nlmk/ds-2.0';

export default  App = () => (
  <div style={{ width: '400px', marginTop: '50px' }}>
    <ProgressBar percentage={50} label=""Прогресс"" />
  </div>
);
`;

  return (
    <div className={styles.wrapper}>
      <Header
        title=""ProgressBar""
        description=""ProgressBar представляет собой компонент, показывающий прогресс выполнения задачи или процесса. Он предоставляет наглядное представление о проценте выполнения.""
        isStable
        codeLink=""https://github.com/nlmk-group/ds-2.0/tree/main/src/components/ProgressBar""
        figmaLink=""https://www.figma.com/file/MSMqfqJrQNaqbLe4Ctkq7n/Design-System-2.0-NLMK-(beta)-(Community)?type=design&node-id=1039%3A25757&mode=design&t=awyt3Fzj1XS6th7v-1""
      />

      <div className={styles.tabs}>
        <Tabs>
          <Tabs.Tab label=""Разработчику"" active={0 === Number(activeTab)} onClick={() => setActiveTab(0)} />
          {/* <Tabs.Tab label=""Дизайнеру"" active={1 === Number(activeTab)} onClick={() => setActiveTab(1)} /> */}
          <Tabs.Tab label=""Тестирование"" active={2 === Number(activeTab)} onClick={() => setActiveTab(2)} />
        </Tabs>
      </div>

      {Number(activeTab) === 0 && (
        <>
          <Editor
            height={200}
            description=""Компонент ProgressBar имеет только одно обязательное свойство percentage, которое задается числом.""
            code={progressBarDefaultCode}
          />

          <Editor
            height={200}
            description=""Компоненту ProgressBar можно добавить label который будет располагаться под шкалой процента.""
            code={progressBarWithLabelCode}
          />
          <Properties argsTypes={argsTypes} />
        </>
      )}
      {Number(activeTab) === 1 && (
        <FigmaEmbed url=""https://www.figma.com/file/MSMqfqJrQNaqbLe4Ctkq7n/Design-System-2.0-NLMK-(beta)-(Community)?type=design&node-id=1039%3A25757&mode=design&t=awyt3Fzj1XS6th7v-1"" />
      )}
      {Number(activeTab) === 2 && <Tests componentName=""ProgressBar"" />}
    </div>
  );
};

export default ProgressBarStories;
"
Codes for components ImagePicture index.tsx,"import React, { FC, useState } from 'react';
import Icon from '@components/Icon';
import clsx from 'clsx';
import { IImagePicture } from './types';
import styles from './ImagePicture.module.scss';
import { ImagePictureRadius, ImagePictureRatios } from './enums';

const ImagePicture: FC<IImagePicture> = ({
  src,
  aspectRatio = ImagePictureRatios['ratio-1x1'],
  radius = ImagePictureRadius['radius-none'],
  className,
  zoom = true,
  ...restImgProps
}) => {
  const [isHovered, setIsHovered] = useState(false);
  const shouldShowZoomOverlay = zoom && src && isHovered;

  const handleMouseEnter = () => {
    setIsHovered(true);
  };

  const handleMouseLeave = () => {
    setIsHovered(false);
  };

  return (
    <div
      className={clsx(
        styles['image-wrapper'],
        styles[aspectRatio],
        styles[radius],
        {
          [styles['no-content']]: !src
        },
        className
      )}
      onMouseEnter={handleMouseEnter}
      onMouseLeave={handleMouseLeave}
      data-testid=""IMAGE_PICTURE""
    >
      {shouldShowZoomOverlay && (
        <>
          <div className={styles['hover-icon']}>
            <Icon
              name='IconZoomInOutlined24'
              containerSize={32}
            />
          </div>
          <div className={styles['hover-overlay']} />
        </>
      )}
      {src && <img src={src} className={styles.image} alt={restImgProps.alt} {...restImgProps} />}
      {!src && (
        <div className={styles['empty-icon']}>
          <Icon
            name='IconFactory32'
            htmlColor={'var(--ac-image-picture-no-content-icon)'}
          />
        </div>
      )}
    </div>
  );
};

export default ImagePicture;
"
Codes for components ImagePicture _stories Stories.tsx,"import React, { useState } from 'react';

import Editor from '@components/_storybook/Stories/components/Editor';
import FigmaEmbed from '@components/_storybook/Stories/components/FigmaEmbed';
import Header from '@components/_storybook/Stories/components/Header';
import Properties from '@components/_storybook/Stories/components/Properties';
import Tests from '@components/_storybook/Stories/components/Tests';
import { Tabs } from '@components/index';

import styles from '@components/_storybook/Stories/Stories.module.scss';

import { argsTypes } from './argsTypes';

const FIGMA_LINK =
  'https://www.figma.com/file/vyvtqfFuN9lCYoWKqEnm9v/DS2.0-Image-%26-Picture?type=design&node-id=667-1393&mode=design&t=hr2Gk5nIjO2Ka48f-0';

const ImagePictureStories = (): JSX.Element => {
  const [activeTab, setActiveTab] = useState(0);

  const imgpicDefaultCode = `import { ImagePicture } from '@nlmk/ds-2.0';

const App = () => {
  const path = 'https://images.unsplash.com/photo-1683343946402-85b144e8ecb6?q=80&w=3570&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D';

  return (
    <ImagePicture src={path} alt=""Описание изображения"" />
  )
};

export default App;
`;

  const imgpicRatioCode = `import { ImagePicture } from '@nlmk/ds-2.0';

const App = () => {
  const path = 'https://images.unsplash.com/photo-1683343946402-85b144e8ecb6?q=80&w=3570&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D';

  return (
    <>
      <ImagePicture src={path} aspectRatio='ratio-16x9' />
      <ImagePicture src={path} aspectRatio='ratio-1x1' />
    </>
  )
};

export default App;
`;

  const imgpicRadiusCode = `import { ImagePicture } from '@nlmk/ds-2.0';

const App = () => {
  const path = 'https://images.unsplash.com/photo-1683343946402-85b144e8ecb6?q=80&w=3570&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D';

  return (
    <>
      <ImagePicture src={path} radius='radius-small' />
    </>
  )
};

export default App;
`;

  return (
    <div className={styles.wrapper}>
      <Header
        title=""ImagePicture""
        description=""ImagePicture обеспечивает гибкую отрисовку изображений с различными соотношениями сторон и радиусами границ. Поддерживает функцию зума при наведении.""
        isStable
        codeLink=""https://github.com/nlmk-group/ds-2.0/tree/main/src/components/ImagePicture""
        figmaLink={FIGMA_LINK}
      />

      <div className={styles.tabs}>
        <Tabs>
          <Tabs.Tab label=""Разработчику"" active={0 === Number(activeTab)} onClick={() => setActiveTab(0)} />
          {/* <Tabs.Tab label=""Дизайнеру"" active={1 === Number(activeTab)} onClick={() => setActiveTab(1)} /> */}
          <Tabs.Tab label=""Тестирование"" active={2 === Number(activeTab)} onClick={() => setActiveTab(2)} />
        </Tabs>
      </div>

      {Number(activeTab) === 0 && (
        <>
          <Editor
            height={400}
            description=""Базовый ImagePicture. Отображает изображение с заданными параметрами.""
            code={imgpicDefaultCode}
          />

          <Editor height={400} description=""ImagePicture с различными соотношениями сторон."" code={imgpicRatioCode} />

          <Editor height={400} description=""ImagePicture с радиусом границ."" code={imgpicRadiusCode} />

          <Properties argsTypes={argsTypes} />
        </>
      )}
      {Number(activeTab) === 1 && <FigmaEmbed url={FIGMA_LINK} />}
      {Number(activeTab) === 2 && <Tests componentName=""ImagePicture"" />}
    </div>
  );
};

export default ImagePictureStories;
"
Codes for components Icon _stories Stories.tsx,"import React, { useState } from 'react';

import Editor from '@components/_storybook/Stories/components/Editor';
import Header from '@components/_storybook/Stories/components/Header';
import Properties from '@components/_storybook/Stories/components/Properties';
import Tests from '@components/_storybook/Stories/components/Tests';
import '@components/_storybook/Stories/styles.css';
import { Tabs, Typography } from '@components/index';

import localStyles from './Icon.module.scss';
import styles from '@components/_storybook/Stories/Stories.module.scss';

import argsTypes from './argsTypes';
import { AllIcons } from './Icon.stories';

enum TabIds {
  dev,
  design,
  tests
}

const COMPONENT_NAME = 'Icon';

const Stories = (): JSX.Element => {
  const [activeTab, setActiveTab] = useState<TabIds>(TabIds.dev);

  const isActive = (tab: TabIds) => {
    return activeTab === tab;
  };

  return (
    <div className={styles.wrapper}>
      <Header
        title={COMPONENT_NAME}
        description=""Компонент иконок, который можно использовать как самостоятельно, так и внутри других компонентов""
        isStable
        codeLink={`https://github.com/nlmk-group/ds-2.0/tree/main/src/components/${COMPONENT_NAME}`}
      />
      <div className={styles['header-wrapper']}>
        <Typography variant=""Heading2"" color=""var(--steel-90)"">
          Иконки
        </Typography>
        <p>Существует 2 разных способа добавить иконку в проект:</p>

        <ol>
          <li>Использовать компонент Icon</li>
          <li>Использовать каждую кастомизированную иконку, как отдельный компонент</li>
        </ol>

        <Typography variant=""Heading2"" color=""var(--steel-90)"">
          Примеры
        </Typography>
        <p>
          Компонент Icon - каждая иконка данного компонента имеет контейнер (размер контейнера по умолчанию равен
          размеру иконки). Важно: загрузка иконки осуществляется по её имени в соответствии с макетом figma.
          <br />
          Для кастомизированных иконок доступны свойства:
        </p>

        <ul>
          <li>name - название иконки, соответствующее макету Figma;</li>
          <li>color - цвет иконки, согласно макету;</li>
          <li>htmlColor - цвет иконки, задаваемый пользователем;</li>
          <li>containerSize - размер контейнера иконки (по умолчанию равен размеру иконки)</li>
        </ul>
      </div>

      <div className={styles.tabs}>
        <Tabs>
          <Tabs.Tab label=""Разработчику"" active={isActive(TabIds.dev)} onClick={() => setActiveTab(TabIds.dev)} />
          <Tabs.Tab label=""Тестирование"" active={isActive(TabIds.tests)} onClick={() => setActiveTab(TabIds.tests)} />
        </Tabs>
      </div>

      {activeTab == TabIds.dev && (
        <>
          <Editor
            description=""Компонент Icon по умолчанию""
            code={`import { Icon } from '@nlmk/ds-2.0';

const App = () => (
  <Icon
    name={'IconTackleCrane24'}
    color=""primary""
    containerSize={32}
  />
)

export default App;
`}
          />
          <br />
          <Typography color=""var(--steel-90)"" variant=""Heading3"">
            Все доступные иконки
          </Typography>
          <br />
          <div className={localStyles['wrapper-info']}>
            <AllIcons />
          </div>

          <Properties argsTypes={argsTypes} />
        </>
      )}
      {activeTab == TabIds.tests && <Tests componentName={COMPONENT_NAME} />}
    </div>
  );
};

export default Stories;
"
Codes for components Icon index.tsx,"import React, { FC } from 'react';

import { TIconComponent, TIconProps } from './types';

import styles from './Icon.module.scss';

import IconContainer from '../Icon/subcomponent/IconContainer';
import icons from './IconsDirectory';

export const Icon: FC<TIconProps> = ({
  color = 'inherit',
  name,
  containerSize = 24,
  htmlColor,
  className,
  style,
  badge
}) => {
  const iconSize = Number(name.slice(-2));

  if (!icons[iconSize] || !icons[iconSize][name]) {
    throw new Error(`Icon with name ""${name}"" does not exist in the icon library.`);
  }

  const IconComponent = icons[iconSize][name] as TIconComponent;
  return (
    <IconContainer containerSize={containerSize || iconSize} className={className} style={style}>
      {badge && <div className={styles['badge-wrapper']}>{badge}</div>}
      <IconComponent htmlColor={htmlColor} color={color} />
    </IconContainer>
  );
};

export default Icon;
"
Codes for components InputSlider index.tsx,"import React, { ChangeEvent, FC, useEffect, useState } from 'react';

import { Slider } from '@components/Slider';

import { IInputSliderProps } from './types';

const InputSlider: FC<IInputSliderProps> = ({ min, max, step = 1, value: outerValue, onChange, disabled = false }) => {
  const [value, setValue] = useState(outerValue ?? min);
  const [controlHover, setControlHover] = useState(false);

  useEffect(() => {
    if (outerValue !== undefined) setValue(outerValue);
  }, [outerValue]);

  const handleChange = (e: ChangeEvent<HTMLInputElement>) => {
    e.preventDefault();
    const newMaxValue = +e.target.value;
    if (onChange) {
      onChange(newMaxValue);
    } else {
      setValue(newMaxValue);
    }
  };

  const getRangePos = (value: number) => ((value - min) / (max - min)) * 100;
  const rangePos = getRangePos(value);

  return (
    <Slider.Wrapper>
      <Slider.InputWrapper>
        <Slider.Input value={value} min={min} max={max} step={step} onChange={handleChange} disabled={disabled} setHover={setControlHover}/>
      </Slider.InputWrapper>
      <Slider.ControlWrapper>
        <Slider.Rail maxPosition={rangePos} minPosition={0} disabled={disabled} />
        <Slider.Control position={rangePos} value={value} disabled={disabled} hover={controlHover} />
      </Slider.ControlWrapper>
    </Slider.Wrapper>
  );
};

export default InputSlider;
"
Codes for components InputSlider _stories Stories.tsx,"import React, { useState } from 'react';

import Editor from '@components/_storybook/Stories/components/Editor';
import FigmaEmbed from '@components/_storybook/Stories/components/FigmaEmbed';
import Header from '@components/_storybook/Stories/components/Header';
import Properties from '@components/_storybook/Stories/components/Properties';
import Tests from '@components/_storybook/Stories/components/Tests';
import { Tabs } from '@components/index';

import styles from '@components/_storybook/Stories/Stories.module.scss';

import { argsTypes } from './argsTypes';

const InputSliderStories = (): JSX.Element => {
  const [activeTab, setActiveTab] = useState(0);

  const sliderDefaultCode = `import { useState } from 'react';
import { InputSlider, Chip } from '@nlmk/ds-2.0';

const App = () => {
    const [value, setValue] = useState(20);

    const handleChange = (newValue) => {
      setValue(newValue);
    };

    return (
        <div style={{width: '400px', marginTop: '50px'}}>
            <InputSlider
                min={0}
                max={100}
                step={1}
                value={value}
                onChange={handleChange}
            />
            <Chip>{value}</Chip>
        </div>
    );
  };

export default App;
`;

  const sliderDisabledCode = `import { useState } from 'react';

import { InputSlider } from '@nlmk/ds-2.0';

const App = () => {
    const [value, setValue] = useState(500);

    const handleChange = (newValue) => {
      setValue(newValue);
    };

    return (
        <div style={{width: '400px', marginTop: '50px'}}>
            <InputSlider
                min={100}
                max={1000}
                step={10}
                value={value}
                onChange={handleChange}
                disabled
            />
        </div>
    );
  };

export default App;
`;

  return (
    <div className={styles.wrapper}>
      <Header
        title=""InputSlider""
        description=""InputSlider представляет собой слайдер для ввода числовых значений, который позволяет пользователю выбирать значение в заданном диапазоне.""
        isStable
        codeLink=""https://github.com/nlmk-group/ds-2.0/tree/main/src/components/InputSlider""
        figmaLink=""https://www.figma.com/file/MSMqfqJrQNaqbLe4Ctkq7n/Design-System-2.0-NLMK-(beta)-(Community)?type=design&node-id=1036%3A20852&mode=design&t=awyt3Fzj1XS6th7v-1""
      />

      <div className={styles.tabs}>
        <Tabs>
          <Tabs.Tab label=""Разработчику"" active={0 === Number(activeTab)} onClick={() => setActiveTab(0)} />
          {/* <Tabs.Tab label=""Дизайнеру"" active={1 === Number(activeTab)} onClick={() => setActiveTab(1)} /> */}
          <Tabs.Tab label=""Тестирование"" active={2 === Number(activeTab)} onClick={() => setActiveTab(2)} />
        </Tabs>
      </div>

      {Number(activeTab) === 0 && (
        <>
          <Editor
            height={350}
            description=""InputSlider по умолчанию. Позволяет пользователю выбирать значение от 0 до 100.""
            code={sliderDefaultCode}
          />
          <Editor
            height={350}
            description=""Неактивный InputSlider. Слайдер установлен в состояние 'disabled', что предотвращает взаимодействие пользователя.""
            code={sliderDisabledCode}
          />
          <Properties argsTypes={argsTypes} />
        </>
      )}
      {Number(activeTab) === 1 && (
        <FigmaEmbed url=""https://www.figma.com/file/MSMqfqJrQNaqbLe4Ctkq7n/Design-System-2.0-NLMK-(beta)-(Community)?type=design&node-id=1036%3A20852&mode=design&t=awyt3Fzj1XS6th7v-1"" />
      )}
      {Number(activeTab) === 2 && <Tests componentName=""InputSlider"" />}
    </div>
  );
};

export default InputSliderStories;
"
Codes for components InputRange index.tsx,"import React, { ChangeEvent, FC, useEffect, useState } from 'react';

import { Slider } from '@components/Slider';

import { IInputRangeProps } from './types';

const InputRange: FC<IInputRangeProps> = ({ min, max, step = 1, value, onChange, disabled = false }) => {
  const [minValue, setMinValue] = useState(value ? value.min : min);
  const [maxValue, setMaxValue] = useState(value ? value.max : max);
  const [leftControlHover, setLeftControlHover] = useState(false);
  const [rightControlHover, setRightControlHover] = useState(false);

  useEffect(() => {
    if (value) {
      setMinValue(value.min);
      setMaxValue(value.max);
    }
  }, [value]);

  const handleMinRangeChange = (e: ChangeEvent<HTMLInputElement>) => {
    e.preventDefault();
    const newMinValue = Math.min(+e.target.value, maxValue - step);
    if (onChange) {
      onChange({ min: newMinValue, max: maxValue });
    } else {
      setMinValue(newMinValue);
    }
  };

  const handleMaxRangeChange = (e: ChangeEvent<HTMLInputElement>) => {
    e.preventDefault();
    const newMaxValue = Math.max(+e.target.value, minValue + step);
    if (onChange) {
      onChange({ min: minValue, max: newMaxValue });
    } else {
      setMaxValue(newMaxValue);
    }
  };

  const rangePos = (value: number) => ((value - min) / (max - min)) * 100;
  const minRangePos = rangePos(minValue);
  const maxRangePos = rangePos(maxValue);

  return (
    <Slider.Wrapper>
      <Slider.InputWrapper>
        <Slider.Input
          value={minValue}
          min={min}
          max={max}
          step={step}
          onChange={handleMinRangeChange}
          disabled={disabled}
          setHover={setLeftControlHover}
        />
        <Slider.Input
          value={maxValue}
          min={min}
          max={max}
          step={step}
          onChange={handleMaxRangeChange}
          disabled={disabled}
          setHover={setRightControlHover}
        />
      </Slider.InputWrapper>
      <Slider.ControlWrapper>
        <Slider.Control position={minRangePos} value={value.min} disabled={disabled} hover={leftControlHover}/>
        <Slider.Rail maxPosition={maxRangePos} minPosition={minRangePos} disabled={disabled} />
        <Slider.Control position={maxRangePos} value={value.max} disabled={disabled} hover={rightControlHover}/>
      </Slider.ControlWrapper>
    </Slider.Wrapper>
  );
};

export default InputRange;
"
Codes for components InputRange _stories Stories.tsx,"import React, { useState } from 'react';

import Editor from '@components/_storybook/Stories/components/Editor';
import FigmaEmbed from '@components/_storybook/Stories/components/FigmaEmbed';
import Header from '@components/_storybook/Stories/components/Header';
import Properties from '@components/_storybook/Stories/components/Properties';
import Tests from '@components/_storybook/Stories/components/Tests';
import '@components/_storybook/Stories/styles.css';
import { Tabs } from '@components/index';

import styles from '@components/_storybook/Stories/Stories.module.scss';

import argsTypes from './argsTypes';

const Stories = (): JSX.Element => {
  const [activeTab, setActiveTab] = useState(0);

  return (
    <div className={styles.wrapper}>
      <Header
        title=""InputRange""
        description=""Компонент InputRange отражает диапазон значений вдоль полосы, из которой пользователи могут выбрать диапазон
        значений. Компонент подходит для настройки таких параметров, как громкость, яркость или применение фильтров
        изображения.""
        isStable
        codeLink=""https://github.com/nlmk-group/ds-2.0/tree/main/src/components/InputRange""
        figmaLink=""https://www.figma.com/file/MSMqfqJrQNaqbLe4Ctkq7n/Design-System-2.0-NLMK-(beta)-(Community)?type=design&node-id=1036%3A20851&mode=design&t=awyt3Fzj1XS6th7v-1""
      />

      <div className={styles.tabs}>
        <Tabs>
          <Tabs.Tab label=""Разработчику"" active={0 === Number(activeTab)} onClick={() => setActiveTab(0)} />
          {/* <Tabs.Tab label=""Дизайнеру"" active={1 === Number(activeTab)} onClick={() => setActiveTab(1)} /> */}
          <Tabs.Tab label=""Тестирование"" active={2 === Number(activeTab)} onClick={() => setActiveTab(2)} />
        </Tabs>
      </div>

      {Number(activeTab) == 0 && (
        <>
          <Editor
            description=""Компонент InputRange представляет собой отрезок с min/max величинами.""
            code={`import { InputRange } from '@nlmk/ds-2.0';
import { useState } from 'react'

export default  App = () => {
  const [value, setInputRangeValue] = useState({ min: 20, max: 80 });

  const handleValuesChange = (newValues: { min: number; max: number }) => {
    setInputRangeValue(newValues);
  };

  return (
    <div style={{ width: '500px', padding: '30px 12px' }}>
      <InputRange
        min={0}
        max={100}
        step={1}
        value={value}
        onChange={handleValuesChange}
      />
    </div>
  );
}`}
          />

          <Editor
            description=""Компонент не доступен для ввода/изменения.""
            code={`import { InputRange } from '@nlmk/ds-2.0';
import { useState } from 'react'

export default  App = () => {
  const [value, setInputRangeValue] = useState({ min: 20, max: 80 });

  const handleValuesChange = (newValues: { min: number; max: number }) => {
    setInputRangeValue(newValues);
  };

  return (
    <div style={{ width: '500px', padding: '30px 12px' }}>
      <InputRange
        min={0}
        max={100}
        step={1}
        value={value}
        disabled
        onChange={handleValuesChange}
      />
    </div>
  );
}
`}
          />

          <Properties argsTypes={argsTypes} />
        </>
      )}
      {Number(activeTab) == 1 && (
        <FigmaEmbed url=""https://www.figma.com/file/MSMqfqJrQNaqbLe4Ctkq7n/Design-System-2.0-NLMK-(beta)-(Community)?type=design&node-id=1036%3A20851&mode=design&t=awyt3Fzj1XS6th7v-1"" />
      )}
      {Number(activeTab) == 2 && <Tests componentName=""InputRange"" />}
    </div>
  );
};

export default Stories;
"
Codes for components Breadcrumbs _stories Stories.tsx,"import React, { useState } from 'react';

import Editor from '@components/_storybook/Stories/components/Editor';
import FigmaEmbed from '@components/_storybook/Stories/components/FigmaEmbed';
import Header from '@components/_storybook/Stories/components/Header';
import Properties from '@components/_storybook/Stories/components/Properties';
import Tests from '@components/_storybook/Stories/components/Tests';
import '@components/_storybook/Stories/styles.css';
import { Tabs } from '@components/index';

import styles from '@components/_storybook/Stories/Stories.module.scss';

import { breadcrumbsSimple, breadcrumbsTarget, breadcrumbsThreeOptions } from '../constants';
import argsTypes from './argsTypes';

const Stories = (): JSX.Element => {
  const [activeTab, setActiveTab] = useState(0);

  return (
    <div className={styles.wrapper}>
      <Header
        title=""Breadcrumbs""
        description=""Компонент BreadCrumbs (хлебные крошки) используется в пользовательском интерфейсе для предоставления визуальной навигационной структуры, позволяющей пользователям быстро и эффективно понимать своё местоположение в иерархии контента или приложения. BreadCrumbs представляют собой последовательность ссылок или текста, а каждый элемент в ней указывает на уровень иерархии, переходя от более общего к более специфическому контенту.""
        isStable
        codeLink=""https://github.com/nlmk-group/ds-2.0/tree/main/src/components/Breadcrumbs""
        figmaLink=""https://www.figma.com/file/MSMqfqJrQNaqbLe4Ctkq7n/Design-System-2.0-NLMK-(beta)-(Community)?type=design&node-id=1036%3A20843&mode=design&t=awyt3Fzj1XS6th7v-1""
      />

      <div className={styles.tabs}>
        <Tabs>
          <Tabs.Tab label=""Разработчику"" active={0 === Number(activeTab)} onClick={() => setActiveTab(0)} />
          {/* <Tabs.Tab label=""Дизайнеру"" active={1 === Number(activeTab)} onClick={() => setActiveTab(1)} /> */}
          <Tabs.Tab label=""Тестирование"" active={2 === Number(activeTab)} onClick={() => setActiveTab(2)} />
        </Tabs>
      </div>

      {Number(activeTab) == 0 && (
        <>
          <Editor
            description=""Обычное использование компонента.""
            code={`import { Breadcrumbs } from '@nlmk/ds-2.0';

export default  App = () => (
  <>
    <Breadcrumbs crumbs={${JSON.stringify(breadcrumbsSimple, null, 4)}} />
  </>
)
            `}
          />

          <Editor
            description=""Компоненту можно задать значение ширины в процентах. Процент будет считываться отширины родителя.""
            code={`import { Breadcrumbs } from '@nlmk/ds-2.0';

export default  App = () => (
  <>
    <Breadcrumbs crumbs={${JSON.stringify(breadcrumbsThreeOptions, null, 4)}} />
    <Breadcrumbs width=""50"" crumbs={${JSON.stringify(breadcrumbsThreeOptions, null, 4)}} />
  </>
)
            `}
          />

          <Editor
            description=""Компонент может содержать ссылки с разными target.""
            code={`import { Breadcrumbs } from '@nlmk/ds-2.0';

export default  App = () => (
  <>
    <Breadcrumbs crumbs={${JSON.stringify(breadcrumbsTarget, null, 4)}} />
  </>
)
            `}
          />

          <Properties argsTypes={argsTypes} />
        </>
      )}
      {Number(activeTab) == 1 && (
        <FigmaEmbed url=""https://www.figma.com/file/MSMqfqJrQNaqbLe4Ctkq7n/Design-System-2.0-NLMK-(beta)-(Community)?type=design&node-id=1036%3A20843&mode=design&t=awyt3Fzj1XS6th7v-1"" />
      )}
      {Number(activeTab) == 2 && <Tests componentName=""Breadcrumbs"" />}
    </div>
  );
};

export default Stories;
"
Codes for components Breadcrumbs index.tsx,"import React, { FC, useEffect, useLayoutEffect, useRef, useState } from 'react';

import clsx from 'clsx';

import { BreadcrumbsProps } from './types';

import styles from './Breadcrumbs.module.scss';

import BasicBreadcrumbs from './BasicBreadcrumbs';
import ShortenBreadcrumbs from './ShortenBreadcrumbs';

const Breadcrumbs: FC<BreadcrumbsProps> = ({ crumbs, width = 100, className }) => {
  const ref = useRef<HTMLDivElement>(null);
  const [elementWidth, setElementWidth] = useState<number>(0);
  const [linkSumWidth, setLinkSumWidth] = useState<number>(0);

  const charsOverflow = (): number => {
    let result = 0;
    const nodeArray: NodeListOf<HTMLElement> = document.querySelectorAll('a#linkWidth');
    nodeArray.forEach(({ clientWidth }) => {
      result += clientWidth + 8 + 16;
    });
    return result;
  };

  useEffect(() => {
    handleSetElementWidth();
  }, [width]);

  useEffect(() => {
    if (linkSumWidth === 0) {
      setLinkSumWidth(charsOverflow());
    }
  }, [elementWidth, width]);

  const handleSetElementWidth = (): void => {
    if (!!ref && !!ref.current && elementWidth !== ref.current.offsetWidth) {
      setElementWidth(ref.current.offsetWidth);
    }
  };

  useLayoutEffect(() => {
    handleSetElementWidth();
  }, []);

  useEffect(() => {
    function handleWindowResize() {
      handleSetElementWidth();
    }

    window.addEventListener('resize', handleWindowResize);

    return () => {
      window.removeEventListener('resize', handleWindowResize);
    };
  }, [ref?.current?.offsetWidth]);

  const condition = elementWidth > linkSumWidth || crumbs.length <= 2;

  return (
    <div
      data-testid=""BREADCRUMBS_WRAPPER""
      ref={ref}
      className={clsx(styles.wrapper, className)}
      style={{ width: `${width}%` }}
    >
      {condition ? <BasicBreadcrumbs crumbs={crumbs} /> : <ShortenBreadcrumbs crumbs={crumbs} />}
    </div>
  );
};

export default Breadcrumbs;
"
Codes for components Stepper _stories Stories.tsx,"import React, { useState } from 'react';

import Editor from '@components/_storybook/Stories/components/Editor';
import FigmaEmbed from '@components/_storybook/Stories/components/FigmaEmbed';
import Header from '@components/_storybook/Stories/components/Header';
import Properties from '@components/_storybook/Stories/components/Properties';
import Tests from '@components/_storybook/Stories/components/Tests';
import '@components/_storybook/Stories/styles.css';
import { Tabs, Typography } from '@components/index';

import styles from '@components/_storybook/Stories/Stories.module.scss';

import { argsTypes } from './argsTypes';

enum TabIds {
  dev,
  design,
  tests
}

const COMPONENT_NAME = 'Stepper';
const FIGMA_URL =
  'https://www.figma.com/design/byZZI6bYz2Iv2Jst7ycZ7M/Navigation-DS-3.0?node-id=1691-27062&t=I1IeUAVDniHLRdle-0';

const Stories = (): JSX.Element => {
  const [activeTab, setActiveTab] = useState<TabIds>(TabIds.dev);

  const isActive = (tab: TabIds) => {
    return activeTab === tab;
  };

  return (
    <div className={styles.wrapper}>
      <Header
        title={COMPONENT_NAME}
        description={
          'Компонент Stepper представляет из себя пользовательный компонент, который отображает текущий Step (с помощью компонента Badge), его название и линию - Divider. По нему можно кликнуть и получить его состояние и индекс.'
        }
        isStable
        codeLink={`https://github.com/nlmk-group/ds-2.0/tree/main/src/components/${COMPONENT_NAME}`}
        figmaLink={FIGMA_URL}
      />

      <div className={styles.tabs}>
        <Tabs>
          <Tabs.Tab label=""Разработчику"" active={isActive(TabIds.dev)} onClick={() => setActiveTab(TabIds.dev)} />
          {/* <Tabs.Tab label=""Дизайнеру"" active={isActive(TabIds.design)} onClick={() => setActiveTab(TabIds.design)} /> */}
          <Tabs.Tab label=""Тестирование"" active={isActive(TabIds.tests)} onClick={() => setActiveTab(TabIds.tests)} />
        </Tabs>
      </div>

      {activeTab == TabIds.dev && (
        <>
          <Editor
            height={420}
            description=""Stepper в состоянии filled""
            code={`import { Box, Stepper } from '@nlmk/ds-2.0';

const App = () => {
  const mockSteps = [{
    state: 'filled',
    stepName: 'Filled'
  }, {
    state: 'focused',
    stepName: 'Focused'
  }, {
    state: 'inProgress',
    stepName: 'In Progress'
  }];

  return (
        <Box flexDirection=""row"" width=""100%"" gap={16}>
          {mockSteps.map((step, i) => <Stepper key={i} state={step.state} index={i} showStep={i !== mockSteps.length - 1} stepName={step.stepName} />)}
        </Box>
    )
}

export default App;
              `}
          />

          <Properties argsTypes={argsTypes} />
        </>
      )}
      {activeTab == TabIds.design && <FigmaEmbed url={FIGMA_URL} />}
      {activeTab == TabIds.tests && (
        <Typography variant=""Heading4"" color=""primary"">
          <Tests componentName={COMPONENT_NAME} />
        </Typography>
      )}
    </div>
  );
};

export default Stories;
"
Codes for components Stepper index.tsx,"import React, { FC } from 'react';

import Box from '@components/Box';
import { Divider } from '@components/index';
import clsx from 'clsx';

import { Step } from './subcomponents/Step';

import { IStepperProps } from './types';

import styles from './Stepper.module.scss';

/**
 * Компонент Stepper для отображения последовательности шагов.
 *
 * @param {IStepperProps} props
 * @param {`${EStepState}`} props.state - Состояние шага.
 * @param {string} props.stepName - Название шага.
 * @param {boolean} props.showStep - Показывать ли шаг.
 * @param {string} [props.className] - Дополнительный CSS класс.
 * @param {number} props.index - Индекс шага.
 * @param {(value: { state: `${EStepState}`, index: number }) => void} [props.onClick] - Обработчик клика по шагу.
 */
const Stepper: FC<IStepperProps> = ({ state, stepName, showStep, className, index, onClick }) => {
  return (
    <Box
      className={clsx(className, state === 'disabled' && styles.disabled)}
      alignItems=""center""
      justifyContent=""center""
      gap={8}
      width={showStep ? '100%' : 'auto'}
      onClick={() => onClick && onClick({ state: state, index: index })}
      key={index}
    >
      <Step stepName={stepName} index={index} state={state} />
      {showStep && <Divider className={styles['divider-line']} />}
    </Box>
  );
};

export default Stepper;
"
Codes for components Spinner index.tsx,"import React, { FC } from 'react';

import { ISpinner, sizes } from './types';

import styles from './Spinner.module.scss';
import { Typography } from '@components/index'

const spinnerSizes: { [key: string]: number } = { xxl: 96, xl: 56, l: 40, m: 32 };
const defaultSize = spinnerSizes[sizes.LARGE];

const Spinner: FC<ISpinner> = ({
  size = defaultSize,
  bgColor,
  color,
  percent = null,
  children
}) => {
  const spinnerSize = spinnerSizes[size] ?? defaultSize;
  const isIcon = children?.type.name.includes('Icon');
  const typographyOptionHelper = () => {
    switch(size) {
      case sizes.EXTRA_EXTRA_LARGE:
        return 'Heading3';
      case sizes.EXTRA_LARGE:
        return 'Body1-Bold';
      case sizes.LARGE:
        return 'Caption-Bold';
      case sizes.MEDIUM:
        return 'Caption-Bold';
      default:
        return 'Caption-Bold';
    }
  }
  return (
    <div className={styles['spinner-wrapper']}>
      {percent !== null && (
        <div
          className={styles['percent-wrapper']}
          style={{ color }}
        >
          <Typography variant={typographyOptionHelper()}>
            {percent < 100 ? percent : 99}%
          </Typography>
        </div>
      )}
      {!children || !isIcon ? (
        <>
          <span
            className={styles.bg}
            style={{
              width: spinnerSize,
              height: spinnerSize,
              color: bgColor
            }}
            role=""progressbar""
          >
            <svg viewBox=""22 22 44 44"">
              <circle cx=""44"" cy=""44"" r=""20"" fill=""none"" strokeWidth=""4""></circle>
            </svg>
          </span>
          <span className={styles.loader} style={{ width: spinnerSize, height: spinnerSize, color }} role=""progressbar"">
            <svg viewBox=""22 22 44 44"">
              <circle cx=""44"" cy=""44"" r=""20"" fill=""none"" strokeWidth=""4""></circle>
            </svg>
          </span>
        </>
      ) : (
        <div className={styles.icon}>{children}</div>
      )}
    </div>
  );
};

export default Spinner;
"
Codes for components Spinner _stories Stories.tsx,"import React, { useState } from 'react';

import Editor from '@components/_storybook/Stories/components/Editor';
import FigmaEmbed from '@components/_storybook/Stories/components/FigmaEmbed';
import Header from '@components/_storybook/Stories/components/Header';
import Properties from '@components/_storybook/Stories/components/Properties';
import Tests from '@components/_storybook/Stories/components/Tests';
import '@components/_storybook/Stories/styles.css';
import { Tabs } from '@components/index';

import styles from '@components/_storybook/Stories/Stories.module.scss';

import argsTypes from './argsTypes';

const Stories = (): JSX.Element => {
  const [activeTab, setActiveTab] = useState(0);

  return (
    <div className={styles.wrapper}>
      <Header
        title=""Spinner""
        description=""Spinner — это компонент который используется в качестве индикатора загрузки.""
        isStable
        codeLink=""https://github.com/nlmk-group/ds-2.0/tree/main/src/components/InputRange""
        figmaLink=""https://www.figma.com/file/aTZAtKI8GYQvLF5bOK84ZH/DS2.0-Loader-%26-Overlay?node-id=2%3A10&mode=dev""
      />

      <div className={styles.tabs}>
        <Tabs>
          <Tabs.Tab label=""Разработчику"" active={0 === Number(activeTab)} onClick={() => setActiveTab(0)} />
          {/* <Tabs.Tab label=""Дизайнеру"" active={1 === Number(activeTab)} onClick={() => setActiveTab(1)} /> */}
          <Tabs.Tab label=""Тестирование"" active={2 === Number(activeTab)} onClick={() => setActiveTab(2)} />
        </Tabs>
      </div>

      {Number(activeTab) == 0 && (
        <>
          <Editor
            height={200}
            description=""Spinner состояние по умолчанию""
            code={`import { Spinner } from '@nlmk/ds-2.0';

export default  App = () => (
  <>
    <Spinner />
  </>
)
`}
          />

          <Editor
            height={250}
            description=""Spinner размера medium и large""
            code={`import { Spinner } from '@nlmk/ds-2.0';

export default  App = () => (
  <>
    <Spinner size=""m"" />
    <div/>
    <Spinner size=""l"" />
  </>
)
`}
          />

          <Editor
            height={200}
            description=""Spinner с разными цветами""
            code={`import { Spinner } from '@nlmk/ds-2.0';

export default  App = () => (
  <>
    <Spinner bgColor=""#ff6e40"" color=""#1e3d59"" />
  </>
)
`}
          />

          <Editor
            description=""Spinner где Icon, как children (JSX.Element)""
            code={`import { Spinner, IconAutoRenewReloadOutlined24 } from '@nlmk/ds-2.0';

export default  App = () => (
  <>
    <Spinner>
      <IconAutoRenewReloadOutlined24 />
    </Spinner>
  </>
)
`}
          />

          <Properties argsTypes={argsTypes} />
        </>
      )}
      {Number(activeTab) == 1 && (
        <FigmaEmbed url=""https://www.figma.com/file/aTZAtKI8GYQvLF5bOK84ZH/DS2.0-Loader-%26-Overlay?type=design&node-id=2-10&mode=design&t=VPWVvr1xxRraTKwa-0"" />
      )}
      {Number(activeTab) == 2 && <Tests componentName=""Spinner"" />}
    </div>
  );
};

export default Stories;
"
Codes for components Typography _stories Stories.tsx,"import React, { useState } from 'react';

import Editor from '@components/_storybook/Stories/components/Editor';
import FigmaEmbed from '@components/_storybook/Stories/components/FigmaEmbed';
import Header from '@components/_storybook/Stories/components/Header';
import Properties from '@components/_storybook/Stories/components/Properties';
import Tests from '@components/_storybook/Stories/components/Tests';
import '@components/_storybook/Stories/styles.css';
import { Tabs } from '@components/index';

import styles from '@components/_storybook/Stories/Stories.module.scss';

import { argsTypes } from './argsTypes';

enum TabIds {
  dev,
  design,
  tests
}

const COMPONENT_NAME = 'Typography';
const FIGMA_URL =
  'https://www.figma.com/file/MSMqfqJrQNaqbLe4Ctkq7n/Design-System-2.0-NLMK-(beta)-(Community)?type=design&node-id=1027%3A18324&mode=design&t=awyt3Fzj1XS6th7v-1';

const Stories = (): JSX.Element => {
  const [activeTab, setActiveTab] = useState<TabIds>(TabIds.dev);

  const isActive = (tab: TabIds) => {
    return activeTab === tab;
  };

  return (
    <div className={styles.wrapper}>
      <Header
        title={COMPONENT_NAME}
        description={`Компонент для стандартизации текста и относящимся к нему свойствам стилизации.`}
        isStable
        codeLink={`https://github.com/nlmk-group/ds-2.0/tree/main/src/components/${COMPONENT_NAME}`}
        figmaLink={FIGMA_URL}
      />

      <div className={styles.tabs}>
        <Tabs>
          <Tabs.Tab label=""Разработчику"" active={isActive(TabIds.dev)} onClick={() => setActiveTab(TabIds.dev)} />
          {/* <Tabs.Tab label=""Дизайнеру"" active={isActive(TabIds.design)} onClick={() => setActiveTab(TabIds.design)} /> */}
          <Tabs.Tab label=""Тестирование"" active={isActive(TabIds.tests)} onClick={() => setActiveTab(TabIds.tests)} />
        </Tabs>
      </div>

      {activeTab == TabIds.dev && (
        <>
          <Editor
            height={200}
            description=""Типография по умолчанию""
            code={`import { Typography } from '@nlmk/ds-2.0';

export default App = () => (
  <Typography>
    Default Typography Component
  </Typography>
)
              `}
          />
          <Editor
            height={400}
            description=""Элементы типографии представляют собой текст с обязательно примененными
            стилями: размером шрифта (font-size), величиной пространства между строками
            (line-height) и жирностью шрифта (font-weight). Также в таблице представлены
            пояснения для целевого использования объектов типографии.""
            code={`import { Typography } from '@nlmk/ds-2.0';

  const rows = [
    {
      title: 'Heading1',
      fontSize: 48,
      lineHeight: 56,
      fontWeight: 700,
      description: 'Заголовок'
    },
    {
      title: 'Subheading1',
      fontSize: 32,
      lineHeight: 40,
      fontWeight: 400,
      description: 'Подзаголовок'
    },
    {
      title: 'Heading2',
      fontSize: 32,
      lineHeight: 40,
      fontWeight: 700,
      description: 'Заголовок'
    },
    {
      title: 'Subheading2',
      fontSize: 24,
      lineHeight: 32,
      fontWeight: 400,
      description: 'Подзаголовок'
    },
    {
      title: 'Subheading2-Medium',
      fontSize: 24,
      lineHeight: 32,
      fontWeight: 500,
      description: 'Подзаголовок'
    },
    {
      title: 'Heading3',
      fontSize: 24,
      lineHeight: 32,
      fontWeight: 700,
      description: 'Заголовок'
    },
    {
      title: 'Subheading3',
      fontSize: 20,
      lineHeight: 28,
      fontWeight: 400,
      description: 'Подзаголовок'
    },
    {
      title: 'Subheading3-Medium',
      fontSize: 20,
      lineHeight: 28,
      fontWeight: 500,
      description: 'Подзаголовок'
    },
    {
      title: 'Heading4',
      fontSize: 20,
      lineHeight: 28,
      fontWeight: 700,
      description: 'Заголовок'
    },
    {
      title: 'Body',
      fontSize: 18,
      lineHeight: 24,
      fontWeight: 400,
      description: ''
    },
    {
      title: 'Body-Medium',
      fontSize: 18,
      lineHeight: 24,
      fontWeight: 500,
      description: ''
    },
    {
      title: 'Body-Bold',
      fontSize: 18,
      lineHeight: 24,
      fontWeight: 700,
      description: ''
    },
    {
      title: 'Body1',
      fontSize: 16,
      lineHeight: 22,
      fontWeight: 400,
      description: 'Текст контента тонкий'
    },
    {
      title: 'Body1-Medium',
      fontSize: 16,
      lineHeight: 22,
      fontWeight: 500,
      description: 'Текст инпутов, ячеек таблиц, контента'
    },
    {
      title: 'Body1Table-Medium',
      fontSize: 16,
      lineHeight: 16,
      fontWeight: 500,
      description: 'Текст для ячеек таблиц 40px и 32px'
    },
    {
      title: 'Body1Mono-Medium',
      fontSize: 16,
      lineHeight: 22,
      fontWeight: 500,
      description: 'Текст для цифр в ячейках таблиц'
    },
    {
      title: 'Body1Mono-Bold',
      fontSize: 16,
      lineHeight: 22,
      fontWeight: 700,
      description: 'Жирный текст для цифр в ячейках таблиц'
    },
    {
      title: 'Body1-Bold',
      fontSize: 16,
      lineHeight: 22,
      fontWeight: 700,
      description: 'Текст в кнопках, жирный текст у активных элементов'
    },
    {
      title: 'Body2',
      fontSize: 14,
      lineHeight: 18,
      fontWeight: 400,
      description: 'Текст контента тонкий'
    },
    {
      title: 'Body2-Medium',
      fontSize: 14,
      lineHeight: 18,
      fontWeight: 500,
      description: 'Текст инпутов, ячеек таблиц, контента'
    },
    {
      title: 'Body2Mono-Medium',
      fontSize: 14,
      lineHeight: 18,
      fontWeight: 500,
      description: 'Текст для цифр в ячейках таблиц'
    },
    {
      title: 'Body2Mono-Bold',
      fontSize: 14,
      lineHeight: 18,
      fontWeight: 700,
      description: 'Жирный текст для цифр в ячейках таблиц'
    },
    {
      title: 'Body2-Bold',
      fontSize: 14,
      lineHeight: 18,
      fontWeight: 700,
      description: 'Текст в кнопках, жирный текст у активных элементов'
    },
    {
      title: 'Caption',
      fontSize: 12,
      lineHeight: 16,
      fontWeight: 400,
      description: 'Текст мелкий для подписей, шкал графиков'
    },
    {
      title: 'Caption-Medium',
      fontSize: 12,
      lineHeight: 16,
      fontWeight: 500,
      description: 'Текст мелкий для подписей, шкал графиков'
    },
    {
      title: 'Caption-Bold',
      fontSize: 12,
      lineHeight: 16,
      fontWeight: 700,
      description: 'Текст мелкий для подписей, шкал графиков'
    },
    {
      title: 'CaptionMono',
      fontSize: 12,
      lineHeight: 16,
      fontWeight: 400,
      description: 'Моноширинное начертание для числовых данных'
    },
    {
      title: 'CaptionMono-Medium',
      fontSize: 12,
      lineHeight: 16,
      fontWeight: 500,
      description: 'Моноширинное начертание для числовых данных'
    },
    {
      title: 'CaptionMono-Bold',
      fontSize: 12,
      lineHeight: 16,
      fontWeight: 700,
      description: 'Моноширинное начертание для числовых данных'
    },
    {
      title: 'Additional-Bold',
      fontSize: 9,
      lineHeight: 12,
      fontWeight: 700,
      description: 'Жирный текст для Badge XS'
    }
  ];

export default App = () => (
  <>
  {rows.map(variant => (
    <div key={variant.title}>
      <Typography variant={variant.title} color=""primary"">
        {variant.title}
      </Typography>
      <Typography color=""primary"">
        {variant.fontSize} - {variant.lineHeight}
      </Typography>
      <Typography color=""primary"">{variant.fontWeight}</Typography>
      <Typography color=""primary"">{variant.description}</Typography>
    </div>
  ))}
  </>
)
              `}
          />

          <Properties argsTypes={argsTypes} />
        </>
      )}
      {activeTab == TabIds.design && <FigmaEmbed url={FIGMA_URL} />}
      {activeTab == TabIds.tests && <Tests componentName={COMPONENT_NAME} />}
    </div>
  );
};

export default Stories;
"
Codes for components Typography index.tsx,"import React, { CSSProperties, FC, ReactNode } from 'react';

import clsx from 'clsx';

import { ITypographyProps } from './types';

import styles from './Typography.module.scss';

import { ETypographyVariants } from './enums';

/**
 * Компонент Typography для стилизованного отображения текста.
 * @component
 * @param {Object} props - Свойства компонента Typography.
 * @param {ETypographyVariants} [props.variant=ETypographyVariants.Body1] - Вариант типографики.
 * @param {React.ReactNode} props.children - Текстовое содержимое.
 * @param {string} [props.className] - Дополнительный CSS класс.
 * @param {CSSProperties['color']} [props.color] - Цвет текста.
 * @param {CSSProperties} [props.style] - Дополнительные встроенные стили.
 * @returns {JSX.Element} Компонент Typography.
 */

const Typography: FC<ITypographyProps> = ({
  variant = ETypographyVariants.Body1,
  children,
  className,
  color,
  style,
  ...props
}: {
  variant?: `${ETypographyVariants}`;
  children: ReactNode;
  className?: string;
  color?: CSSProperties['color'];
  style?: CSSProperties;
}): JSX.Element => {
  const variantClass = styles[`typography--variant-${variant}`];

  return (
    <span
      data-testid=""typography-wrapper""
      className={clsx(variantClass, styles.typography, className)}
      style={{ color, ...style }}
      {...props}
    >
      {children}
    </span>
  );
};

export default Typography;
"
Codes for components Box index.tsx,"import React, { FC } from 'react';

import clsx from 'clsx';

import { IBox } from './types';

import styles from './Box.module.scss';

const Box: FC<IBox> = ({
  children,
  st,
  className,
  p = 0,
  px,
  py,
  pt,
  pb,
  pl,
  pr,
  background,
  height,
  width,
  maxWidth,
  color = 'var(--text-grey-900)',
  border,
  borderRadius = 0,
  display = 'flex',
  flexDirection,
  justifyContent,
  alignItems,
  flexWrap,
  gap = '24px',
  ...rest
}) => {
  const propsStyles = {
    backgroundColor: background,
    height,
    color,
    width,
    maxWidth,
    border,
    borderRadius,
    display,
    flexDirection,
    justifyContent,
    alignItems,
    flexWrap,
    gap,
    padding: p,
    paddingTop: pt,
    paddingBottom: pb,
    paddingLeft: pl,
    paddingRight: pr,
    ...st
  };

  if (px !== undefined) {
    propsStyles.paddingLeft = px;
    propsStyles.paddingRight = px;
  }

  if (py !== undefined) {
    propsStyles.paddingTop = py;
    propsStyles.paddingBottom = py;
  }

  return (
    <div data-testid=""BOX_WRAPPER"" className={clsx(styles.wrapper, className)} style={propsStyles} {...rest}>
      {children}
    </div>
  );
};

export default Box;
"
Codes for components Box _stories Stories.tsx,"import React, { useState } from 'react';

import Editor from '@components/_storybook/Stories/components/Editor';
import Header from '@components/_storybook/Stories/components/Header';
import Properties from '@components/_storybook/Stories/components/Properties';
import Tests from '@components/_storybook/Stories/components/Tests';
import '@components/_storybook/Stories/styles.css';
import { Tabs } from '@components/index';

import styles from '@components/_storybook/Stories/Stories.module.scss';

import { argsTypes } from './argsTypes';

const Stories = (): JSX.Element => {
  const [activeTab, setActiveTab] = useState(0);

  return (
    <div className={styles.wrapper}>
      <Header
        title=""Box""
        description=""Компонент Box представляет собой универсальный контейнер, используемый для стилизации и компоновки содержимого. Он обладает пропсами для управления стилями, включая background, padding, border, borderRadius и flexbox свойствами, такими как display, flexDirection, justifyContent, alignItems, flexWrap и gap. Это делает Box инструментом для создания структурированного и адаптивного интерфейса.""
        isStable
        codeLink=""https://github.com/nlmk-group/ds-2.0/tree/main/src/components/Box""
      />

      <div className={styles.tabs}>
        <Tabs>
          <Tabs.Tab label=""Разработчику"" active={activeTab === 0} onClick={() => setActiveTab(0)} />
          <Tabs.Tab label=""Тестирование"" active={activeTab === 2} onClick={() => setActiveTab(2)} />
        </Tabs>
      </div>

      {activeTab === 0 && (
        <>
          <Editor
            height={500}
            description=""Большинство свойств стилей можно настраивать через пропсы компонента. Также все свойства доступны через пропс st.""
            code={`import { Box, Button, Divider } from '@nlmk/ds-2.0';

export default App = () => (
  <div style={{ width: ""100%"", padding: 0 }}>
    <Box
      border=""1px solid var(--ac-button-grey-outline-default-stroke)""
      borderRadius=""var(--8-radius)""
      p=""var(--8-space)""
    >
      <Button>Заполнить</Button>
      <Button variant=""grey"">Посмотреть</Button>
    </Box>
    <br />
    <Divider dashed />
    <br />
    <Box justifyContent=""center"">
      <Box
        width=""250px""
        flexDirection=""column""
        borderRadius=""var(--4-radius)""
        alignItems=""center""
        background=""var(--background-info)""
        py=""var(--60-space)""
        px=""var(--60-space)""
        st={{
          boxShadow: ""0 10px 10px var(--background-default)""
        }}
      >
        <Button>Заполнить</Button>
      </Box>
    </Box>
  </div>
)`}
          />
          <Properties argsTypes={argsTypes} />
        </>
      )}
      {activeTab === 2 && (<Tests componentName=""Box"" />)}
    </div>
  );
};

export default Stories;
"
Codes for components Alert index.tsx,"import React, { FC, ReactElement, ReactNode } from 'react';

import {
  Button,
  IconCloseOutlined16,
  Typography
} from '@components/index';
import { clsx } from 'clsx';

import { IAlertProps, IIconSeverityColor } from './types';

import styles from './Alert.module.scss';

import { EAlertSeverity } from './enums';
import { Icon } from '@components/Icon';

/**
 * Компонент Alert для отображения информационных сообщений различных типов.
 * @component
 * @param {Object} props - Свойства компонента Alert.
 * @param {string} props.title - Заголовок сообщения Alert.
 * @param {EAlertSeverity} [props.severity=EAlertSeverity.success] - Тип сообщения (успех, ошибка, предупреждение, информация).
 * @param {ReactNode} [props.children] - Дочерние элементы для отображения дополнительного содержимого.
 * @param {() => void} [props.close] - Функция обратного вызова для закрытия Alert.
 * @param {ReactNode} [props.action] - Дополнительный элемент действия.
 * @param {string} [props.className] - Дополнительные CSS классы.
 * @returns {ReactElement} Компонент Alert.
 */

const Alert: FC<IAlertProps> = ({
  title,
  severity = EAlertSeverity.success,
  children,
  close,
  action,
  className
}: {
  title: string;
  severity?: `${EAlertSeverity}`;
  children?: ReactNode;
  close?: () => void;
  action?: ReactNode;
  className?: string;
}): ReactElement => {
  const AlertIcon = () => {
    const severityStyles: IIconSeverityColor = {
      [EAlertSeverity.success]: 'var(--spectrum-green-60)',
      [EAlertSeverity.error]: 'var(--spectrum-red-60)',
      [EAlertSeverity.warning]: 'var(--spectrum-orange-60)',
      [EAlertSeverity.info]: 'var(--spectrum-sky-60)'
    };

    switch (severity) {
      case EAlertSeverity.success:
        return <Icon name=""IconSuccessOutlined24"" htmlColor={severityStyles[severity]} />;
      case EAlertSeverity.error:
        return <Icon name=""IconAttentionWarningAlertErrorOutlined24"" htmlColor={severityStyles[severity]} />;
      case EAlertSeverity.warning:
        return <Icon name=""IconAttentionWarningAlertErrorOutlined24"" htmlColor={severityStyles[severity]} />;
      case EAlertSeverity.info:
        return <Icon name=""IconInfoOutlined24"" htmlColor={severityStyles[severity]} />;
      default:
        return <Icon name=""IconSuccessOutlined24"" htmlColor={severityStyles[severity] || 'var(--spectrum-green-60)'} />;
    }
  };

  return (
    <div data-testid=""ALERT_WRAPPER"" className={clsx(styles.wrapper, styles[`wrapper-${severity}`], className)}>
      <div data-testid=""ALERT_TITLE"" className={styles.content}>
        <AlertIcon />
        <Typography variant=""Body2-Bold"">{title}</Typography>
        <div className={styles['action-wrapper']}>
          {action && action}
          {close && (
            <Button
              variant=""grey""
              fill=""clear""
              onClick={close}
              className={styles.close}
              size=""xs""
              iconButton={<IconCloseOutlined16 htmlColor=""var(--steel-80)"" />}
            />
          )}
        </div>
      </div>
      {children && (
        <div className={styles['content-description']}>
          <Typography variant=""Body2-Medium"">{children}</Typography>
        </div>
      )}
    </div>
  );
};

export default Alert;
"
Codes for components Alert _stories Stories.tsx,"import React, { useState } from 'react';

import Editor from '@components/_storybook/Stories/components/Editor';
import FigmaEmbed from '@components/_storybook/Stories/components/FigmaEmbed';
import Header from '@components/_storybook/Stories/components/Header';
import Properties from '@components/_storybook/Stories/components/Properties';
import Tests from '@components/_storybook/Stories/components/Tests';
import '@components/_storybook/Stories/styles.css';
import { Tabs } from '@components/index';

import styles from '@components/_storybook/Stories/Stories.module.scss';

import { argsTypes } from './argsTypes';

const Stories = (): JSX.Element => {
  const [activeTab, setActiveTab] = useState(0);

  return (
    <div className={styles.wrapper}>
      <Header
        title=""Alert""
        description=""Компонент Alert представляет собой компонент уведомления или предупреждения. Он используется для отображения важных сообщений пользователю с цветовой кодировкой в зависимости от уровня серьёзности ситуации. Поддерживает несколько вариантов отображения: стандартный, заполненный и с обведённым контуром.""
        isStable
        codeLink=""https://github.com/nlmk-group/ds-2.0/tree/main/src/components/AttachFiles""
        figmaLink=""https://www.figma.com/file/MSMqfqJrQNaqbLe4Ctkq7n/Design-System-2.0-NLMK-(beta)-(Community)?type=design&node-id=1036%3A9739&mode=design&t=awyt3Fzj1XS6th7v-1""
      />

      <div className={styles.tabs}>
        <Tabs>
          <Tabs.Tab label=""Разработчику"" active={0 === Number(activeTab)} onClick={() => setActiveTab(0)} />
          {/* <Tabs.Tab label=""Дизайнеру"" active={1 === Number(activeTab)} onClick={() => setActiveTab(1)} /> */}
          <Tabs.Tab label=""Тестирование"" active={2 === Number(activeTab)} onClick={() => setActiveTab(2)} />
        </Tabs>
      </div>

      {Number(activeTab) == 0 && (
        <>
          <Editor
            description=""Компонент Alert разработан в разных вариантах: успешным, с ошибкой, с предупреждением и в качестве информационного оповещения. Для собственных вариантов используйте className.""
            code={`import { Alert } from '@nlmk/ds-2.0';

export default  App = () =>(
  <>
    <Alert title=""Оповещение по умолчанию"" />
    <Alert severity=""error"" title=""Оповещение об ошибке"" />
    <Alert severity=""warning"" title=""Оповещение предупреждения"" />
    <Alert severity=""info"" title=""Информационное оповещение"" />
  </>
)`}
          />

          <Editor
            description=""Компонент Alert можно использовать с описанием, которое можно добавить к оповещению.""
            code={`import { Alert } from '@nlmk/ds-2.0';

export default  App = () =>(
  <>
  <Alert
    severity=""error""
    title=""Оповещение с контентом""
  >
    <p>Значимость этих проблем настолько очевидна, что дальнейшее развитие различных форм деятельности прекрасно подходит для реализации существующих финансовых и административных условий.</p>
  </Alert>
  </>
)`}
          />

          <Editor
            description=""Компонент Alert может быть добавлен с встроенной кнопкой закрытия""
            code={`
import { Alert } from '@nlmk/ds-2.0';

const App = () => (
  <Alert severity=""info""
    close={ () => alert('Я закрыл!') }
    title=""Оповещение с кнопкой закрытия""/>
)
export default App
`}
          />

          <Editor
            description=""Компонент Alert может быть добавлен с другими кнопками""
            code={`
import { Alert, Button, IconDeleteBinOutlined24 } from '@nlmk/ds-2.0';

const App = () => (
  <Alert severity=""info""
    action={
      <Button fill=""clear""
        iconButton={
          <IconDeleteBinOutlined24
            htmlColor='var(--ac-alert-info-text)' />
        }
        onClick={() => confirm('Подтвердите удаление!')} />
    }
    title=""Оповещение с кнопкой удаления"" />
)
export default App
`}
          />

          <Properties argsTypes={argsTypes} />
        </>
      )}
      {Number(activeTab) == 1 && (
        <FigmaEmbed url=""https://www.figma.com/file/MSMqfqJrQNaqbLe4Ctkq7n/Design-System-2.0-NLMK-(beta)-(Community)?type=design&node-id=1036%3A9739&mode=design&t=awyt3Fzj1XS6th7v-1"" />
      )}
      {Number(activeTab) == 2 && <Tests componentName=""Alert"" />}
    </div>
  );
};

export default Stories;
"
Codes for components Accordion index.tsx,"import React, { useEffect, useState, Fragment } from 'react';

import clsx from 'clsx';

import { IAccordionProps } from './types';

import styles from './Accordion.module.scss';

import { iconsMapping, sizesMapping, variantsMapping } from './enums';
import AccordionItem from './subcomponents/AccordionItem';
import { TAccordionItem } from './subcomponents/AccordionItem/types';

export const Accordion: React.FC<IAccordionProps> = ({
  items,
  variant = variantsMapping.default,
  startIcon = iconsMapping.arrow,
  endIcon = null,
  size = sizesMapping.m,
  multipleExpanded = false,
  className,
  disabled = false,
  ...props
}) => {
  const [expandedItemIds, setExpandedItemIds] = useState<TAccordionItem['id'][]>([]);

  const handleExpand = (id: TAccordionItem['id']) => {
    const isExpanded = expandedItemIds.includes(id);

    if (multipleExpanded) {
      setExpandedItemIds(prev => (isExpanded ? prev.filter(item => item !== id) : [...prev, id]));
    } else {
      setExpandedItemIds(() => (isExpanded ? [] : [id]));
    }
  };

  useEffect(() => {
    const expandedOnStartIds = items.filter(i => i.initiallyExpanded).map(i => i.id);
    setExpandedItemIds(expandedOnStartIds);
  }, [items]);

  return (
    <div className={clsx(styles.wrapper, className)} {...props}>
      {items.map((item: TAccordionItem) => {
        return (
          <Fragment key={item.id}>
            <AccordionItem
              id={item.id}
              title={item.title}
              onExpand={handleExpand}
              isExpanded={expandedItemIds.includes(item.id)}
              startIcon={startIcon}
              endIcon={endIcon}
              size={size}
              variant={variant}
              disabled={disabled || item.disabled}
            >
              {item.content}
            </AccordionItem>
          </Fragment>
        );
      })}
    </div>
  );
};

export default Accordion;
"
Codes for components Accordion _stories Stories.tsx,"import React, { useState } from 'react';

import Editor from '@components/_storybook/Stories/components/Editor';
import FigmaEmbed from '@components/_storybook/Stories/components/FigmaEmbed';
import Header from '@components/_storybook/Stories/components/Header';
import Properties from '@components/_storybook/Stories/components/Properties';
import Tests from '@components/_storybook/Stories/components/Tests';
import '@components/_storybook/Stories/styles.css';
import { Tabs } from '@components/index';

import styles from '@components/_storybook/Stories/Stories.module.scss';

import { iconsMapping, sizesMapping, variantsMapping } from '../enums';
import { argsTypes } from './argsTypes';

enum TabIds {
  dev,
  design,
  tests
}

const COMPONENT_NAME = 'Accordion';
const FIGMA_URL =
  'https://www.figma.com/file/MSMqfqJrQNaqbLe4Ctkq7n/Design-System-2.0-NLMK-(beta)-(Community)?type=design&node-id=1026%3A7066&mode=design&t=awyt3Fzj1XS6th7v-1';

const Stories = (): JSX.Element => {
  const [activeTab, setActiveTab] = useState<TabIds>(TabIds.dev);

  const isActive = (tab: TabIds) => {
    return activeTab === tab;
  };

  return (
    <div className={styles.wrapper}>
      <Header
        title={COMPONENT_NAME}
        description={`Компонент ""аккордеон"" предоставляет большие объемы контента в ограниченном пространстве с помощью пошагового раскрытия. Заголовок обеспечивает пользователю общий обзор содержимого, позволяя решить, какие разделы читать.

        Аккордеоны могут сделать обработку информации и поиск более эффективными. Однако они скрывают контент от пользователей, и важно учесть, что пользователь может не заметить или не прочитать весь включенный контент. Если пользователь, вероятно, должен прочесть весь контент, не используйте аккордеон, так как это добавляет дополнительный клик; вместо этого используйте полноценную прокручиваемую страницу с обычными заголовками.`}
        isStable
        codeLink={`https://github.com/nlmk-group/ds-2.0/tree/main/src/components/${COMPONENT_NAME}`}
        figmaLink={FIGMA_URL}
      />

      <div className={styles.tabs}>
        <Tabs>
          <Tabs.Tab label=""Разработчику"" active={isActive(TabIds.dev)} onClick={() => setActiveTab(TabIds.dev)} />
          {/* <Tabs.Tab label=""Дизайнеру"" active={isActive(TabIds.design)} onClick={() => setActiveTab(TabIds.design)} /> */}
          <Tabs.Tab label=""Тестирование"" active={isActive(TabIds.tests)} onClick={() => setActiveTab(TabIds.tests)} />
        </Tabs>
      </div>

      {activeTab == TabIds.dev && (
        <>
          <Editor
            description=""Аккордеон по умолчанию""
            code={`import { Accordion } from '@nlmk/ds-2.0';

const items = [
    {
      id: 1,
      title: 'First accordion item',
      content: 'Lorem ipsum',
      initiallyExpanded: true
    },
    {
      id: 2,
      title: '2nd accordion item',
      content: 'Lorem ipsum'
    },
    {
      id: 3,
      title: 'Last accordion item',
      content: 'Lorem ipsum'
    }
  ]

export default App = () => (
  <Accordion items={items} />
)
              `}
          />

          <Editor
            description={`Варианты размеров аккордеона: ${Object.values(sizesMapping).join(' | ')}`}
            code={`import { Accordion } from '@nlmk/ds-2.0';

const items = [
  {
    id: 1,
    title: 'First accordion item',
    content: 'Lorem ipsum',
    initiallyExpanded: true
  },
  {
    id: 2,
    title: '2nd accordion item',
    content: 'Lorem ipsum'
  },
  {
    id: 3,
    title: 'Last accordion item',
    content: 'Lorem ipsum'
  }
]

export default App = () => (
  <>
  <Accordion size=""m"" items={items} />
  <Accordion size=""s"" items={items} />
  <Accordion size=""xs"" items={items} />
  </>
)
              `}
          />
          <Editor
            description={`Варианты иконок аккордеона: ${Object.values(iconsMapping).join(' | ')}`}
            code={`import { Accordion } from '@nlmk/ds-2.0';

const items = [
  {
    id: 1,
    title: 'First accordion item',
    content: 'Lorem ipsum',
    initiallyExpanded: true
  },
  {
    id: 2,
    title: '2nd accordion item',
    content: 'Lorem ipsum'
  },
  {
    id: 3,
    title: 'Last accordion item',
    content: 'Lorem ipsum'
  }
]

export default App = () => (
  <>
  <Accordion startIcon=""arrow"" items={items} />
  <Accordion startIcon=""plus"" items={items} />
  <Accordion startIcon={null} endIcon=""arrow"" items={items} />
  <Accordion startIcon={null} endIcon=""plus"" items={items} />
  </>
)
              `}
          />

          <Editor
            description={`Цветовые варианты аккордеона: ${Object.values(variantsMapping).join(' | ')}`}
            code={`import { Accordion } from '@nlmk/ds-2.0';

const items = [
  {
    id: 1,
    title: 'First accordion item',
    content: 'Lorem ipsum',
    initiallyExpanded: true
  },
  {
    id: 2,
    title: '2nd accordion item',
    content: 'Lorem ipsum'
  },
  {
    id: 3,
    title: 'Last accordion item',
    content: 'Lorem ipsum'
  }
]

export default App = () => (
  <>
  <Accordion variant=""default"" items={items} />
  <Accordion variant=""paper"" items={items} />
  <Accordion variant=""default"" items={items} disabled />
  <Accordion variant=""paper"" items={items} disabled />
  </>
)
              `}
          />
          <Properties argsTypes={argsTypes} />
        </>
      )}
      {activeTab == TabIds.design && <FigmaEmbed url={FIGMA_URL} />}
      {activeTab == TabIds.tests && <Tests componentName={COMPONENT_NAME} />}
    </div>
  );
};

export default Stories;
"
